
KalmanFilteredIMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  000064fe  00006592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000064fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  008001a6  008001a6  00006638  2**0
                  ALLOC
  3 .stab         00003bf4  00000000  00000000  00006638  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d8c  00000000  00000000  0000a22c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000148  00000000  00000000  0000afb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000657  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002553  00000000  00000000  0000b757  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c21  00000000  00000000  0000dcaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000026b7  00000000  00000000  0000e8cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004d0  00000000  00000000  00010f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ccd  00000000  00000000  00011454  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b1a  00000000  00000000  00012121  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000206  00000000  00000000  00012c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  00012e41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__dtors_end>
       4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
       8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
       c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      34:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__vector_13>
      38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	2c 7a       	andi	r18, 0xAC	; 172
      98:	a5 ba       	out	0x15, r10	; 21
      9a:	6c c5       	rjmp	.+2776   	; 0xb74 <__stack+0x275>
      9c:	90 da       	rcall	.-2784   	; 0xfffff5be <__eeprom_end+0xff7ef5be>
      9e:	3b 93       	.word	0x933b	; ????
      a0:	65 fc       	sbrc	r6, 5
      a2:	8b bc       	out	0x2b, r8	; 43
      a4:	53 f8       	bld	r5, 3
      a6:	10 fd       	sbrc	r17, 0
      a8:	3c 56       	subi	r19, 0x6C	; 108
      aa:	92 83       	std	Z+2, r25	; 0x02
      ac:	4d bd       	out	0x2d, r20	; 45
      ae:	87 9d       	mul	r24, r7
      b0:	3a b6       	in	r3, 0x3a	; 58
      b2:	3d cb       	rjmp	.-2438   	; 0xfffff72e <__eeprom_end+0xff7ef72e>
      b4:	c9 bf       	out	0x39, r28	; 57
      b6:	5b be       	out	0x3b, r5	; 59
      b8:	73 da       	rcall	.-2842   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
      ba:	0f c9       	rjmp	.-3554   	; 0xfffff2da <__eeprom_end+0xff7ef2da>
      bc:	3f 00       	.word	0x003f	; ????

000000be <__ctors_start>:
      be:	f8 14       	cp	r15, r8

000000c0 <__ctors_end>:
      c0:	05 15       	cp	r16, r5

000000c2 <__dtors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	11 e0       	ldi	r17, 0x01	; 1
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	ee ef       	ldi	r30, 0xFE	; 254
      d6:	f4 e6       	ldi	r31, 0x64	; 100
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a6 3a       	cpi	r26, 0xA6	; 166
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	12 e0       	ldi	r17, 0x02	; 2
      e6:	a6 ea       	ldi	r26, 0xA6	; 166
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a0 31       	cpi	r26, 0x10	; 16
      f0:	b1 07       	cpc	r27, r17
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>

000000f4 <__do_global_ctors>:
      f4:	10 e0       	ldi	r17, 0x00	; 0
      f6:	c0 ec       	ldi	r28, 0xC0	; 192
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	04 c0       	rjmp	.+8      	; 0x104 <__do_global_ctors+0x10>
      fc:	22 97       	sbiw	r28, 0x02	; 2
      fe:	fe 01       	movw	r30, r28
     100:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__tablejump__>
     104:	ce 3b       	cpi	r28, 0xBE	; 190
     106:	d1 07       	cpc	r29, r17
     108:	c9 f7       	brne	.-14     	; 0xfc <__do_global_ctors+0x8>
     10a:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <main>
     10e:	0c 94 72 32 	jmp	0x64e4	; 0x64e4 <__do_global_dtors>

00000112 <__bad_interrupt>:
     112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <_Z9i2c_startv>:
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <util/delay.h>	

void i2c_start() {  
     116:	df 93       	push	r29
     118:	cf 93       	push	r28
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // send start condition  
     11e:	8c eb       	ldi	r24, 0xBC	; 188
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	24 ea       	ldi	r18, 0xA4	; 164
     124:	fc 01       	movw	r30, r24
     126:	20 83       	st	Z, r18
	while (!(TWCR & (1 << TWINT)));  
     128:	00 00       	nop
     12a:	8c eb       	ldi	r24, 0xBC	; 188
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	fc 01       	movw	r30, r24
     130:	80 81       	ld	r24, Z
     132:	80 95       	com	r24
     134:	88 1f       	adc	r24, r24
     136:	88 27       	eor	r24, r24
     138:	88 1f       	adc	r24, r24
     13a:	88 23       	and	r24, r24
     13c:	b1 f7       	brne	.-20     	; 0x12a <_Z9i2c_startv+0x14>
}  
     13e:	cf 91       	pop	r28
     140:	df 91       	pop	r29
     142:	08 95       	ret

00000144 <_Z14i2c_write_bytec>:
  
void i2c_write_byte(char byte) {  
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	0f 92       	push	r0
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	89 83       	std	Y+1, r24	; 0x01
	TWDR = byte;              
     150:	8b eb       	ldi	r24, 0xBB	; 187
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	29 81       	ldd	r18, Y+1	; 0x01
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
	TWCR = (1 << TWINT) | (1 << TWEN); // start address transmission  
     15a:	8c eb       	ldi	r24, 0xBC	; 188
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	24 e8       	ldi	r18, 0x84	; 132
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18
	while (!(TWCR & (1 << TWINT)));  
     164:	00 00       	nop
     166:	8c eb       	ldi	r24, 0xBC	; 188
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	fc 01       	movw	r30, r24
     16c:	80 81       	ld	r24, Z
     16e:	80 95       	com	r24
     170:	88 1f       	adc	r24, r24
     172:	88 27       	eor	r24, r24
     174:	88 1f       	adc	r24, r24
     176:	88 23       	and	r24, r24
     178:	b1 f7       	brne	.-20     	; 0x166 <_Z14i2c_write_bytec+0x22>
}  
     17a:	0f 90       	pop	r0
     17c:	cf 91       	pop	r28
     17e:	df 91       	pop	r29
     180:	08 95       	ret

00000182 <_Z13i2c_read_bytev>:
  
char i2c_read_byte() {  
     182:	df 93       	push	r29
     184:	cf 93       	push	r28
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN); // start data reception, transmit ACK  
     18a:	8c eb       	ldi	r24, 0xBC	; 188
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	24 ec       	ldi	r18, 0xC4	; 196
     190:	fc 01       	movw	r30, r24
     192:	20 83       	st	Z, r18
	while (!(TWCR & (1 << TWINT)));  
     194:	00 00       	nop
     196:	8c eb       	ldi	r24, 0xBC	; 188
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	fc 01       	movw	r30, r24
     19c:	80 81       	ld	r24, Z
     19e:	80 95       	com	r24
     1a0:	88 1f       	adc	r24, r24
     1a2:	88 27       	eor	r24, r24
     1a4:	88 1f       	adc	r24, r24
     1a6:	88 23       	and	r24, r24
     1a8:	b1 f7       	brne	.-20     	; 0x196 <_Z13i2c_read_bytev+0x14>
	return TWDR;  
     1aa:	8b eb       	ldi	r24, 0xBB	; 187
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	fc 01       	movw	r30, r24
     1b0:	80 81       	ld	r24, Z
}  
     1b2:	cf 91       	pop	r28
     1b4:	df 91       	pop	r29
     1b6:	08 95       	ret

000001b8 <_Z18i2c_read_last_bytev>:

char i2c_read_last_byte() {  
     1b8:	df 93       	push	r29
     1ba:	cf 93       	push	r28
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN); // start data reception
     1c0:	8c eb       	ldi	r24, 0xBC	; 188
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	24 e8       	ldi	r18, 0x84	; 132
     1c6:	fc 01       	movw	r30, r24
     1c8:	20 83       	st	Z, r18
	while (!(TWCR & (1 << TWINT)));  
     1ca:	00 00       	nop
     1cc:	8c eb       	ldi	r24, 0xBC	; 188
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	fc 01       	movw	r30, r24
     1d2:	80 81       	ld	r24, Z
     1d4:	80 95       	com	r24
     1d6:	88 1f       	adc	r24, r24
     1d8:	88 27       	eor	r24, r24
     1da:	88 1f       	adc	r24, r24
     1dc:	88 23       	and	r24, r24
     1de:	b1 f7       	brne	.-20     	; 0x1cc <_Z18i2c_read_last_bytev+0x14>
	return TWDR;  
     1e0:	8b eb       	ldi	r24, 0xBB	; 187
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	fc 01       	movw	r30, r24
     1e6:	80 81       	ld	r24, Z
}  
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <_Z8i2c_stopv>:
  
void i2c_stop() {  
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
	  TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); // send stop condition  
     1f6:	8c eb       	ldi	r24, 0xBC	; 188
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	24 e9       	ldi	r18, 0x94	; 148
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <_Z7accel_gP6vector>:

//////////////////// ACCELEROMETER PART //////////////////////

// Converts given acceleration raw data in g
void accel_g (vector *a)
{
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	df 93       	push	r29
     210:	cf 93       	push	r28
     212:	00 d0       	rcall	.+0      	; 0x214 <_Z7accel_gP6vector+0xe>
     214:	00 d0       	rcall	.+0      	; 0x216 <_Z7accel_gP6vector+0x10>
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	9c 83       	std	Y+4, r25	; 0x04
     21c:	8b 83       	std	Y+3, r24	; 0x03
	int res = 2;  //the resolution defined for the accelerometer, +-'RES' g
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	89 83       	std	Y+1, r24	; 0x01
	
	// Calculates the acceleration
	a->x = ((a->x )/32767)*res;
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	9c 81       	ldd	r25, Y+4	; 0x04
     22a:	fc 01       	movw	r30, r24
     22c:	80 81       	ld	r24, Z
     22e:	91 81       	ldd	r25, Z+1	; 0x01
     230:	a2 81       	ldd	r26, Z+2	; 0x02
     232:	b3 81       	ldd	r27, Z+3	; 0x03
     234:	bc 01       	movw	r22, r24
     236:	cd 01       	movw	r24, r26
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	3e ef       	ldi	r19, 0xFE	; 254
     23c:	4f ef       	ldi	r20, 0xFF	; 255
     23e:	56 e4       	ldi	r21, 0x46	; 70
     240:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     244:	dc 01       	movw	r26, r24
     246:	cb 01       	movw	r24, r22
     248:	7c 01       	movw	r14, r24
     24a:	8d 01       	movw	r16, r26
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	9a 81       	ldd	r25, Y+2	; 0x02
     250:	aa 27       	eor	r26, r26
     252:	97 fd       	sbrc	r25, 7
     254:	a0 95       	com	r26
     256:	ba 2f       	mov	r27, r26
     258:	bc 01       	movw	r22, r24
     25a:	cd 01       	movw	r24, r26
     25c:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
     260:	9b 01       	movw	r18, r22
     262:	ac 01       	movw	r20, r24
     264:	c8 01       	movw	r24, r16
     266:	b7 01       	movw	r22, r14
     268:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     26c:	dc 01       	movw	r26, r24
     26e:	cb 01       	movw	r24, r22
     270:	2b 81       	ldd	r18, Y+3	; 0x03
     272:	3c 81       	ldd	r19, Y+4	; 0x04
     274:	f9 01       	movw	r30, r18
     276:	80 83       	st	Z, r24
     278:	91 83       	std	Z+1, r25	; 0x01
     27a:	a2 83       	std	Z+2, r26	; 0x02
     27c:	b3 83       	std	Z+3, r27	; 0x03
	a->y = ((a->y )/32767)*res;
     27e:	8b 81       	ldd	r24, Y+3	; 0x03
     280:	9c 81       	ldd	r25, Y+4	; 0x04
     282:	fc 01       	movw	r30, r24
     284:	84 81       	ldd	r24, Z+4	; 0x04
     286:	95 81       	ldd	r25, Z+5	; 0x05
     288:	a6 81       	ldd	r26, Z+6	; 0x06
     28a:	b7 81       	ldd	r27, Z+7	; 0x07
     28c:	bc 01       	movw	r22, r24
     28e:	cd 01       	movw	r24, r26
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	3e ef       	ldi	r19, 0xFE	; 254
     294:	4f ef       	ldi	r20, 0xFF	; 255
     296:	56 e4       	ldi	r21, 0x46	; 70
     298:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     29c:	dc 01       	movw	r26, r24
     29e:	cb 01       	movw	r24, r22
     2a0:	7c 01       	movw	r14, r24
     2a2:	8d 01       	movw	r16, r26
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	aa 27       	eor	r26, r26
     2aa:	97 fd       	sbrc	r25, 7
     2ac:	a0 95       	com	r26
     2ae:	ba 2f       	mov	r27, r26
     2b0:	bc 01       	movw	r22, r24
     2b2:	cd 01       	movw	r24, r26
     2b4:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
     2b8:	9b 01       	movw	r18, r22
     2ba:	ac 01       	movw	r20, r24
     2bc:	c8 01       	movw	r24, r16
     2be:	b7 01       	movw	r22, r14
     2c0:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ca:	3c 81       	ldd	r19, Y+4	; 0x04
     2cc:	f9 01       	movw	r30, r18
     2ce:	84 83       	std	Z+4, r24	; 0x04
     2d0:	95 83       	std	Z+5, r25	; 0x05
     2d2:	a6 83       	std	Z+6, r26	; 0x06
     2d4:	b7 83       	std	Z+7, r27	; 0x07
	a->z = ((a->z )/32767)*res;
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	9c 81       	ldd	r25, Y+4	; 0x04
     2da:	fc 01       	movw	r30, r24
     2dc:	80 85       	ldd	r24, Z+8	; 0x08
     2de:	91 85       	ldd	r25, Z+9	; 0x09
     2e0:	a2 85       	ldd	r26, Z+10	; 0x0a
     2e2:	b3 85       	ldd	r27, Z+11	; 0x0b
     2e4:	bc 01       	movw	r22, r24
     2e6:	cd 01       	movw	r24, r26
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	3e ef       	ldi	r19, 0xFE	; 254
     2ec:	4f ef       	ldi	r20, 0xFF	; 255
     2ee:	56 e4       	ldi	r21, 0x46	; 70
     2f0:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	7c 01       	movw	r14, r24
     2fa:	8d 01       	movw	r16, r26
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	aa 27       	eor	r26, r26
     302:	97 fd       	sbrc	r25, 7
     304:	a0 95       	com	r26
     306:	ba 2f       	mov	r27, r26
     308:	bc 01       	movw	r22, r24
     30a:	cd 01       	movw	r24, r26
     30c:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
     310:	9b 01       	movw	r18, r22
     312:	ac 01       	movw	r20, r24
     314:	c8 01       	movw	r24, r16
     316:	b7 01       	movw	r22, r14
     318:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	2b 81       	ldd	r18, Y+3	; 0x03
     322:	3c 81       	ldd	r19, Y+4	; 0x04
     324:	f9 01       	movw	r30, r18
     326:	80 87       	std	Z+8, r24	; 0x08
     328:	91 87       	std	Z+9, r25	; 0x09
     32a:	a2 87       	std	Z+10, r26	; 0x0a
     32c:	b3 87       	std	Z+11, r27	; 0x0b
	
}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	cf 91       	pop	r28
     338:	df 91       	pop	r29
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	08 95       	ret

00000344 <_Z11accel_angle6vector>:


// Computes angles from scaled and shifted acceleration data
vector accel_angle (vector a)
{
     344:	af 92       	push	r10
     346:	bf 92       	push	r11
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	df 93       	push	r29
     356:	cf 93       	push	r28
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	6c 97       	sbiw	r28, 0x1c	; 28
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	5c 01       	movw	r10, r24
     36a:	c9 8a       	std	Y+17, r12	; 0x11
     36c:	da 8a       	std	Y+18, r13	; 0x12
     36e:	eb 8a       	std	Y+19, r14	; 0x13
     370:	fc 8a       	std	Y+20, r15	; 0x14
     372:	0d 8b       	std	Y+21, r16	; 0x15
     374:	1e 8b       	std	Y+22, r17	; 0x16
     376:	2f 8b       	std	Y+23, r18	; 0x17
     378:	38 8f       	std	Y+24, r19	; 0x18
     37a:	49 8f       	std	Y+25, r20	; 0x19
     37c:	5a 8f       	std	Y+26, r21	; 0x1a
     37e:	6b 8f       	std	Y+27, r22	; 0x1b
     380:	7c 8f       	std	Y+28, r23	; 0x1c
	vector angles = {0,0,0};
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	dc 01       	movw	r26, r24
     388:	f5 01       	movw	r30, r10
     38a:	80 83       	st	Z, r24
     38c:	91 83       	std	Z+1, r25	; 0x01
     38e:	a2 83       	std	Z+2, r26	; 0x02
     390:	b3 83       	std	Z+3, r27	; 0x03
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	dc 01       	movw	r26, r24
     398:	f5 01       	movw	r30, r10
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	a6 83       	std	Z+6, r26	; 0x06
     3a0:	b7 83       	std	Z+7, r27	; 0x07
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	dc 01       	movw	r26, r24
     3a8:	f5 01       	movw	r30, r10
     3aa:	80 87       	std	Z+8, r24	; 0x08
     3ac:	91 87       	std	Z+9, r25	; 0x09
     3ae:	a2 87       	std	Z+10, r26	; 0x0a
     3b0:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Calculates Force Vector value:
	double R = sqrt((a.x*a.x) + (a.y*a.y) + (a.z*a.z));
     3b2:	89 89       	ldd	r24, Y+17	; 0x11
     3b4:	9a 89       	ldd	r25, Y+18	; 0x12
     3b6:	ab 89       	ldd	r26, Y+19	; 0x13
     3b8:	bc 89       	ldd	r27, Y+20	; 0x14
     3ba:	29 89       	ldd	r18, Y+17	; 0x11
     3bc:	3a 89       	ldd	r19, Y+18	; 0x12
     3be:	4b 89       	ldd	r20, Y+19	; 0x13
     3c0:	5c 89       	ldd	r21, Y+20	; 0x14
     3c2:	bc 01       	movw	r22, r24
     3c4:	cd 01       	movw	r24, r26
     3c6:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     3ca:	dc 01       	movw	r26, r24
     3cc:	cb 01       	movw	r24, r22
     3ce:	7c 01       	movw	r14, r24
     3d0:	8d 01       	movw	r16, r26
     3d2:	8d 89       	ldd	r24, Y+21	; 0x15
     3d4:	9e 89       	ldd	r25, Y+22	; 0x16
     3d6:	af 89       	ldd	r26, Y+23	; 0x17
     3d8:	b8 8d       	ldd	r27, Y+24	; 0x18
     3da:	2d 89       	ldd	r18, Y+21	; 0x15
     3dc:	3e 89       	ldd	r19, Y+22	; 0x16
     3de:	4f 89       	ldd	r20, Y+23	; 0x17
     3e0:	58 8d       	ldd	r21, Y+24	; 0x18
     3e2:	bc 01       	movw	r22, r24
     3e4:	cd 01       	movw	r24, r26
     3e6:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     3ea:	dc 01       	movw	r26, r24
     3ec:	cb 01       	movw	r24, r22
     3ee:	9c 01       	movw	r18, r24
     3f0:	ad 01       	movw	r20, r26
     3f2:	c8 01       	movw	r24, r16
     3f4:	b7 01       	movw	r22, r14
     3f6:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     3fa:	dc 01       	movw	r26, r24
     3fc:	cb 01       	movw	r24, r22
     3fe:	7c 01       	movw	r14, r24
     400:	8d 01       	movw	r16, r26
     402:	89 8d       	ldd	r24, Y+25	; 0x19
     404:	9a 8d       	ldd	r25, Y+26	; 0x1a
     406:	ab 8d       	ldd	r26, Y+27	; 0x1b
     408:	bc 8d       	ldd	r27, Y+28	; 0x1c
     40a:	29 8d       	ldd	r18, Y+25	; 0x19
     40c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     40e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     410:	5c 8d       	ldd	r21, Y+28	; 0x1c
     412:	bc 01       	movw	r22, r24
     414:	cd 01       	movw	r24, r26
     416:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     41a:	dc 01       	movw	r26, r24
     41c:	cb 01       	movw	r24, r22
     41e:	9c 01       	movw	r18, r24
     420:	ad 01       	movw	r20, r26
     422:	c8 01       	movw	r24, r16
     424:	b7 01       	movw	r22, r14
     426:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     42a:	dc 01       	movw	r26, r24
     42c:	cb 01       	movw	r24, r22
     42e:	bc 01       	movw	r22, r24
     430:	cd 01       	movw	r24, r26
     432:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <sqrt>
     436:	dc 01       	movw	r26, r24
     438:	cb 01       	movw	r24, r22
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	9a 83       	std	Y+2, r25	; 0x02
     43e:	ab 83       	std	Y+3, r26	; 0x03
     440:	bc 83       	std	Y+4, r27	; 0x04
	
	// Computes inclinations based on the accelerometer values, in degrees
	if (a.z<0)
     442:	89 8d       	ldd	r24, Y+25	; 0x19
     444:	9a 8d       	ldd	r25, Y+26	; 0x1a
     446:	ab 8d       	ldd	r26, Y+27	; 0x1b
     448:	bc 8d       	ldd	r27, Y+28	; 0x1c
     44a:	11 e0       	ldi	r17, 0x01	; 1
     44c:	bc 01       	movw	r22, r24
     44e:	cd 01       	movw	r24, r26
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	a9 01       	movw	r20, r18
     456:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
     45a:	88 23       	and	r24, r24
     45c:	0c f0       	brlt	.+2      	; 0x460 <_Z11accel_angle6vector+0x11c>
     45e:	10 e0       	ldi	r17, 0x00	; 0
     460:	11 23       	and	r17, r17
     462:	09 f4       	brne	.+2      	; 0x466 <_Z11accel_angle6vector+0x122>
     464:	49 c0       	rjmp	.+146    	; 0x4f8 <_Z11accel_angle6vector+0x1b4>
	{
		angles.x = -acos(a.x / R)*57.29;
     466:	89 89       	ldd	r24, Y+17	; 0x11
     468:	9a 89       	ldd	r25, Y+18	; 0x12
     46a:	ab 89       	ldd	r26, Y+19	; 0x13
     46c:	bc 89       	ldd	r27, Y+20	; 0x14
     46e:	bc 01       	movw	r22, r24
     470:	cd 01       	movw	r24, r26
     472:	29 81       	ldd	r18, Y+1	; 0x01
     474:	3a 81       	ldd	r19, Y+2	; 0x02
     476:	4b 81       	ldd	r20, Y+3	; 0x03
     478:	5c 81       	ldd	r21, Y+4	; 0x04
     47a:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	bc 01       	movw	r22, r24
     484:	cd 01       	movw	r24, r26
     486:	0e 94 cf 2a 	call	0x559e	; 0x559e <acos>
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	b0 58       	subi	r27, 0x80	; 128
     490:	bc 01       	movw	r22, r24
     492:	cd 01       	movw	r24, r26
     494:	26 ef       	ldi	r18, 0xF6	; 246
     496:	38 e2       	ldi	r19, 0x28	; 40
     498:	45 e6       	ldi	r20, 0x65	; 101
     49a:	52 e4       	ldi	r21, 0x42	; 66
     49c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	f5 01       	movw	r30, r10
     4a6:	80 83       	st	Z, r24
     4a8:	91 83       	std	Z+1, r25	; 0x01
     4aa:	a2 83       	std	Z+2, r26	; 0x02
     4ac:	b3 83       	std	Z+3, r27	; 0x03
		angles.y = -acos(a.y / R)*57.29;
     4ae:	8d 89       	ldd	r24, Y+21	; 0x15
     4b0:	9e 89       	ldd	r25, Y+22	; 0x16
     4b2:	af 89       	ldd	r26, Y+23	; 0x17
     4b4:	b8 8d       	ldd	r27, Y+24	; 0x18
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	29 81       	ldd	r18, Y+1	; 0x01
     4bc:	3a 81       	ldd	r19, Y+2	; 0x02
     4be:	4b 81       	ldd	r20, Y+3	; 0x03
     4c0:	5c 81       	ldd	r21, Y+4	; 0x04
     4c2:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
     4ca:	bc 01       	movw	r22, r24
     4cc:	cd 01       	movw	r24, r26
     4ce:	0e 94 cf 2a 	call	0x559e	; 0x559e <acos>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	b0 58       	subi	r27, 0x80	; 128
     4d8:	bc 01       	movw	r22, r24
     4da:	cd 01       	movw	r24, r26
     4dc:	26 ef       	ldi	r18, 0xF6	; 246
     4de:	38 e2       	ldi	r19, 0x28	; 40
     4e0:	45 e6       	ldi	r20, 0x65	; 101
     4e2:	52 e4       	ldi	r21, 0x42	; 66
     4e4:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     4e8:	dc 01       	movw	r26, r24
     4ea:	cb 01       	movw	r24, r22
     4ec:	f5 01       	movw	r30, r10
     4ee:	84 83       	std	Z+4, r24	; 0x04
     4f0:	95 83       	std	Z+5, r25	; 0x05
     4f2:	a6 83       	std	Z+6, r26	; 0x06
     4f4:	b7 83       	std	Z+7, r27	; 0x07
     4f6:	46 c0       	rjmp	.+140    	; 0x584 <_Z11accel_angle6vector+0x240>
	}
	else
	{
		angles.x = acos(a.x / R)*57.29;
     4f8:	89 89       	ldd	r24, Y+17	; 0x11
     4fa:	9a 89       	ldd	r25, Y+18	; 0x12
     4fc:	ab 89       	ldd	r26, Y+19	; 0x13
     4fe:	bc 89       	ldd	r27, Y+20	; 0x14
     500:	bc 01       	movw	r22, r24
     502:	cd 01       	movw	r24, r26
     504:	29 81       	ldd	r18, Y+1	; 0x01
     506:	3a 81       	ldd	r19, Y+2	; 0x02
     508:	4b 81       	ldd	r20, Y+3	; 0x03
     50a:	5c 81       	ldd	r21, Y+4	; 0x04
     50c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     510:	dc 01       	movw	r26, r24
     512:	cb 01       	movw	r24, r22
     514:	bc 01       	movw	r22, r24
     516:	cd 01       	movw	r24, r26
     518:	0e 94 cf 2a 	call	0x559e	; 0x559e <acos>
     51c:	dc 01       	movw	r26, r24
     51e:	cb 01       	movw	r24, r22
     520:	bc 01       	movw	r22, r24
     522:	cd 01       	movw	r24, r26
     524:	26 ef       	ldi	r18, 0xF6	; 246
     526:	38 e2       	ldi	r19, 0x28	; 40
     528:	45 e6       	ldi	r20, 0x65	; 101
     52a:	52 e4       	ldi	r21, 0x42	; 66
     52c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	f5 01       	movw	r30, r10
     536:	80 83       	st	Z, r24
     538:	91 83       	std	Z+1, r25	; 0x01
     53a:	a2 83       	std	Z+2, r26	; 0x02
     53c:	b3 83       	std	Z+3, r27	; 0x03
		angles.y = acos(a.y / R)*57.29;		
     53e:	8d 89       	ldd	r24, Y+21	; 0x15
     540:	9e 89       	ldd	r25, Y+22	; 0x16
     542:	af 89       	ldd	r26, Y+23	; 0x17
     544:	b8 8d       	ldd	r27, Y+24	; 0x18
     546:	bc 01       	movw	r22, r24
     548:	cd 01       	movw	r24, r26
     54a:	29 81       	ldd	r18, Y+1	; 0x01
     54c:	3a 81       	ldd	r19, Y+2	; 0x02
     54e:	4b 81       	ldd	r20, Y+3	; 0x03
     550:	5c 81       	ldd	r21, Y+4	; 0x04
     552:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	bc 01       	movw	r22, r24
     55c:	cd 01       	movw	r24, r26
     55e:	0e 94 cf 2a 	call	0x559e	; 0x559e <acos>
     562:	dc 01       	movw	r26, r24
     564:	cb 01       	movw	r24, r22
     566:	bc 01       	movw	r22, r24
     568:	cd 01       	movw	r24, r26
     56a:	26 ef       	ldi	r18, 0xF6	; 246
     56c:	38 e2       	ldi	r19, 0x28	; 40
     56e:	45 e6       	ldi	r20, 0x65	; 101
     570:	52 e4       	ldi	r21, 0x42	; 66
     572:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     576:	dc 01       	movw	r26, r24
     578:	cb 01       	movw	r24, r22
     57a:	f5 01       	movw	r30, r10
     57c:	84 83       	std	Z+4, r24	; 0x04
     57e:	95 83       	std	Z+5, r25	; 0x05
     580:	a6 83       	std	Z+6, r26	; 0x06
     582:	b7 83       	std	Z+7, r27	; 0x07
	}

	angles.z = acos(a.z / R)*57.29;
     584:	89 8d       	ldd	r24, Y+25	; 0x19
     586:	9a 8d       	ldd	r25, Y+26	; 0x1a
     588:	ab 8d       	ldd	r26, Y+27	; 0x1b
     58a:	bc 8d       	ldd	r27, Y+28	; 0x1c
     58c:	bc 01       	movw	r22, r24
     58e:	cd 01       	movw	r24, r26
     590:	29 81       	ldd	r18, Y+1	; 0x01
     592:	3a 81       	ldd	r19, Y+2	; 0x02
     594:	4b 81       	ldd	r20, Y+3	; 0x03
     596:	5c 81       	ldd	r21, Y+4	; 0x04
     598:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     59c:	dc 01       	movw	r26, r24
     59e:	cb 01       	movw	r24, r22
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	0e 94 cf 2a 	call	0x559e	; 0x559e <acos>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	bc 01       	movw	r22, r24
     5ae:	cd 01       	movw	r24, r26
     5b0:	26 ef       	ldi	r18, 0xF6	; 246
     5b2:	38 e2       	ldi	r19, 0x28	; 40
     5b4:	45 e6       	ldi	r20, 0x65	; 101
     5b6:	52 e4       	ldi	r21, 0x42	; 66
     5b8:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     5bc:	dc 01       	movw	r26, r24
     5be:	cb 01       	movw	r24, r22
     5c0:	f5 01       	movw	r30, r10
     5c2:	80 87       	std	Z+8, r24	; 0x08
     5c4:	91 87       	std	Z+9, r25	; 0x09
     5c6:	a2 87       	std	Z+10, r26	; 0x0a
     5c8:	b3 87       	std	Z+11, r27	; 0x0b
	
	
	// Shifts the angles so as to be 0 on horizontal position
	
	angles.x -= 90;
     5ca:	f5 01       	movw	r30, r10
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	a2 81       	ldd	r26, Z+2	; 0x02
     5d2:	b3 81       	ldd	r27, Z+3	; 0x03
     5d4:	bc 01       	movw	r22, r24
     5d6:	cd 01       	movw	r24, r26
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	44 eb       	ldi	r20, 0xB4	; 180
     5de:	52 e4       	ldi	r21, 0x42	; 66
     5e0:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	f5 01       	movw	r30, r10
     5ea:	80 83       	st	Z, r24
     5ec:	91 83       	std	Z+1, r25	; 0x01
     5ee:	a2 83       	std	Z+2, r26	; 0x02
     5f0:	b3 83       	std	Z+3, r27	; 0x03
	if (angles.x <-180)
     5f2:	f5 01       	movw	r30, r10
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	a2 81       	ldd	r26, Z+2	; 0x02
     5fa:	b3 81       	ldd	r27, Z+3	; 0x03
     5fc:	11 e0       	ldi	r17, 0x01	; 1
     5fe:	bc 01       	movw	r22, r24
     600:	cd 01       	movw	r24, r26
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	44 e3       	ldi	r20, 0x34	; 52
     608:	53 ec       	ldi	r21, 0xC3	; 195
     60a:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
     60e:	88 23       	and	r24, r24
     610:	0c f0       	brlt	.+2      	; 0x614 <_Z11accel_angle6vector+0x2d0>
     612:	10 e0       	ldi	r17, 0x00	; 0
     614:	11 23       	and	r17, r17
     616:	a1 f0       	breq	.+40     	; 0x640 <_Z11accel_angle6vector+0x2fc>
		{angles.x +=360;}
     618:	f5 01       	movw	r30, r10
     61a:	80 81       	ld	r24, Z
     61c:	91 81       	ldd	r25, Z+1	; 0x01
     61e:	a2 81       	ldd	r26, Z+2	; 0x02
     620:	b3 81       	ldd	r27, Z+3	; 0x03
     622:	bc 01       	movw	r22, r24
     624:	cd 01       	movw	r24, r26
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	44 eb       	ldi	r20, 0xB4	; 180
     62c:	53 e4       	ldi	r21, 0x43	; 67
     62e:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	f5 01       	movw	r30, r10
     638:	80 83       	st	Z, r24
     63a:	91 83       	std	Z+1, r25	; 0x01
     63c:	a2 83       	std	Z+2, r26	; 0x02
     63e:	b3 83       	std	Z+3, r27	; 0x03
	angles.y -= 90;
     640:	f5 01       	movw	r30, r10
     642:	84 81       	ldd	r24, Z+4	; 0x04
     644:	95 81       	ldd	r25, Z+5	; 0x05
     646:	a6 81       	ldd	r26, Z+6	; 0x06
     648:	b7 81       	ldd	r27, Z+7	; 0x07
     64a:	bc 01       	movw	r22, r24
     64c:	cd 01       	movw	r24, r26
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	44 eb       	ldi	r20, 0xB4	; 180
     654:	52 e4       	ldi	r21, 0x42	; 66
     656:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	f5 01       	movw	r30, r10
     660:	84 83       	std	Z+4, r24	; 0x04
     662:	95 83       	std	Z+5, r25	; 0x05
     664:	a6 83       	std	Z+6, r26	; 0x06
     666:	b7 83       	std	Z+7, r27	; 0x07
	if (angles.y <-180)
     668:	f5 01       	movw	r30, r10
     66a:	84 81       	ldd	r24, Z+4	; 0x04
     66c:	95 81       	ldd	r25, Z+5	; 0x05
     66e:	a6 81       	ldd	r26, Z+6	; 0x06
     670:	b7 81       	ldd	r27, Z+7	; 0x07
     672:	11 e0       	ldi	r17, 0x01	; 1
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	44 e3       	ldi	r20, 0x34	; 52
     67e:	53 ec       	ldi	r21, 0xC3	; 195
     680:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
     684:	88 23       	and	r24, r24
     686:	0c f0       	brlt	.+2      	; 0x68a <_Z11accel_angle6vector+0x346>
     688:	10 e0       	ldi	r17, 0x00	; 0
     68a:	11 23       	and	r17, r17
     68c:	a9 f0       	breq	.+42     	; 0x6b8 <_Z11accel_angle6vector+0x374>
		{angles.y +=360;}
     68e:	f5 01       	movw	r30, r10
     690:	84 81       	ldd	r24, Z+4	; 0x04
     692:	95 81       	ldd	r25, Z+5	; 0x05
     694:	a6 81       	ldd	r26, Z+6	; 0x06
     696:	b7 81       	ldd	r27, Z+7	; 0x07
     698:	bc 01       	movw	r22, r24
     69a:	cd 01       	movw	r24, r26
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	44 eb       	ldi	r20, 0xB4	; 180
     6a2:	53 e4       	ldi	r21, 0x43	; 67
     6a4:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     6a8:	dc 01       	movw	r26, r24
     6aa:	cb 01       	movw	r24, r22
     6ac:	f5 01       	movw	r30, r10
     6ae:	84 83       	std	Z+4, r24	; 0x04
     6b0:	95 83       	std	Z+5, r25	; 0x05
     6b2:	a6 83       	std	Z+6, r26	; 0x06
     6b4:	b7 83       	std	Z+7, r27	; 0x07
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <_Z11accel_angle6vector+0x376>
     6b8:	00 00       	nop

	
	return angles ;
	
	
}
     6ba:	c5 01       	movw	r24, r10
     6bc:	6c 96       	adiw	r28, 0x1c	; 28
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	cf 91       	pop	r28
     6ca:	df 91       	pop	r29
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
     6d8:	bf 90       	pop	r11
     6da:	af 90       	pop	r10
     6dc:	08 95       	ret

000006de <_Z23accel_angle_acquisitionv>:


// Whole function to get angles from accelerometer
vector accel_angle_acquisition(void)
{
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	e0 97       	sbiw	r28, 0x30	; 48
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	5c 01       	movw	r10, r24
	vector a;
	vector m;
	vector angles;
		
	compass_read_data(&a, &m);
     704:	9e 01       	movw	r18, r28
     706:	23 5f       	subi	r18, 0xF3	; 243
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	ce 01       	movw	r24, r28
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	b9 01       	movw	r22, r18
     710:	0e 94 42 22 	call	0x4484	; 0x4484 <_Z17compass_read_dataP6vectorS0_>
	accel_g(&a);	
     714:	ce 01       	movw	r24, r28
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	0e 94 03 01 	call	0x206	; 0x206 <_Z7accel_gP6vector>
	
	angles = accel_angle(a);
     71c:	ce 01       	movw	r24, r28
     71e:	85 96       	adiw	r24, 0x25	; 37
     720:	c9 80       	ldd	r12, Y+1	; 0x01
     722:	da 80       	ldd	r13, Y+2	; 0x02
     724:	eb 80       	ldd	r14, Y+3	; 0x03
     726:	fc 80       	ldd	r15, Y+4	; 0x04
     728:	0d 81       	ldd	r16, Y+5	; 0x05
     72a:	1e 81       	ldd	r17, Y+6	; 0x06
     72c:	2f 81       	ldd	r18, Y+7	; 0x07
     72e:	38 85       	ldd	r19, Y+8	; 0x08
     730:	49 85       	ldd	r20, Y+9	; 0x09
     732:	5a 85       	ldd	r21, Y+10	; 0x0a
     734:	6b 85       	ldd	r22, Y+11	; 0x0b
     736:	7c 85       	ldd	r23, Y+12	; 0x0c
     738:	0e 94 a2 01 	call	0x344	; 0x344 <_Z11accel_angle6vector>
     73c:	c5 01       	movw	r24, r10
     73e:	9e 01       	movw	r18, r28
     740:	2b 5d       	subi	r18, 0xDB	; 219
     742:	3f 4f       	sbci	r19, 0xFF	; 255
     744:	4c e0       	ldi	r20, 0x0C	; 12
     746:	f9 01       	movw	r30, r18
     748:	00 80       	ld	r0, Z
     74a:	2f 5f       	subi	r18, 0xFF	; 255
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	fc 01       	movw	r30, r24
     750:	00 82       	st	Z, r0
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	41 50       	subi	r20, 0x01	; 1
     756:	44 23       	and	r20, r20
     758:	b1 f7       	brne	.-20     	; 0x746 <_Z23accel_angle_acquisitionv+0x68>

// Ensures that Z gets negative if pointing downward	
	if (angles.x<0)
     75a:	f5 01       	movw	r30, r10
     75c:	80 81       	ld	r24, Z
     75e:	91 81       	ldd	r25, Z+1	; 0x01
     760:	a2 81       	ldd	r26, Z+2	; 0x02
     762:	b3 81       	ldd	r27, Z+3	; 0x03
     764:	11 e0       	ldi	r17, 0x01	; 1
     766:	bc 01       	movw	r22, r24
     768:	cd 01       	movw	r24, r26
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	a9 01       	movw	r20, r18
     770:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
     774:	88 23       	and	r24, r24
     776:	0c f0       	brlt	.+2      	; 0x77a <_Z23accel_angle_acquisitionv+0x9c>
     778:	10 e0       	ldi	r17, 0x00	; 0
     77a:	11 23       	and	r17, r17
     77c:	61 f0       	breq	.+24     	; 0x796 <_Z23accel_angle_acquisitionv+0xb8>
	{
		angles.z = - angles.z;
     77e:	f5 01       	movw	r30, r10
     780:	80 85       	ldd	r24, Z+8	; 0x08
     782:	91 85       	ldd	r25, Z+9	; 0x09
     784:	a2 85       	ldd	r26, Z+10	; 0x0a
     786:	b3 85       	ldd	r27, Z+11	; 0x0b
     788:	b0 58       	subi	r27, 0x80	; 128
     78a:	f5 01       	movw	r30, r10
     78c:	80 87       	std	Z+8, r24	; 0x08
     78e:	91 87       	std	Z+9, r25	; 0x09
     790:	a2 87       	std	Z+10, r26	; 0x0a
     792:	b3 87       	std	Z+11, r27	; 0x0b
     794:	01 c0       	rjmp	.+2      	; 0x798 <_Z23accel_angle_acquisitionv+0xba>
     796:	00 00       	nop
	}
	
	return angles;
}
     798:	c5 01       	movw	r24, r10
     79a:	e0 96       	adiw	r28, 0x30	; 48
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	cf 91       	pop	r28
     7a8:	df 91       	pop	r29
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	08 95       	ret

000007bc <_Z30accelcompass_angle_acquisitionv>:

// Whole function to get angles from accelerometer + compass
vector accelcompass_angle_acquisition(void)
{
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	c0 54       	subi	r28, 0x40	; 64
     7d6:	d0 40       	sbci	r29, 0x00	; 0
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	5c 01       	movw	r10, r24
	vector a;
	vector m;
	
	// Vector p should be defined as pointing forward, parallel to the ground, with coordinates {X, Y, Z}.
	vector p = {0, -1, 0};
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	dc 01       	movw	r26, r24
     7ea:	8d 8f       	std	Y+29, r24	; 0x1d
     7ec:	9e 8f       	std	Y+30, r25	; 0x1e
     7ee:	af 8f       	std	Y+31, r26	; 0x1f
     7f0:	b8 a3       	std	Y+32, r27	; 0x20
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	a0 e8       	ldi	r26, 0x80	; 128
     7f8:	bf eb       	ldi	r27, 0xBF	; 191
     7fa:	89 a3       	std	Y+33, r24	; 0x21
     7fc:	9a a3       	std	Y+34, r25	; 0x22
     7fe:	ab a3       	std	Y+35, r26	; 0x23
     800:	bc a3       	std	Y+36, r27	; 0x24
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	dc 01       	movw	r26, r24
     808:	8d a3       	std	Y+37, r24	; 0x25
     80a:	9e a3       	std	Y+38, r25	; 0x26
     80c:	af a3       	std	Y+39, r26	; 0x27
     80e:	b8 a7       	std	Y+40, r27	; 0x28
	vector angles;
	float heading;
		
	compass_read_data(&a, &m);
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	9e 01       	movw	r18, r28
     816:	2f 5e       	subi	r18, 0xEF	; 239
     818:	3f 4f       	sbci	r19, 0xFF	; 255
     81a:	b9 01       	movw	r22, r18
     81c:	0e 94 42 22 	call	0x4484	; 0x4484 <_Z17compass_read_dataP6vectorS0_>
	heading = get_heading(&a,&m,&p);
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	ae 01       	movw	r20, r28
     826:	4f 5e       	subi	r20, 0xEF	; 239
     828:	5f 4f       	sbci	r21, 0xFF	; 255
     82a:	9e 01       	movw	r18, r28
     82c:	23 5e       	subi	r18, 0xE3	; 227
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	ba 01       	movw	r22, r20
     832:	a9 01       	movw	r20, r18
     834:	0e 94 b1 24 	call	0x4962	; 0x4962 <_Z11get_headingP6vectorS0_S0_>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	9a 83       	std	Y+2, r25	; 0x02
     840:	ab 83       	std	Y+3, r26	; 0x03
     842:	bc 83       	std	Y+4, r27	; 0x04
	accel_g(&a);	
     844:	ce 01       	movw	r24, r28
     846:	05 96       	adiw	r24, 0x05	; 5
     848:	0e 94 03 01 	call	0x206	; 0x206 <_Z7accel_gP6vector>
	
	angles = accel_angle(a);
     84c:	ce 01       	movw	r24, r28
     84e:	c5 96       	adiw	r24, 0x35	; 53
     850:	cd 80       	ldd	r12, Y+5	; 0x05
     852:	de 80       	ldd	r13, Y+6	; 0x06
     854:	ef 80       	ldd	r14, Y+7	; 0x07
     856:	f8 84       	ldd	r15, Y+8	; 0x08
     858:	09 85       	ldd	r16, Y+9	; 0x09
     85a:	1a 85       	ldd	r17, Y+10	; 0x0a
     85c:	2b 85       	ldd	r18, Y+11	; 0x0b
     85e:	3c 85       	ldd	r19, Y+12	; 0x0c
     860:	4d 85       	ldd	r20, Y+13	; 0x0d
     862:	5e 85       	ldd	r21, Y+14	; 0x0e
     864:	6f 85       	ldd	r22, Y+15	; 0x0f
     866:	78 89       	ldd	r23, Y+16	; 0x10
     868:	0e 94 a2 01 	call	0x344	; 0x344 <_Z11accel_angle6vector>
     86c:	c5 01       	movw	r24, r10
     86e:	9e 01       	movw	r18, r28
     870:	2b 5c       	subi	r18, 0xCB	; 203
     872:	3f 4f       	sbci	r19, 0xFF	; 255
     874:	4c e0       	ldi	r20, 0x0C	; 12
     876:	f9 01       	movw	r30, r18
     878:	00 80       	ld	r0, Z
     87a:	2f 5f       	subi	r18, 0xFF	; 255
     87c:	3f 4f       	sbci	r19, 0xFF	; 255
     87e:	fc 01       	movw	r30, r24
     880:	00 82       	st	Z, r0
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	41 50       	subi	r20, 0x01	; 1
     886:	44 23       	and	r20, r20
     888:	b1 f7       	brne	.-20     	; 0x876 <_Z30accelcompass_angle_acquisitionv+0xba>
	
	angles.z= heading;
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	ab 81       	ldd	r26, Y+3	; 0x03
     890:	bc 81       	ldd	r27, Y+4	; 0x04
     892:	f5 01       	movw	r30, r10
     894:	80 87       	std	Z+8, r24	; 0x08
     896:	91 87       	std	Z+9, r25	; 0x09
     898:	a2 87       	std	Z+10, r26	; 0x0a
     89a:	b3 87       	std	Z+11, r27	; 0x0b
	
	return angles;
}
     89c:	c5 01       	movw	r24, r10
     89e:	c0 5c       	subi	r28, 0xC0	; 192
     8a0:	df 4f       	sbci	r29, 0xFF	; 255
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	cf 90       	pop	r12
     8bc:	bf 90       	pop	r11
     8be:	af 90       	pop	r10
     8c0:	08 95       	ret

000008c2 <_Z23accel_measurement_noisev>:


// Calculate the accelerometer measurement noise
vector accel_measurement_noise (void)
{
     8c2:	6f 92       	push	r6
     8c4:	7f 92       	push	r7
     8c6:	8f 92       	push	r8
     8c8:	9f 92       	push	r9
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	c6 5b       	subi	r28, 0xB6	; 182
     8e4:	d1 40       	sbci	r29, 0x01	; 1
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	5c 01       	movw	r10, r24
	// Calculated variance: {0.02;0.02;0.02}
	
	vector a;
	vector m;
	vector store[30];
	vector variance= {0,0,0};
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	dc 01       	movw	r26, r24
     8f8:	f5 01       	movw	r30, r10
     8fa:	80 83       	st	Z, r24
     8fc:	91 83       	std	Z+1, r25	; 0x01
     8fe:	a2 83       	std	Z+2, r26	; 0x02
     900:	b3 83       	std	Z+3, r27	; 0x03
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	dc 01       	movw	r26, r24
     908:	f5 01       	movw	r30, r10
     90a:	84 83       	std	Z+4, r24	; 0x04
     90c:	95 83       	std	Z+5, r25	; 0x05
     90e:	a6 83       	std	Z+6, r26	; 0x06
     910:	b7 83       	std	Z+7, r27	; 0x07
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	dc 01       	movw	r26, r24
     918:	f5 01       	movw	r30, r10
     91a:	80 87       	std	Z+8, r24	; 0x08
     91c:	91 87       	std	Z+9, r25	; 0x09
     91e:	a2 87       	std	Z+10, r26	; 0x0a
     920:	b3 87       	std	Z+11, r27	; 0x0b
	
	vector sum ={0,0,0};
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	dc 01       	movw	r26, r24
     928:	8b a7       	std	Y+43, r24	; 0x2b
     92a:	9c a7       	std	Y+44, r25	; 0x2c
     92c:	ad a7       	std	Y+45, r26	; 0x2d
     92e:	be a7       	std	Y+46, r27	; 0x2e
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	dc 01       	movw	r26, r24
     936:	8f a7       	std	Y+47, r24	; 0x2f
     938:	98 ab       	std	Y+48, r25	; 0x30
     93a:	a9 ab       	std	Y+49, r26	; 0x31
     93c:	ba ab       	std	Y+50, r27	; 0x32
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	dc 01       	movw	r26, r24
     944:	8b ab       	std	Y+51, r24	; 0x33
     946:	9c ab       	std	Y+52, r25	; 0x34
     948:	ad ab       	std	Y+53, r26	; 0x35
     94a:	be ab       	std	Y+54, r27	; 0x36
	vector sum2 ={0,0,0};	
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	dc 01       	movw	r26, r24
     952:	8f ab       	std	Y+55, r24	; 0x37
     954:	98 af       	std	Y+56, r25	; 0x38
     956:	a9 af       	std	Y+57, r26	; 0x39
     958:	ba af       	std	Y+58, r27	; 0x3a
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	dc 01       	movw	r26, r24
     960:	8b af       	std	Y+59, r24	; 0x3b
     962:	9c af       	std	Y+60, r25	; 0x3c
     964:	ad af       	std	Y+61, r26	; 0x3d
     966:	be af       	std	Y+62, r27	; 0x3e
     968:	9e 01       	movw	r18, r28
     96a:	21 5c       	subi	r18, 0xC1	; 193
     96c:	3f 4f       	sbci	r19, 0xFF	; 255
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	dc 01       	movw	r26, r24
     974:	f9 01       	movw	r30, r18
     976:	80 83       	st	Z, r24
     978:	91 83       	std	Z+1, r25	; 0x01
     97a:	a2 83       	std	Z+2, r26	; 0x02
     97c:	b3 83       	std	Z+3, r27	; 0x03
	
	// Data acquisition and storage
	for (int i =0; i<20; i++)
     97e:	1a 82       	std	Y+2, r1	; 0x02
     980:	19 82       	std	Y+1, r1	; 0x01
     982:	42 c0       	rjmp	.+132    	; 0xa08 <__stack+0x109>
	{
		compass_read_data(&a, &m);
     984:	ce 01       	movw	r24, r28
     986:	07 96       	adiw	r24, 0x07	; 7
     988:	9e 01       	movw	r18, r28
     98a:	2d 5e       	subi	r18, 0xED	; 237
     98c:	3f 4f       	sbci	r19, 0xFF	; 255
     98e:	b9 01       	movw	r22, r18
     990:	0e 94 42 22 	call	0x4484	; 0x4484 <_Z17compass_read_dataP6vectorS0_>
		accel_g(&a);	
     994:	ce 01       	movw	r24, r28
     996:	07 96       	adiw	r24, 0x07	; 7
     998:	0e 94 03 01 	call	0x206	; 0x206 <_Z7accel_gP6vector>
		store[i] = accel_angle(a);	
     99c:	ae 01       	movw	r20, r28
     99e:	4d 5b       	subi	r20, 0xBD	; 189
     9a0:	5f 4f       	sbci	r21, 0xFF	; 255
     9a2:	29 81       	ldd	r18, Y+1	; 0x01
     9a4:	3a 81       	ldd	r19, Y+2	; 0x02
     9a6:	c9 01       	movw	r24, r18
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	82 0f       	add	r24, r18
     9ae:	93 1f       	adc	r25, r19
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	4a 01       	movw	r8, r20
     9ba:	88 0e       	add	r8, r24
     9bc:	99 1e       	adc	r9, r25
     9be:	ce 01       	movw	r24, r28
     9c0:	85 55       	subi	r24, 0x55	; 85
     9c2:	9e 4f       	sbci	r25, 0xFE	; 254
     9c4:	cf 80       	ldd	r12, Y+7	; 0x07
     9c6:	d8 84       	ldd	r13, Y+8	; 0x08
     9c8:	e9 84       	ldd	r14, Y+9	; 0x09
     9ca:	fa 84       	ldd	r15, Y+10	; 0x0a
     9cc:	0b 85       	ldd	r16, Y+11	; 0x0b
     9ce:	1c 85       	ldd	r17, Y+12	; 0x0c
     9d0:	2d 85       	ldd	r18, Y+13	; 0x0d
     9d2:	3e 85       	ldd	r19, Y+14	; 0x0e
     9d4:	4f 85       	ldd	r20, Y+15	; 0x0f
     9d6:	58 89       	ldd	r21, Y+16	; 0x10
     9d8:	69 89       	ldd	r22, Y+17	; 0x11
     9da:	7a 89       	ldd	r23, Y+18	; 0x12
     9dc:	0e 94 a2 01 	call	0x344	; 0x344 <_Z11accel_angle6vector>
     9e0:	9e 01       	movw	r18, r28
     9e2:	25 55       	subi	r18, 0x55	; 85
     9e4:	3e 4f       	sbci	r19, 0xFE	; 254
     9e6:	c4 01       	movw	r24, r8
     9e8:	4c e0       	ldi	r20, 0x0C	; 12
     9ea:	f9 01       	movw	r30, r18
     9ec:	00 80       	ld	r0, Z
     9ee:	2f 5f       	subi	r18, 0xFF	; 255
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	fc 01       	movw	r30, r24
     9f4:	00 82       	st	Z, r0
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	41 50       	subi	r20, 0x01	; 1
     9fa:	44 23       	and	r20, r20
     9fc:	b1 f7       	brne	.-20     	; 0x9ea <__stack+0xeb>
	
	vector sum ={0,0,0};
	vector sum2 ={0,0,0};	
	
	// Data acquisition and storage
	for (int i =0; i<20; i++)
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	9a 81       	ldd	r25, Y+2	; 0x02
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	9a 83       	std	Y+2, r25	; 0x02
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	9a 81       	ldd	r25, Y+2	; 0x02
     a0e:	84 31       	cpi	r24, 0x14	; 20
     a10:	91 05       	cpc	r25, r1
     a12:	0c f0       	brlt	.+2      	; 0xa16 <__stack+0x117>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	22 23       	and	r18, r18
     a18:	09 f0       	breq	.+2      	; 0xa1c <__stack+0x11d>
     a1a:	b4 cf       	rjmp	.-152    	; 0x984 <__stack+0x85>
		store[i] = accel_angle(a);	
	}

	// Calculate variance //  formula: variance = (sum2 - (sum^2/ number of samples))/(number of samples -1)
	// Calculate the sum of values
	for (int k=0; k<20; k++)
     a1c:	1c 82       	std	Y+4, r1	; 0x04
     a1e:	1b 82       	std	Y+3, r1	; 0x03
     a20:	72 c0       	rjmp	.+228    	; 0xb06 <__stack+0x207>
	{
		sum.x = sum.x+store[k].x;
     a22:	8b a5       	ldd	r24, Y+43	; 0x2b
     a24:	9c a5       	ldd	r25, Y+44	; 0x2c
     a26:	ad a5       	ldd	r26, Y+45	; 0x2d
     a28:	be a5       	ldd	r27, Y+46	; 0x2e
     a2a:	be 01       	movw	r22, r28
     a2c:	6d 5b       	subi	r22, 0xBD	; 189
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	4b 81       	ldd	r20, Y+3	; 0x03
     a32:	5c 81       	ldd	r21, Y+4	; 0x04
     a34:	9a 01       	movw	r18, r20
     a36:	22 0f       	add	r18, r18
     a38:	33 1f       	adc	r19, r19
     a3a:	24 0f       	add	r18, r20
     a3c:	35 1f       	adc	r19, r21
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	26 0f       	add	r18, r22
     a48:	37 1f       	adc	r19, r23
     a4a:	f9 01       	movw	r30, r18
     a4c:	20 81       	ld	r18, Z
     a4e:	31 81       	ldd	r19, Z+1	; 0x01
     a50:	42 81       	ldd	r20, Z+2	; 0x02
     a52:	53 81       	ldd	r21, Z+3	; 0x03
     a54:	bc 01       	movw	r22, r24
     a56:	cd 01       	movw	r24, r26
     a58:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	8b a7       	std	Y+43, r24	; 0x2b
     a62:	9c a7       	std	Y+44, r25	; 0x2c
     a64:	ad a7       	std	Y+45, r26	; 0x2d
     a66:	be a7       	std	Y+46, r27	; 0x2e
		sum.y = sum.y+store[k].y;
     a68:	8f a5       	ldd	r24, Y+47	; 0x2f
     a6a:	98 a9       	ldd	r25, Y+48	; 0x30
     a6c:	a9 a9       	ldd	r26, Y+49	; 0x31
     a6e:	ba a9       	ldd	r27, Y+50	; 0x32
     a70:	be 01       	movw	r22, r28
     a72:	6d 5b       	subi	r22, 0xBD	; 189
     a74:	7f 4f       	sbci	r23, 0xFF	; 255
     a76:	4b 81       	ldd	r20, Y+3	; 0x03
     a78:	5c 81       	ldd	r21, Y+4	; 0x04
     a7a:	9a 01       	movw	r18, r20
     a7c:	22 0f       	add	r18, r18
     a7e:	33 1f       	adc	r19, r19
     a80:	24 0f       	add	r18, r20
     a82:	35 1f       	adc	r19, r21
     a84:	22 0f       	add	r18, r18
     a86:	33 1f       	adc	r19, r19
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	26 0f       	add	r18, r22
     a8e:	37 1f       	adc	r19, r23
     a90:	2c 5f       	subi	r18, 0xFC	; 252
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	f9 01       	movw	r30, r18
     a96:	20 81       	ld	r18, Z
     a98:	31 81       	ldd	r19, Z+1	; 0x01
     a9a:	42 81       	ldd	r20, Z+2	; 0x02
     a9c:	53 81       	ldd	r21, Z+3	; 0x03
     a9e:	bc 01       	movw	r22, r24
     aa0:	cd 01       	movw	r24, r26
     aa2:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     aa6:	dc 01       	movw	r26, r24
     aa8:	cb 01       	movw	r24, r22
     aaa:	8f a7       	std	Y+47, r24	; 0x2f
     aac:	98 ab       	std	Y+48, r25	; 0x30
     aae:	a9 ab       	std	Y+49, r26	; 0x31
     ab0:	ba ab       	std	Y+50, r27	; 0x32
		sum.z = sum.z+store[k].z;
     ab2:	8b a9       	ldd	r24, Y+51	; 0x33
     ab4:	9c a9       	ldd	r25, Y+52	; 0x34
     ab6:	ad a9       	ldd	r26, Y+53	; 0x35
     ab8:	be a9       	ldd	r27, Y+54	; 0x36
     aba:	be 01       	movw	r22, r28
     abc:	6d 5b       	subi	r22, 0xBD	; 189
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	4b 81       	ldd	r20, Y+3	; 0x03
     ac2:	5c 81       	ldd	r21, Y+4	; 0x04
     ac4:	9a 01       	movw	r18, r20
     ac6:	22 0f       	add	r18, r18
     ac8:	33 1f       	adc	r19, r19
     aca:	24 0f       	add	r18, r20
     acc:	35 1f       	adc	r19, r21
     ace:	22 0f       	add	r18, r18
     ad0:	33 1f       	adc	r19, r19
     ad2:	22 0f       	add	r18, r18
     ad4:	33 1f       	adc	r19, r19
     ad6:	26 0f       	add	r18, r22
     ad8:	37 1f       	adc	r19, r23
     ada:	28 5f       	subi	r18, 0xF8	; 248
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	f9 01       	movw	r30, r18
     ae0:	20 81       	ld	r18, Z
     ae2:	31 81       	ldd	r19, Z+1	; 0x01
     ae4:	42 81       	ldd	r20, Z+2	; 0x02
     ae6:	53 81       	ldd	r21, Z+3	; 0x03
     ae8:	bc 01       	movw	r22, r24
     aea:	cd 01       	movw	r24, r26
     aec:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     af0:	dc 01       	movw	r26, r24
     af2:	cb 01       	movw	r24, r22
     af4:	8b ab       	std	Y+51, r24	; 0x33
     af6:	9c ab       	std	Y+52, r25	; 0x34
     af8:	ad ab       	std	Y+53, r26	; 0x35
     afa:	be ab       	std	Y+54, r27	; 0x36
		store[i] = accel_angle(a);	
	}

	// Calculate variance //  formula: variance = (sum2 - (sum^2/ number of samples))/(number of samples -1)
	// Calculate the sum of values
	for (int k=0; k<20; k++)
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	21 e0       	ldi	r18, 0x01	; 1
     b08:	8b 81       	ldd	r24, Y+3	; 0x03
     b0a:	9c 81       	ldd	r25, Y+4	; 0x04
     b0c:	84 31       	cpi	r24, 0x14	; 20
     b0e:	91 05       	cpc	r25, r1
     b10:	0c f0       	brlt	.+2      	; 0xb14 <__stack+0x215>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	22 23       	and	r18, r18
     b16:	09 f0       	breq	.+2      	; 0xb1a <__stack+0x21b>
     b18:	84 cf       	rjmp	.-248    	; 0xa22 <__stack+0x123>
		sum.y = sum.y+store[k].y;
		sum.z = sum.z+store[k].z;
	}
	
	// Calculate the sum of values^2
	for (int k=0; k<20; k++)
     b1a:	1e 82       	std	Y+6, r1	; 0x06
     b1c:	1d 82       	std	Y+5, r1	; 0x05
     b1e:	d2 c0       	rjmp	.+420    	; 0xcc4 <__stack+0x3c5>
	{
		sum2.x = sum2.x+(store[k].x)*(store[k].x);
     b20:	ef a8       	ldd	r14, Y+55	; 0x37
     b22:	f8 ac       	ldd	r15, Y+56	; 0x38
     b24:	09 ad       	ldd	r16, Y+57	; 0x39
     b26:	1a ad       	ldd	r17, Y+58	; 0x3a
     b28:	ae 01       	movw	r20, r28
     b2a:	4d 5b       	subi	r20, 0xBD	; 189
     b2c:	5f 4f       	sbci	r21, 0xFF	; 255
     b2e:	2d 81       	ldd	r18, Y+5	; 0x05
     b30:	3e 81       	ldd	r19, Y+6	; 0x06
     b32:	c9 01       	movw	r24, r18
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	82 0f       	add	r24, r18
     b3a:	93 1f       	adc	r25, r19
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	84 0f       	add	r24, r20
     b46:	95 1f       	adc	r25, r21
     b48:	fc 01       	movw	r30, r24
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	a2 81       	ldd	r26, Z+2	; 0x02
     b50:	b3 81       	ldd	r27, Z+3	; 0x03
     b52:	be 01       	movw	r22, r28
     b54:	6d 5b       	subi	r22, 0xBD	; 189
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	4d 81       	ldd	r20, Y+5	; 0x05
     b5a:	5e 81       	ldd	r21, Y+6	; 0x06
     b5c:	9a 01       	movw	r18, r20
     b5e:	22 0f       	add	r18, r18
     b60:	33 1f       	adc	r19, r19
     b62:	24 0f       	add	r18, r20
     b64:	35 1f       	adc	r19, r21
     b66:	22 0f       	add	r18, r18
     b68:	33 1f       	adc	r19, r19
     b6a:	22 0f       	add	r18, r18
     b6c:	33 1f       	adc	r19, r19
     b6e:	26 0f       	add	r18, r22
     b70:	37 1f       	adc	r19, r23
     b72:	f9 01       	movw	r30, r18
     b74:	20 81       	ld	r18, Z
     b76:	31 81       	ldd	r19, Z+1	; 0x01
     b78:	42 81       	ldd	r20, Z+2	; 0x02
     b7a:	53 81       	ldd	r21, Z+3	; 0x03
     b7c:	bc 01       	movw	r22, r24
     b7e:	cd 01       	movw	r24, r26
     b80:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	9c 01       	movw	r18, r24
     b8a:	ad 01       	movw	r20, r26
     b8c:	c8 01       	movw	r24, r16
     b8e:	b7 01       	movw	r22, r14
     b90:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	8f ab       	std	Y+55, r24	; 0x37
     b9a:	98 af       	std	Y+56, r25	; 0x38
     b9c:	a9 af       	std	Y+57, r26	; 0x39
     b9e:	ba af       	std	Y+58, r27	; 0x3a
		sum2.y = sum2.y+(store[k].y)*(store[k].y);
     ba0:	eb ac       	ldd	r14, Y+59	; 0x3b
     ba2:	fc ac       	ldd	r15, Y+60	; 0x3c
     ba4:	0d ad       	ldd	r16, Y+61	; 0x3d
     ba6:	1e ad       	ldd	r17, Y+62	; 0x3e
     ba8:	ae 01       	movw	r20, r28
     baa:	4d 5b       	subi	r20, 0xBD	; 189
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
     bae:	2d 81       	ldd	r18, Y+5	; 0x05
     bb0:	3e 81       	ldd	r19, Y+6	; 0x06
     bb2:	c9 01       	movw	r24, r18
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	82 0f       	add	r24, r18
     bba:	93 1f       	adc	r25, r19
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	84 0f       	add	r24, r20
     bc6:	95 1f       	adc	r25, r21
     bc8:	04 96       	adiw	r24, 0x04	; 4
     bca:	fc 01       	movw	r30, r24
     bcc:	80 81       	ld	r24, Z
     bce:	91 81       	ldd	r25, Z+1	; 0x01
     bd0:	a2 81       	ldd	r26, Z+2	; 0x02
     bd2:	b3 81       	ldd	r27, Z+3	; 0x03
     bd4:	be 01       	movw	r22, r28
     bd6:	6d 5b       	subi	r22, 0xBD	; 189
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	4d 81       	ldd	r20, Y+5	; 0x05
     bdc:	5e 81       	ldd	r21, Y+6	; 0x06
     bde:	9a 01       	movw	r18, r20
     be0:	22 0f       	add	r18, r18
     be2:	33 1f       	adc	r19, r19
     be4:	24 0f       	add	r18, r20
     be6:	35 1f       	adc	r19, r21
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	26 0f       	add	r18, r22
     bf2:	37 1f       	adc	r19, r23
     bf4:	2c 5f       	subi	r18, 0xFC	; 252
     bf6:	3f 4f       	sbci	r19, 0xFF	; 255
     bf8:	f9 01       	movw	r30, r18
     bfa:	20 81       	ld	r18, Z
     bfc:	31 81       	ldd	r19, Z+1	; 0x01
     bfe:	42 81       	ldd	r20, Z+2	; 0x02
     c00:	53 81       	ldd	r21, Z+3	; 0x03
     c02:	bc 01       	movw	r22, r24
     c04:	cd 01       	movw	r24, r26
     c06:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	9c 01       	movw	r18, r24
     c10:	ad 01       	movw	r20, r26
     c12:	c8 01       	movw	r24, r16
     c14:	b7 01       	movw	r22, r14
     c16:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	8b af       	std	Y+59, r24	; 0x3b
     c20:	9c af       	std	Y+60, r25	; 0x3c
     c22:	ad af       	std	Y+61, r26	; 0x3d
     c24:	be af       	std	Y+62, r27	; 0x3e
		sum2.z = sum2.z+(store[k].z)*(store[k].z);
     c26:	ce 01       	movw	r24, r28
     c28:	cf 96       	adiw	r24, 0x3f	; 63
     c2a:	fc 01       	movw	r30, r24
     c2c:	e0 80       	ld	r14, Z
     c2e:	f1 80       	ldd	r15, Z+1	; 0x01
     c30:	02 81       	ldd	r16, Z+2	; 0x02
     c32:	13 81       	ldd	r17, Z+3	; 0x03
     c34:	ae 01       	movw	r20, r28
     c36:	4d 5b       	subi	r20, 0xBD	; 189
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
     c3a:	2d 81       	ldd	r18, Y+5	; 0x05
     c3c:	3e 81       	ldd	r19, Y+6	; 0x06
     c3e:	c9 01       	movw	r24, r18
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	82 0f       	add	r24, r18
     c46:	93 1f       	adc	r25, r19
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	84 0f       	add	r24, r20
     c52:	95 1f       	adc	r25, r21
     c54:	08 96       	adiw	r24, 0x08	; 8
     c56:	fc 01       	movw	r30, r24
     c58:	80 81       	ld	r24, Z
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
     c5c:	a2 81       	ldd	r26, Z+2	; 0x02
     c5e:	b3 81       	ldd	r27, Z+3	; 0x03
     c60:	be 01       	movw	r22, r28
     c62:	6d 5b       	subi	r22, 0xBD	; 189
     c64:	7f 4f       	sbci	r23, 0xFF	; 255
     c66:	4d 81       	ldd	r20, Y+5	; 0x05
     c68:	5e 81       	ldd	r21, Y+6	; 0x06
     c6a:	9a 01       	movw	r18, r20
     c6c:	22 0f       	add	r18, r18
     c6e:	33 1f       	adc	r19, r19
     c70:	24 0f       	add	r18, r20
     c72:	35 1f       	adc	r19, r21
     c74:	22 0f       	add	r18, r18
     c76:	33 1f       	adc	r19, r19
     c78:	22 0f       	add	r18, r18
     c7a:	33 1f       	adc	r19, r19
     c7c:	26 0f       	add	r18, r22
     c7e:	37 1f       	adc	r19, r23
     c80:	28 5f       	subi	r18, 0xF8	; 248
     c82:	3f 4f       	sbci	r19, 0xFF	; 255
     c84:	f9 01       	movw	r30, r18
     c86:	20 81       	ld	r18, Z
     c88:	31 81       	ldd	r19, Z+1	; 0x01
     c8a:	42 81       	ldd	r20, Z+2	; 0x02
     c8c:	53 81       	ldd	r21, Z+3	; 0x03
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	9c 01       	movw	r18, r24
     c9c:	ad 01       	movw	r20, r26
     c9e:	c8 01       	movw	r24, r16
     ca0:	b7 01       	movw	r22, r14
     ca2:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	9e 01       	movw	r18, r28
     cac:	21 5c       	subi	r18, 0xC1	; 193
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	f9 01       	movw	r30, r18
     cb2:	80 83       	st	Z, r24
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	a2 83       	std	Z+2, r26	; 0x02
     cb8:	b3 83       	std	Z+3, r27	; 0x03
		sum.y = sum.y+store[k].y;
		sum.z = sum.z+store[k].z;
	}
	
	// Calculate the sum of values^2
	for (int k=0; k<20; k++)
     cba:	8d 81       	ldd	r24, Y+5	; 0x05
     cbc:	9e 81       	ldd	r25, Y+6	; 0x06
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	8d 83       	std	Y+5, r24	; 0x05
     cc4:	21 e0       	ldi	r18, 0x01	; 1
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	84 31       	cpi	r24, 0x14	; 20
     ccc:	91 05       	cpc	r25, r1
     cce:	0c f0       	brlt	.+2      	; 0xcd2 <__stack+0x3d3>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	22 23       	and	r18, r18
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <__stack+0x3d9>
     cd6:	24 cf       	rjmp	.-440    	; 0xb20 <__stack+0x221>
		sum2.y = sum2.y+(store[k].y)*(store[k].y);
		sum2.z = sum2.z+(store[k].z)*(store[k].z);
	}
			  	
	// Calculate the variance
	variance.x += (sum2.x - ((sum.x)*(sum.x))/20)/19;
     cd8:	f5 01       	movw	r30, r10
     cda:	e0 80       	ld	r14, Z
     cdc:	f1 80       	ldd	r15, Z+1	; 0x01
     cde:	02 81       	ldd	r16, Z+2	; 0x02
     ce0:	13 81       	ldd	r17, Z+3	; 0x03
     ce2:	6f a8       	ldd	r6, Y+55	; 0x37
     ce4:	78 ac       	ldd	r7, Y+56	; 0x38
     ce6:	89 ac       	ldd	r8, Y+57	; 0x39
     ce8:	9a ac       	ldd	r9, Y+58	; 0x3a
     cea:	8b a5       	ldd	r24, Y+43	; 0x2b
     cec:	9c a5       	ldd	r25, Y+44	; 0x2c
     cee:	ad a5       	ldd	r26, Y+45	; 0x2d
     cf0:	be a5       	ldd	r27, Y+46	; 0x2e
     cf2:	2b a5       	ldd	r18, Y+43	; 0x2b
     cf4:	3c a5       	ldd	r19, Y+44	; 0x2c
     cf6:	4d a5       	ldd	r20, Y+45	; 0x2d
     cf8:	5e a5       	ldd	r21, Y+46	; 0x2e
     cfa:	bc 01       	movw	r22, r24
     cfc:	cd 01       	movw	r24, r26
     cfe:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 ea       	ldi	r20, 0xA0	; 160
     d10:	51 e4       	ldi	r21, 0x41	; 65
     d12:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9c 01       	movw	r18, r24
     d1c:	ad 01       	movw	r20, r26
     d1e:	c4 01       	movw	r24, r8
     d20:	b3 01       	movw	r22, r6
     d22:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	bc 01       	movw	r22, r24
     d2c:	cd 01       	movw	r24, r26
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	48 e9       	ldi	r20, 0x98	; 152
     d34:	51 e4       	ldi	r21, 0x41	; 65
     d36:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	9c 01       	movw	r18, r24
     d40:	ad 01       	movw	r20, r26
     d42:	c8 01       	movw	r24, r16
     d44:	b7 01       	movw	r22, r14
     d46:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	f5 01       	movw	r30, r10
     d50:	80 83       	st	Z, r24
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	a2 83       	std	Z+2, r26	; 0x02
     d56:	b3 83       	std	Z+3, r27	; 0x03
	variance.y += (sum2.y - ((sum.y)*(sum.y))/20)/19;
     d58:	f5 01       	movw	r30, r10
     d5a:	e4 80       	ldd	r14, Z+4	; 0x04
     d5c:	f5 80       	ldd	r15, Z+5	; 0x05
     d5e:	06 81       	ldd	r16, Z+6	; 0x06
     d60:	17 81       	ldd	r17, Z+7	; 0x07
     d62:	6b ac       	ldd	r6, Y+59	; 0x3b
     d64:	7c ac       	ldd	r7, Y+60	; 0x3c
     d66:	8d ac       	ldd	r8, Y+61	; 0x3d
     d68:	9e ac       	ldd	r9, Y+62	; 0x3e
     d6a:	8f a5       	ldd	r24, Y+47	; 0x2f
     d6c:	98 a9       	ldd	r25, Y+48	; 0x30
     d6e:	a9 a9       	ldd	r26, Y+49	; 0x31
     d70:	ba a9       	ldd	r27, Y+50	; 0x32
     d72:	2f a5       	ldd	r18, Y+47	; 0x2f
     d74:	38 a9       	ldd	r19, Y+48	; 0x30
     d76:	49 a9       	ldd	r20, Y+49	; 0x31
     d78:	5a a9       	ldd	r21, Y+50	; 0x32
     d7a:	bc 01       	movw	r22, r24
     d7c:	cd 01       	movw	r24, r26
     d7e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	bc 01       	movw	r22, r24
     d88:	cd 01       	movw	r24, r26
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 ea       	ldi	r20, 0xA0	; 160
     d90:	51 e4       	ldi	r21, 0x41	; 65
     d92:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	9c 01       	movw	r18, r24
     d9c:	ad 01       	movw	r20, r26
     d9e:	c4 01       	movw	r24, r8
     da0:	b3 01       	movw	r22, r6
     da2:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	48 e9       	ldi	r20, 0x98	; 152
     db4:	51 e4       	ldi	r21, 0x41	; 65
     db6:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	9c 01       	movw	r18, r24
     dc0:	ad 01       	movw	r20, r26
     dc2:	c8 01       	movw	r24, r16
     dc4:	b7 01       	movw	r22, r14
     dc6:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	f5 01       	movw	r30, r10
     dd0:	84 83       	std	Z+4, r24	; 0x04
     dd2:	95 83       	std	Z+5, r25	; 0x05
     dd4:	a6 83       	std	Z+6, r26	; 0x06
     dd6:	b7 83       	std	Z+7, r27	; 0x07
	variance.z += (sum2.z - ((sum.z)*(sum.z))/20)/19;			
     dd8:	f5 01       	movw	r30, r10
     dda:	e0 84       	ldd	r14, Z+8	; 0x08
     ddc:	f1 84       	ldd	r15, Z+9	; 0x09
     dde:	02 85       	ldd	r16, Z+10	; 0x0a
     de0:	13 85       	ldd	r17, Z+11	; 0x0b
     de2:	ce 01       	movw	r24, r28
     de4:	cf 96       	adiw	r24, 0x3f	; 63
     de6:	fc 01       	movw	r30, r24
     de8:	60 80       	ld	r6, Z
     dea:	71 80       	ldd	r7, Z+1	; 0x01
     dec:	82 80       	ldd	r8, Z+2	; 0x02
     dee:	93 80       	ldd	r9, Z+3	; 0x03
     df0:	8b a9       	ldd	r24, Y+51	; 0x33
     df2:	9c a9       	ldd	r25, Y+52	; 0x34
     df4:	ad a9       	ldd	r26, Y+53	; 0x35
     df6:	be a9       	ldd	r27, Y+54	; 0x36
     df8:	2b a9       	ldd	r18, Y+51	; 0x33
     dfa:	3c a9       	ldd	r19, Y+52	; 0x34
     dfc:	4d a9       	ldd	r20, Y+53	; 0x35
     dfe:	5e a9       	ldd	r21, Y+54	; 0x36
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 ea       	ldi	r20, 0xA0	; 160
     e16:	51 e4       	ldi	r21, 0x41	; 65
     e18:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9c 01       	movw	r18, r24
     e22:	ad 01       	movw	r20, r26
     e24:	c4 01       	movw	r24, r8
     e26:	b3 01       	movw	r22, r6
     e28:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	48 e9       	ldi	r20, 0x98	; 152
     e3a:	51 e4       	ldi	r21, 0x41	; 65
     e3c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9c 01       	movw	r18, r24
     e46:	ad 01       	movw	r20, r26
     e48:	c8 01       	movw	r24, r16
     e4a:	b7 01       	movw	r22, r14
     e4c:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	f5 01       	movw	r30, r10
     e56:	80 87       	std	Z+8, r24	; 0x08
     e58:	91 87       	std	Z+9, r25	; 0x09
     e5a:	a2 87       	std	Z+10, r26	; 0x0a
     e5c:	b3 87       	std	Z+11, r27	; 0x0b



	USART_Send_string("A variance ");
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	USART_Send_string(" X: ");
     e66:	8c e0       	ldi	r24, 0x0C	; 12
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	printFloat(variance.x,5);
     e6e:	f5 01       	movw	r30, r10
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	a2 81       	ldd	r26, Z+2	; 0x02
     e76:	b3 81       	ldd	r27, Z+3	; 0x03
     e78:	bc 01       	movw	r22, r24
     e7a:	cd 01       	movw	r24, r26
     e7c:	45 e0       	ldi	r20, 0x05	; 5
     e7e:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
	USART_Send_string(" Y: ");
     e82:	81 e1       	ldi	r24, 0x11	; 17
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	printFloat(variance.y,5);
     e8a:	f5 01       	movw	r30, r10
     e8c:	84 81       	ldd	r24, Z+4	; 0x04
     e8e:	95 81       	ldd	r25, Z+5	; 0x05
     e90:	a6 81       	ldd	r26, Z+6	; 0x06
     e92:	b7 81       	ldd	r27, Z+7	; 0x07
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	45 e0       	ldi	r20, 0x05	; 5
     e9a:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
	USART_Send_string(" Z: ");
     e9e:	86 e1       	ldi	r24, 0x16	; 22
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	printFloat(variance.z,5);
     ea6:	f5 01       	movw	r30, r10
     ea8:	80 85       	ldd	r24, Z+8	; 0x08
     eaa:	91 85       	ldd	r25, Z+9	; 0x09
     eac:	a2 85       	ldd	r26, Z+10	; 0x0a
     eae:	b3 85       	ldd	r27, Z+11	; 0x0b
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	45 e0       	ldi	r20, 0x05	; 5
     eb6:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
	USART_Send_string("\n");
     eba:	8b e1       	ldi	r24, 0x1B	; 27
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	
	
	return variance;
	
}
     ec2:	c5 01       	movw	r24, r10
     ec4:	ca 54       	subi	r28, 0x4A	; 74
     ec6:	de 4f       	sbci	r29, 0xFE	; 254
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	ff 90       	pop	r15
     edc:	ef 90       	pop	r14
     ede:	df 90       	pop	r13
     ee0:	cf 90       	pop	r12
     ee2:	bf 90       	pop	r11
     ee4:	af 90       	pop	r10
     ee6:	9f 90       	pop	r9
     ee8:	8f 90       	pop	r8
     eea:	7f 90       	pop	r7
     eec:	6f 90       	pop	r6
     eee:	08 95       	ret

00000ef0 <_Z8gyro_dpsP6vector>:
//////////////////// GYROSCOPE PART //////////////////////


// Converts given gyroscope raw data in degrees per second
void gyro_dps(vector *g)
{
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <_Z8gyro_dpsP6vector+0xe>
     efe:	00 d0       	rcall	.+0      	; 0xf00 <_Z8gyro_dpsP6vector+0x10>
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	9c 83       	std	Y+4, r25	; 0x04
     f06:	8b 83       	std	Y+3, r24	; 0x03
	int res = 500;		// The resolution defined for the gyroscope
     f08:	84 ef       	ldi	r24, 0xF4	; 244
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
	
	g->x = (g->x/65535)*res;
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	fc 01       	movw	r30, r24
     f16:	80 81       	ld	r24, Z
     f18:	91 81       	ldd	r25, Z+1	; 0x01
     f1a:	a2 81       	ldd	r26, Z+2	; 0x02
     f1c:	b3 81       	ldd	r27, Z+3	; 0x03
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	3f ef       	ldi	r19, 0xFF	; 255
     f26:	4f e7       	ldi	r20, 0x7F	; 127
     f28:	57 e4       	ldi	r21, 0x47	; 71
     f2a:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	7c 01       	movw	r14, r24
     f34:	8d 01       	movw	r16, r26
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	aa 27       	eor	r26, r26
     f3c:	97 fd       	sbrc	r25, 7
     f3e:	a0 95       	com	r26
     f40:	ba 2f       	mov	r27, r26
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
     f4a:	9b 01       	movw	r18, r22
     f4c:	ac 01       	movw	r20, r24
     f4e:	c8 01       	movw	r24, r16
     f50:	b7 01       	movw	r22, r14
     f52:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	2b 81       	ldd	r18, Y+3	; 0x03
     f5c:	3c 81       	ldd	r19, Y+4	; 0x04
     f5e:	f9 01       	movw	r30, r18
     f60:	80 83       	st	Z, r24
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	a2 83       	std	Z+2, r26	; 0x02
     f66:	b3 83       	std	Z+3, r27	; 0x03
	g->y = (g->y/65535)*res;
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	fc 01       	movw	r30, r24
     f6e:	84 81       	ldd	r24, Z+4	; 0x04
     f70:	95 81       	ldd	r25, Z+5	; 0x05
     f72:	a6 81       	ldd	r26, Z+6	; 0x06
     f74:	b7 81       	ldd	r27, Z+7	; 0x07
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	3f ef       	ldi	r19, 0xFF	; 255
     f7e:	4f e7       	ldi	r20, 0x7F	; 127
     f80:	57 e4       	ldi	r21, 0x47	; 71
     f82:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	7c 01       	movw	r14, r24
     f8c:	8d 01       	movw	r16, r26
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	aa 27       	eor	r26, r26
     f94:	97 fd       	sbrc	r25, 7
     f96:	a0 95       	com	r26
     f98:	ba 2f       	mov	r27, r26
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
     fa2:	9b 01       	movw	r18, r22
     fa4:	ac 01       	movw	r20, r24
     fa6:	c8 01       	movw	r24, r16
     fa8:	b7 01       	movw	r22, r14
     faa:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	2b 81       	ldd	r18, Y+3	; 0x03
     fb4:	3c 81       	ldd	r19, Y+4	; 0x04
     fb6:	f9 01       	movw	r30, r18
     fb8:	84 83       	std	Z+4, r24	; 0x04
     fba:	95 83       	std	Z+5, r25	; 0x05
     fbc:	a6 83       	std	Z+6, r26	; 0x06
     fbe:	b7 83       	std	Z+7, r27	; 0x07
	g->z = (g->z/65535)*res;
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	fc 01       	movw	r30, r24
     fc6:	80 85       	ldd	r24, Z+8	; 0x08
     fc8:	91 85       	ldd	r25, Z+9	; 0x09
     fca:	a2 85       	ldd	r26, Z+10	; 0x0a
     fcc:	b3 85       	ldd	r27, Z+11	; 0x0b
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	3f ef       	ldi	r19, 0xFF	; 255
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	57 e4       	ldi	r21, 0x47	; 71
     fda:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	7c 01       	movw	r14, r24
     fe4:	8d 01       	movw	r16, r26
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	aa 27       	eor	r26, r26
     fec:	97 fd       	sbrc	r25, 7
     fee:	a0 95       	com	r26
     ff0:	ba 2f       	mov	r27, r26
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
     ffa:	9b 01       	movw	r18, r22
     ffc:	ac 01       	movw	r20, r24
     ffe:	c8 01       	movw	r24, r16
    1000:	b7 01       	movw	r22, r14
    1002:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	2b 81       	ldd	r18, Y+3	; 0x03
    100c:	3c 81       	ldd	r19, Y+4	; 0x04
    100e:	f9 01       	movw	r30, r18
    1010:	80 87       	std	Z+8, r24	; 0x08
    1012:	91 87       	std	Z+9, r25	; 0x09
    1014:	a2 87       	std	Z+10, r26	; 0x0a
    1016:	b3 87       	std	Z+11, r27	; 0x0b
	
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	08 95       	ret

0000102e <_Z10gyro_angle6vector>:


// Computes the angle moved using the time between 2 measurements, in degrees
vector gyro_angle (vector g)
{
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	6c 97       	sbiw	r28, 0x1c	; 28
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	5c 01       	movw	r10, r24
    1054:	c9 8a       	std	Y+17, r12	; 0x11
    1056:	da 8a       	std	Y+18, r13	; 0x12
    1058:	eb 8a       	std	Y+19, r14	; 0x13
    105a:	fc 8a       	std	Y+20, r15	; 0x14
    105c:	0d 8b       	std	Y+21, r16	; 0x15
    105e:	1e 8b       	std	Y+22, r17	; 0x16
    1060:	2f 8b       	std	Y+23, r18	; 0x17
    1062:	38 8f       	std	Y+24, r19	; 0x18
    1064:	49 8f       	std	Y+25, r20	; 0x19
    1066:	5a 8f       	std	Y+26, r21	; 0x1a
    1068:	6b 8f       	std	Y+27, r22	; 0x1b
    106a:	7c 8f       	std	Y+28, r23	; 0x1c
	// Time between 2 measurements in seconds
	double dtTimer   = 0.015;
    106c:	8f e8       	ldi	r24, 0x8F	; 143
    106e:	92 ec       	ldi	r25, 0xC2	; 194
    1070:	a5 e7       	ldi	r26, 0x75	; 117
    1072:	bc e3       	ldi	r27, 0x3C	; 60
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	ab 83       	std	Y+3, r26	; 0x03
    107a:	bc 83       	std	Y+4, r27	; 0x04
	
	
	vector angle ={0,0,0};
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	dc 01       	movw	r26, r24
    1082:	f5 01       	movw	r30, r10
    1084:	80 83       	st	Z, r24
    1086:	91 83       	std	Z+1, r25	; 0x01
    1088:	a2 83       	std	Z+2, r26	; 0x02
    108a:	b3 83       	std	Z+3, r27	; 0x03
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	dc 01       	movw	r26, r24
    1092:	f5 01       	movw	r30, r10
    1094:	84 83       	std	Z+4, r24	; 0x04
    1096:	95 83       	std	Z+5, r25	; 0x05
    1098:	a6 83       	std	Z+6, r26	; 0x06
    109a:	b7 83       	std	Z+7, r27	; 0x07
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	dc 01       	movw	r26, r24
    10a2:	f5 01       	movw	r30, r10
    10a4:	80 87       	std	Z+8, r24	; 0x08
    10a6:	91 87       	std	Z+9, r25	; 0x09
    10a8:	a2 87       	std	Z+10, r26	; 0x0a
    10aa:	b3 87       	std	Z+11, r27	; 0x0b
	angle.x = g.x * dtTimer;
    10ac:	89 89       	ldd	r24, Y+17	; 0x11
    10ae:	9a 89       	ldd	r25, Y+18	; 0x12
    10b0:	ab 89       	ldd	r26, Y+19	; 0x13
    10b2:	bc 89       	ldd	r27, Y+20	; 0x14
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	29 81       	ldd	r18, Y+1	; 0x01
    10ba:	3a 81       	ldd	r19, Y+2	; 0x02
    10bc:	4b 81       	ldd	r20, Y+3	; 0x03
    10be:	5c 81       	ldd	r21, Y+4	; 0x04
    10c0:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	f5 01       	movw	r30, r10
    10ca:	80 83       	st	Z, r24
    10cc:	91 83       	std	Z+1, r25	; 0x01
    10ce:	a2 83       	std	Z+2, r26	; 0x02
    10d0:	b3 83       	std	Z+3, r27	; 0x03
	angle.y = g.y * dtTimer;
    10d2:	8d 89       	ldd	r24, Y+21	; 0x15
    10d4:	9e 89       	ldd	r25, Y+22	; 0x16
    10d6:	af 89       	ldd	r26, Y+23	; 0x17
    10d8:	b8 8d       	ldd	r27, Y+24	; 0x18
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	29 81       	ldd	r18, Y+1	; 0x01
    10e0:	3a 81       	ldd	r19, Y+2	; 0x02
    10e2:	4b 81       	ldd	r20, Y+3	; 0x03
    10e4:	5c 81       	ldd	r21, Y+4	; 0x04
    10e6:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	f5 01       	movw	r30, r10
    10f0:	84 83       	std	Z+4, r24	; 0x04
    10f2:	95 83       	std	Z+5, r25	; 0x05
    10f4:	a6 83       	std	Z+6, r26	; 0x06
    10f6:	b7 83       	std	Z+7, r27	; 0x07
	angle.z = g.z * dtTimer;
    10f8:	89 8d       	ldd	r24, Y+25	; 0x19
    10fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10fc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    10fe:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1100:	bc 01       	movw	r22, r24
    1102:	cd 01       	movw	r24, r26
    1104:	29 81       	ldd	r18, Y+1	; 0x01
    1106:	3a 81       	ldd	r19, Y+2	; 0x02
    1108:	4b 81       	ldd	r20, Y+3	; 0x03
    110a:	5c 81       	ldd	r21, Y+4	; 0x04
    110c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	f5 01       	movw	r30, r10
    1116:	80 87       	std	Z+8, r24	; 0x08
    1118:	91 87       	std	Z+9, r25	; 0x09
    111a:	a2 87       	std	Z+10, r26	; 0x0a
    111c:	b3 87       	std	Z+11, r27	; 0x0b
	
	return angle;
}	
    111e:	c5 01       	movw	r24, r10
    1120:	6c 96       	adiw	r28, 0x1c	; 28
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	08 95       	ret

00001142 <_Z22gyro_angle_acquisitionv>:


// Whole function to get angles from gyroscope
vector gyro_angle_acquisition(void)
{
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	a4 97       	sbiw	r28, 0x24	; 36
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	5c 01       	movw	r10, r24
	vector g;
	vector angle;
		
	gyro_read_data(&g);
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <_Z14gyro_read_dataP6vector>
	gyro_dps(&g);
    1170:	ce 01       	movw	r24, r28
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	0e 94 78 07 	call	0xef0	; 0xef0 <_Z8gyro_dpsP6vector>
	
	angle = gyro_angle(g);	
    1178:	ce 01       	movw	r24, r28
    117a:	49 96       	adiw	r24, 0x19	; 25
    117c:	c9 80       	ldd	r12, Y+1	; 0x01
    117e:	da 80       	ldd	r13, Y+2	; 0x02
    1180:	eb 80       	ldd	r14, Y+3	; 0x03
    1182:	fc 80       	ldd	r15, Y+4	; 0x04
    1184:	0d 81       	ldd	r16, Y+5	; 0x05
    1186:	1e 81       	ldd	r17, Y+6	; 0x06
    1188:	2f 81       	ldd	r18, Y+7	; 0x07
    118a:	38 85       	ldd	r19, Y+8	; 0x08
    118c:	49 85       	ldd	r20, Y+9	; 0x09
    118e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1190:	6b 85       	ldd	r22, Y+11	; 0x0b
    1192:	7c 85       	ldd	r23, Y+12	; 0x0c
    1194:	0e 94 17 08 	call	0x102e	; 0x102e <_Z10gyro_angle6vector>
    1198:	c5 01       	movw	r24, r10
    119a:	9e 01       	movw	r18, r28
    119c:	27 5e       	subi	r18, 0xE7	; 231
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
    11a0:	4c e0       	ldi	r20, 0x0C	; 12
    11a2:	f9 01       	movw	r30, r18
    11a4:	00 80       	ld	r0, Z
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	fc 01       	movw	r30, r24
    11ac:	00 82       	st	Z, r0
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	41 50       	subi	r20, 0x01	; 1
    11b2:	44 23       	and	r20, r20
    11b4:	b1 f7       	brne	.-20     	; 0x11a2 <_Z22gyro_angle_acquisitionv+0x60>
	
	return angle;
	
	
}
    11b6:	c5 01       	movw	r24, r10
    11b8:	a4 96       	adiw	r28, 0x24	; 36
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	bf 90       	pop	r11
    11d6:	af 90       	pop	r10
    11d8:	08 95       	ret

000011da <_Z22gyro_measurement_noisev>:


// Calculate the gyroscope processing noise
vector gyro_measurement_noise (void)
{
    11da:	6f 92       	push	r6
    11dc:	7f 92       	push	r7
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	ca 5a       	subi	r28, 0xAA	; 170
    11fc:	d1 40       	sbci	r29, 0x01	; 1
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	5c 01       	movw	r10, r24
	// Calculated variance: {0.0000;0.0000;0.0000}
		// This was to be expected since the Gyro is really accurate on short time periods
	
	vector g;
	vector store[30];
	vector variance= {0,0,0};
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	dc 01       	movw	r26, r24
    1210:	f5 01       	movw	r30, r10
    1212:	80 83       	st	Z, r24
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	a2 83       	std	Z+2, r26	; 0x02
    1218:	b3 83       	std	Z+3, r27	; 0x03
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	dc 01       	movw	r26, r24
    1220:	f5 01       	movw	r30, r10
    1222:	84 83       	std	Z+4, r24	; 0x04
    1224:	95 83       	std	Z+5, r25	; 0x05
    1226:	a6 83       	std	Z+6, r26	; 0x06
    1228:	b7 83       	std	Z+7, r27	; 0x07
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	dc 01       	movw	r26, r24
    1230:	f5 01       	movw	r30, r10
    1232:	80 87       	std	Z+8, r24	; 0x08
    1234:	91 87       	std	Z+9, r25	; 0x09
    1236:	a2 87       	std	Z+10, r26	; 0x0a
    1238:	b3 87       	std	Z+11, r27	; 0x0b
	
	vector sum ={0,0,0};
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	dc 01       	movw	r26, r24
    1240:	8f 8f       	std	Y+31, r24	; 0x1f
    1242:	98 a3       	std	Y+32, r25	; 0x20
    1244:	a9 a3       	std	Y+33, r26	; 0x21
    1246:	ba a3       	std	Y+34, r27	; 0x22
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	dc 01       	movw	r26, r24
    124e:	8b a3       	std	Y+35, r24	; 0x23
    1250:	9c a3       	std	Y+36, r25	; 0x24
    1252:	ad a3       	std	Y+37, r26	; 0x25
    1254:	be a3       	std	Y+38, r27	; 0x26
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	dc 01       	movw	r26, r24
    125c:	8f a3       	std	Y+39, r24	; 0x27
    125e:	98 a7       	std	Y+40, r25	; 0x28
    1260:	a9 a7       	std	Y+41, r26	; 0x29
    1262:	ba a7       	std	Y+42, r27	; 0x2a
	vector sum2 ={0,0,0};	
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	dc 01       	movw	r26, r24
    126a:	8b a7       	std	Y+43, r24	; 0x2b
    126c:	9c a7       	std	Y+44, r25	; 0x2c
    126e:	ad a7       	std	Y+45, r26	; 0x2d
    1270:	be a7       	std	Y+46, r27	; 0x2e
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	dc 01       	movw	r26, r24
    1278:	8f a7       	std	Y+47, r24	; 0x2f
    127a:	98 ab       	std	Y+48, r25	; 0x30
    127c:	a9 ab       	std	Y+49, r26	; 0x31
    127e:	ba ab       	std	Y+50, r27	; 0x32
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	dc 01       	movw	r26, r24
    1286:	8b ab       	std	Y+51, r24	; 0x33
    1288:	9c ab       	std	Y+52, r25	; 0x34
    128a:	ad ab       	std	Y+53, r26	; 0x35
    128c:	be ab       	std	Y+54, r27	; 0x36
	
	// Data acquisition and storage
	for (int i =0; i<20; i++)
    128e:	1a 82       	std	Y+2, r1	; 0x02
    1290:	19 82       	std	Y+1, r1	; 0x01
    1292:	44 c0       	rjmp	.+136    	; 0x131c <_Z22gyro_measurement_noisev+0x142>
	{
		gyro_read_data(&g);
    1294:	ce 01       	movw	r24, r28
    1296:	07 96       	adiw	r24, 0x07	; 7
    1298:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <_Z14gyro_read_dataP6vector>
		gyro_dps(&g);	
    129c:	ce 01       	movw	r24, r28
    129e:	07 96       	adiw	r24, 0x07	; 7
    12a0:	0e 94 78 07 	call	0xef0	; 0xef0 <_Z8gyro_dpsP6vector>
		store[i] = gyro_angle(g);
    12a4:	29 81       	ldd	r18, Y+1	; 0x01
    12a6:	3a 81       	ldd	r19, Y+2	; 0x02
    12a8:	c9 01       	movw	r24, r18
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	82 0f       	add	r24, r18
    12b0:	93 1f       	adc	r25, r19
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	9e 01       	movw	r18, r28
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	82 0f       	add	r24, r18
    12c2:	93 1f       	adc	r25, r19
    12c4:	0f 2e       	mov	r0, r31
    12c6:	f6 e3       	ldi	r31, 0x36	; 54
    12c8:	8f 2e       	mov	r8, r31
    12ca:	99 24       	eor	r9, r9
    12cc:	f0 2d       	mov	r31, r0
    12ce:	88 0e       	add	r8, r24
    12d0:	99 1e       	adc	r9, r25
    12d2:	ce 01       	movw	r24, r28
    12d4:	81 56       	subi	r24, 0x61	; 97
    12d6:	9e 4f       	sbci	r25, 0xFE	; 254
    12d8:	cf 80       	ldd	r12, Y+7	; 0x07
    12da:	d8 84       	ldd	r13, Y+8	; 0x08
    12dc:	e9 84       	ldd	r14, Y+9	; 0x09
    12de:	fa 84       	ldd	r15, Y+10	; 0x0a
    12e0:	0b 85       	ldd	r16, Y+11	; 0x0b
    12e2:	1c 85       	ldd	r17, Y+12	; 0x0c
    12e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    12e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    12e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    12ea:	58 89       	ldd	r21, Y+16	; 0x10
    12ec:	69 89       	ldd	r22, Y+17	; 0x11
    12ee:	7a 89       	ldd	r23, Y+18	; 0x12
    12f0:	0e 94 17 08 	call	0x102e	; 0x102e <_Z10gyro_angle6vector>
    12f4:	9e 01       	movw	r18, r28
    12f6:	21 56       	subi	r18, 0x61	; 97
    12f8:	3e 4f       	sbci	r19, 0xFE	; 254
    12fa:	c4 01       	movw	r24, r8
    12fc:	4c e0       	ldi	r20, 0x0C	; 12
    12fe:	f9 01       	movw	r30, r18
    1300:	00 80       	ld	r0, Z
    1302:	2f 5f       	subi	r18, 0xFF	; 255
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	fc 01       	movw	r30, r24
    1308:	00 82       	st	Z, r0
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	41 50       	subi	r20, 0x01	; 1
    130e:	44 23       	and	r20, r20
    1310:	b1 f7       	brne	.-20     	; 0x12fe <_Z22gyro_measurement_noisev+0x124>
	
	vector sum ={0,0,0};
	vector sum2 ={0,0,0};	
	
	// Data acquisition and storage
	for (int i =0; i<20; i++)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	21 e0       	ldi	r18, 0x01	; 1
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	84 31       	cpi	r24, 0x14	; 20
    1324:	91 05       	cpc	r25, r1
    1326:	0c f0       	brlt	.+2      	; 0x132a <_Z22gyro_measurement_noisev+0x150>
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	22 23       	and	r18, r18
    132c:	09 f0       	breq	.+2      	; 0x1330 <_Z22gyro_measurement_noisev+0x156>
    132e:	b2 cf       	rjmp	.-156    	; 0x1294 <_Z22gyro_measurement_noisev+0xba>
		store[i] = gyro_angle(g);
	}

	// Calculate variance //  formula: variance = (sum2 - (sum^2/ number of samples))/(number of samples -1)
	// Calculate the sum of values
	for (int k=0; k<20; k++)
    1330:	1c 82       	std	Y+4, r1	; 0x04
    1332:	1b 82       	std	Y+3, r1	; 0x03
    1334:	74 c0       	rjmp	.+232    	; 0x141e <_Z22gyro_measurement_noisev+0x244>
	{
		sum.x = sum.x+store[k].x;
    1336:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1338:	98 a1       	ldd	r25, Y+32	; 0x20
    133a:	a9 a1       	ldd	r26, Y+33	; 0x21
    133c:	ba a1       	ldd	r27, Y+34	; 0x22
    133e:	4b 81       	ldd	r20, Y+3	; 0x03
    1340:	5c 81       	ldd	r21, Y+4	; 0x04
    1342:	9a 01       	movw	r18, r20
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	24 0f       	add	r18, r20
    134a:	35 1f       	adc	r19, r21
    134c:	22 0f       	add	r18, r18
    134e:	33 1f       	adc	r19, r19
    1350:	22 0f       	add	r18, r18
    1352:	33 1f       	adc	r19, r19
    1354:	ae 01       	movw	r20, r28
    1356:	4f 5f       	subi	r20, 0xFF	; 255
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	24 0f       	add	r18, r20
    135c:	35 1f       	adc	r19, r21
    135e:	2a 5c       	subi	r18, 0xCA	; 202
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
    1362:	f9 01       	movw	r30, r18
    1364:	20 81       	ld	r18, Z
    1366:	31 81       	ldd	r19, Z+1	; 0x01
    1368:	42 81       	ldd	r20, Z+2	; 0x02
    136a:	53 81       	ldd	r21, Z+3	; 0x03
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	8f 8f       	std	Y+31, r24	; 0x1f
    137a:	98 a3       	std	Y+32, r25	; 0x20
    137c:	a9 a3       	std	Y+33, r26	; 0x21
    137e:	ba a3       	std	Y+34, r27	; 0x22
		sum.y = sum.y+store[k].y;
    1380:	8b a1       	ldd	r24, Y+35	; 0x23
    1382:	9c a1       	ldd	r25, Y+36	; 0x24
    1384:	ad a1       	ldd	r26, Y+37	; 0x25
    1386:	be a1       	ldd	r27, Y+38	; 0x26
    1388:	4b 81       	ldd	r20, Y+3	; 0x03
    138a:	5c 81       	ldd	r21, Y+4	; 0x04
    138c:	9a 01       	movw	r18, r20
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	24 0f       	add	r18, r20
    1394:	35 1f       	adc	r19, r21
    1396:	22 0f       	add	r18, r18
    1398:	33 1f       	adc	r19, r19
    139a:	22 0f       	add	r18, r18
    139c:	33 1f       	adc	r19, r19
    139e:	ae 01       	movw	r20, r28
    13a0:	4f 5f       	subi	r20, 0xFF	; 255
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255
    13a4:	24 0f       	add	r18, r20
    13a6:	35 1f       	adc	r19, r21
    13a8:	26 5c       	subi	r18, 0xC6	; 198
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	f9 01       	movw	r30, r18
    13ae:	20 81       	ld	r18, Z
    13b0:	31 81       	ldd	r19, Z+1	; 0x01
    13b2:	42 81       	ldd	r20, Z+2	; 0x02
    13b4:	53 81       	ldd	r21, Z+3	; 0x03
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8b a3       	std	Y+35, r24	; 0x23
    13c4:	9c a3       	std	Y+36, r25	; 0x24
    13c6:	ad a3       	std	Y+37, r26	; 0x25
    13c8:	be a3       	std	Y+38, r27	; 0x26
		sum.z = sum.z+store[k].z;
    13ca:	8f a1       	ldd	r24, Y+39	; 0x27
    13cc:	98 a5       	ldd	r25, Y+40	; 0x28
    13ce:	a9 a5       	ldd	r26, Y+41	; 0x29
    13d0:	ba a5       	ldd	r27, Y+42	; 0x2a
    13d2:	4b 81       	ldd	r20, Y+3	; 0x03
    13d4:	5c 81       	ldd	r21, Y+4	; 0x04
    13d6:	9a 01       	movw	r18, r20
    13d8:	22 0f       	add	r18, r18
    13da:	33 1f       	adc	r19, r19
    13dc:	24 0f       	add	r18, r20
    13de:	35 1f       	adc	r19, r21
    13e0:	22 0f       	add	r18, r18
    13e2:	33 1f       	adc	r19, r19
    13e4:	22 0f       	add	r18, r18
    13e6:	33 1f       	adc	r19, r19
    13e8:	ae 01       	movw	r20, r28
    13ea:	4f 5f       	subi	r20, 0xFF	; 255
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	24 0f       	add	r18, r20
    13f0:	35 1f       	adc	r19, r21
    13f2:	22 5c       	subi	r18, 0xC2	; 194
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	f9 01       	movw	r30, r18
    13f8:	20 81       	ld	r18, Z
    13fa:	31 81       	ldd	r19, Z+1	; 0x01
    13fc:	42 81       	ldd	r20, Z+2	; 0x02
    13fe:	53 81       	ldd	r21, Z+3	; 0x03
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8f a3       	std	Y+39, r24	; 0x27
    140e:	98 a7       	std	Y+40, r25	; 0x28
    1410:	a9 a7       	std	Y+41, r26	; 0x29
    1412:	ba a7       	std	Y+42, r27	; 0x2a
		store[i] = gyro_angle(g);
	}

	// Calculate variance //  formula: variance = (sum2 - (sum^2/ number of samples))/(number of samples -1)
	// Calculate the sum of values
	for (int k=0; k<20; k++)
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	9c 83       	std	Y+4, r25	; 0x04
    141c:	8b 83       	std	Y+3, r24	; 0x03
    141e:	21 e0       	ldi	r18, 0x01	; 1
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	84 31       	cpi	r24, 0x14	; 20
    1426:	91 05       	cpc	r25, r1
    1428:	0c f0       	brlt	.+2      	; 0x142c <_Z22gyro_measurement_noisev+0x252>
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	22 23       	and	r18, r18
    142e:	09 f0       	breq	.+2      	; 0x1432 <_Z22gyro_measurement_noisev+0x258>
    1430:	82 cf       	rjmp	.-252    	; 0x1336 <_Z22gyro_measurement_noisev+0x15c>
		sum.y = sum.y+store[k].y;
		sum.z = sum.z+store[k].z;
	}
	
	// Calculate the sum of values^2
	for (int k=0; k<20; k++)
    1432:	1e 82       	std	Y+6, r1	; 0x06
    1434:	1d 82       	std	Y+5, r1	; 0x05
    1436:	ce c0       	rjmp	.+412    	; 0x15d4 <_Z22gyro_measurement_noisev+0x3fa>
	{
		sum2.x = sum2.x+(store[k].x)*(store[k].x);
    1438:	eb a4       	ldd	r14, Y+43	; 0x2b
    143a:	fc a4       	ldd	r15, Y+44	; 0x2c
    143c:	0d a5       	ldd	r16, Y+45	; 0x2d
    143e:	1e a5       	ldd	r17, Y+46	; 0x2e
    1440:	2d 81       	ldd	r18, Y+5	; 0x05
    1442:	3e 81       	ldd	r19, Y+6	; 0x06
    1444:	c9 01       	movw	r24, r18
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	82 0f       	add	r24, r18
    144c:	93 1f       	adc	r25, r19
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	9e 01       	movw	r18, r28
    1458:	2f 5f       	subi	r18, 0xFF	; 255
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	82 0f       	add	r24, r18
    145e:	93 1f       	adc	r25, r19
    1460:	c6 96       	adiw	r24, 0x36	; 54
    1462:	fc 01       	movw	r30, r24
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	a2 81       	ldd	r26, Z+2	; 0x02
    146a:	b3 81       	ldd	r27, Z+3	; 0x03
    146c:	4d 81       	ldd	r20, Y+5	; 0x05
    146e:	5e 81       	ldd	r21, Y+6	; 0x06
    1470:	9a 01       	movw	r18, r20
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	24 0f       	add	r18, r20
    1478:	35 1f       	adc	r19, r21
    147a:	22 0f       	add	r18, r18
    147c:	33 1f       	adc	r19, r19
    147e:	22 0f       	add	r18, r18
    1480:	33 1f       	adc	r19, r19
    1482:	ae 01       	movw	r20, r28
    1484:	4f 5f       	subi	r20, 0xFF	; 255
    1486:	5f 4f       	sbci	r21, 0xFF	; 255
    1488:	24 0f       	add	r18, r20
    148a:	35 1f       	adc	r19, r21
    148c:	2a 5c       	subi	r18, 0xCA	; 202
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	f9 01       	movw	r30, r18
    1492:	20 81       	ld	r18, Z
    1494:	31 81       	ldd	r19, Z+1	; 0x01
    1496:	42 81       	ldd	r20, Z+2	; 0x02
    1498:	53 81       	ldd	r21, Z+3	; 0x03
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9c 01       	movw	r18, r24
    14a8:	ad 01       	movw	r20, r26
    14aa:	c8 01       	movw	r24, r16
    14ac:	b7 01       	movw	r22, r14
    14ae:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	8b a7       	std	Y+43, r24	; 0x2b
    14b8:	9c a7       	std	Y+44, r25	; 0x2c
    14ba:	ad a7       	std	Y+45, r26	; 0x2d
    14bc:	be a7       	std	Y+46, r27	; 0x2e
		sum2.y = sum2.y+(store[k].y)*(store[k].y);
    14be:	ef a4       	ldd	r14, Y+47	; 0x2f
    14c0:	f8 a8       	ldd	r15, Y+48	; 0x30
    14c2:	09 a9       	ldd	r16, Y+49	; 0x31
    14c4:	1a a9       	ldd	r17, Y+50	; 0x32
    14c6:	2d 81       	ldd	r18, Y+5	; 0x05
    14c8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ca:	c9 01       	movw	r24, r18
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	82 0f       	add	r24, r18
    14d2:	93 1f       	adc	r25, r19
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	9e 01       	movw	r18, r28
    14de:	2f 5f       	subi	r18, 0xFF	; 255
    14e0:	3f 4f       	sbci	r19, 0xFF	; 255
    14e2:	82 0f       	add	r24, r18
    14e4:	93 1f       	adc	r25, r19
    14e6:	ca 96       	adiw	r24, 0x3a	; 58
    14e8:	fc 01       	movw	r30, r24
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	a2 81       	ldd	r26, Z+2	; 0x02
    14f0:	b3 81       	ldd	r27, Z+3	; 0x03
    14f2:	4d 81       	ldd	r20, Y+5	; 0x05
    14f4:	5e 81       	ldd	r21, Y+6	; 0x06
    14f6:	9a 01       	movw	r18, r20
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	24 0f       	add	r18, r20
    14fe:	35 1f       	adc	r19, r21
    1500:	22 0f       	add	r18, r18
    1502:	33 1f       	adc	r19, r19
    1504:	22 0f       	add	r18, r18
    1506:	33 1f       	adc	r19, r19
    1508:	ae 01       	movw	r20, r28
    150a:	4f 5f       	subi	r20, 0xFF	; 255
    150c:	5f 4f       	sbci	r21, 0xFF	; 255
    150e:	24 0f       	add	r18, r20
    1510:	35 1f       	adc	r19, r21
    1512:	26 5c       	subi	r18, 0xC6	; 198
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
    1516:	f9 01       	movw	r30, r18
    1518:	20 81       	ld	r18, Z
    151a:	31 81       	ldd	r19, Z+1	; 0x01
    151c:	42 81       	ldd	r20, Z+2	; 0x02
    151e:	53 81       	ldd	r21, Z+3	; 0x03
    1520:	bc 01       	movw	r22, r24
    1522:	cd 01       	movw	r24, r26
    1524:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9c 01       	movw	r18, r24
    152e:	ad 01       	movw	r20, r26
    1530:	c8 01       	movw	r24, r16
    1532:	b7 01       	movw	r22, r14
    1534:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8f a7       	std	Y+47, r24	; 0x2f
    153e:	98 ab       	std	Y+48, r25	; 0x30
    1540:	a9 ab       	std	Y+49, r26	; 0x31
    1542:	ba ab       	std	Y+50, r27	; 0x32
		sum2.z = sum2.z+(store[k].z)*(store[k].z);
    1544:	eb a8       	ldd	r14, Y+51	; 0x33
    1546:	fc a8       	ldd	r15, Y+52	; 0x34
    1548:	0d a9       	ldd	r16, Y+53	; 0x35
    154a:	1e a9       	ldd	r17, Y+54	; 0x36
    154c:	2d 81       	ldd	r18, Y+5	; 0x05
    154e:	3e 81       	ldd	r19, Y+6	; 0x06
    1550:	c9 01       	movw	r24, r18
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	82 0f       	add	r24, r18
    1558:	93 1f       	adc	r25, r19
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	9e 01       	movw	r18, r28
    1564:	2f 5f       	subi	r18, 0xFF	; 255
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	82 0f       	add	r24, r18
    156a:	93 1f       	adc	r25, r19
    156c:	ce 96       	adiw	r24, 0x3e	; 62
    156e:	fc 01       	movw	r30, r24
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	a2 81       	ldd	r26, Z+2	; 0x02
    1576:	b3 81       	ldd	r27, Z+3	; 0x03
    1578:	4d 81       	ldd	r20, Y+5	; 0x05
    157a:	5e 81       	ldd	r21, Y+6	; 0x06
    157c:	9a 01       	movw	r18, r20
    157e:	22 0f       	add	r18, r18
    1580:	33 1f       	adc	r19, r19
    1582:	24 0f       	add	r18, r20
    1584:	35 1f       	adc	r19, r21
    1586:	22 0f       	add	r18, r18
    1588:	33 1f       	adc	r19, r19
    158a:	22 0f       	add	r18, r18
    158c:	33 1f       	adc	r19, r19
    158e:	ae 01       	movw	r20, r28
    1590:	4f 5f       	subi	r20, 0xFF	; 255
    1592:	5f 4f       	sbci	r21, 0xFF	; 255
    1594:	24 0f       	add	r18, r20
    1596:	35 1f       	adc	r19, r21
    1598:	22 5c       	subi	r18, 0xC2	; 194
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	f9 01       	movw	r30, r18
    159e:	20 81       	ld	r18, Z
    15a0:	31 81       	ldd	r19, Z+1	; 0x01
    15a2:	42 81       	ldd	r20, Z+2	; 0x02
    15a4:	53 81       	ldd	r21, Z+3	; 0x03
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9c 01       	movw	r18, r24
    15b4:	ad 01       	movw	r20, r26
    15b6:	c8 01       	movw	r24, r16
    15b8:	b7 01       	movw	r22, r14
    15ba:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	8b ab       	std	Y+51, r24	; 0x33
    15c4:	9c ab       	std	Y+52, r25	; 0x34
    15c6:	ad ab       	std	Y+53, r26	; 0x35
    15c8:	be ab       	std	Y+54, r27	; 0x36
		sum.y = sum.y+store[k].y;
		sum.z = sum.z+store[k].z;
	}
	
	// Calculate the sum of values^2
	for (int k=0; k<20; k++)
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	9e 83       	std	Y+6, r25	; 0x06
    15d2:	8d 83       	std	Y+5, r24	; 0x05
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	84 31       	cpi	r24, 0x14	; 20
    15dc:	91 05       	cpc	r25, r1
    15de:	0c f0       	brlt	.+2      	; 0x15e2 <_Z22gyro_measurement_noisev+0x408>
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	22 23       	and	r18, r18
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <_Z22gyro_measurement_noisev+0x40e>
    15e6:	28 cf       	rjmp	.-432    	; 0x1438 <_Z22gyro_measurement_noisev+0x25e>
		sum2.y = sum2.y+(store[k].y)*(store[k].y);
		sum2.z = sum2.z+(store[k].z)*(store[k].z);
	}
			  	
	// Calculate the variance
	variance.x += (sum2.x - ((sum.x)*(sum.x))/20)/19;
    15e8:	f5 01       	movw	r30, r10
    15ea:	e0 80       	ld	r14, Z
    15ec:	f1 80       	ldd	r15, Z+1	; 0x01
    15ee:	02 81       	ldd	r16, Z+2	; 0x02
    15f0:	13 81       	ldd	r17, Z+3	; 0x03
    15f2:	6b a4       	ldd	r6, Y+43	; 0x2b
    15f4:	7c a4       	ldd	r7, Y+44	; 0x2c
    15f6:	8d a4       	ldd	r8, Y+45	; 0x2d
    15f8:	9e a4       	ldd	r9, Y+46	; 0x2e
    15fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15fc:	98 a1       	ldd	r25, Y+32	; 0x20
    15fe:	a9 a1       	ldd	r26, Y+33	; 0x21
    1600:	ba a1       	ldd	r27, Y+34	; 0x22
    1602:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1604:	38 a1       	ldd	r19, Y+32	; 0x20
    1606:	49 a1       	ldd	r20, Y+33	; 0x21
    1608:	5a a1       	ldd	r21, Y+34	; 0x22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 ea       	ldi	r20, 0xA0	; 160
    1620:	51 e4       	ldi	r21, 0x41	; 65
    1622:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9c 01       	movw	r18, r24
    162c:	ad 01       	movw	r20, r26
    162e:	c4 01       	movw	r24, r8
    1630:	b3 01       	movw	r22, r6
    1632:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	48 e9       	ldi	r20, 0x98	; 152
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9c 01       	movw	r18, r24
    1650:	ad 01       	movw	r20, r26
    1652:	c8 01       	movw	r24, r16
    1654:	b7 01       	movw	r22, r14
    1656:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	f5 01       	movw	r30, r10
    1660:	80 83       	st	Z, r24
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	a2 83       	std	Z+2, r26	; 0x02
    1666:	b3 83       	std	Z+3, r27	; 0x03
	variance.y += (sum2.y - ((sum.y)*(sum.y))/20)/19;
    1668:	f5 01       	movw	r30, r10
    166a:	e4 80       	ldd	r14, Z+4	; 0x04
    166c:	f5 80       	ldd	r15, Z+5	; 0x05
    166e:	06 81       	ldd	r16, Z+6	; 0x06
    1670:	17 81       	ldd	r17, Z+7	; 0x07
    1672:	6f a4       	ldd	r6, Y+47	; 0x2f
    1674:	78 a8       	ldd	r7, Y+48	; 0x30
    1676:	89 a8       	ldd	r8, Y+49	; 0x31
    1678:	9a a8       	ldd	r9, Y+50	; 0x32
    167a:	8b a1       	ldd	r24, Y+35	; 0x23
    167c:	9c a1       	ldd	r25, Y+36	; 0x24
    167e:	ad a1       	ldd	r26, Y+37	; 0x25
    1680:	be a1       	ldd	r27, Y+38	; 0x26
    1682:	2b a1       	ldd	r18, Y+35	; 0x23
    1684:	3c a1       	ldd	r19, Y+36	; 0x24
    1686:	4d a1       	ldd	r20, Y+37	; 0x25
    1688:	5e a1       	ldd	r21, Y+38	; 0x26
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 ea       	ldi	r20, 0xA0	; 160
    16a0:	51 e4       	ldi	r21, 0x41	; 65
    16a2:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9c 01       	movw	r18, r24
    16ac:	ad 01       	movw	r20, r26
    16ae:	c4 01       	movw	r24, r8
    16b0:	b3 01       	movw	r22, r6
    16b2:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	bc 01       	movw	r22, r24
    16bc:	cd 01       	movw	r24, r26
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	48 e9       	ldi	r20, 0x98	; 152
    16c4:	51 e4       	ldi	r21, 0x41	; 65
    16c6:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9c 01       	movw	r18, r24
    16d0:	ad 01       	movw	r20, r26
    16d2:	c8 01       	movw	r24, r16
    16d4:	b7 01       	movw	r22, r14
    16d6:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	f5 01       	movw	r30, r10
    16e0:	84 83       	std	Z+4, r24	; 0x04
    16e2:	95 83       	std	Z+5, r25	; 0x05
    16e4:	a6 83       	std	Z+6, r26	; 0x06
    16e6:	b7 83       	std	Z+7, r27	; 0x07
	variance.z += (sum2.z - ((sum.z)*(sum.z))/20)/19;			
    16e8:	f5 01       	movw	r30, r10
    16ea:	e0 84       	ldd	r14, Z+8	; 0x08
    16ec:	f1 84       	ldd	r15, Z+9	; 0x09
    16ee:	02 85       	ldd	r16, Z+10	; 0x0a
    16f0:	13 85       	ldd	r17, Z+11	; 0x0b
    16f2:	6b a8       	ldd	r6, Y+51	; 0x33
    16f4:	7c a8       	ldd	r7, Y+52	; 0x34
    16f6:	8d a8       	ldd	r8, Y+53	; 0x35
    16f8:	9e a8       	ldd	r9, Y+54	; 0x36
    16fa:	8f a1       	ldd	r24, Y+39	; 0x27
    16fc:	98 a5       	ldd	r25, Y+40	; 0x28
    16fe:	a9 a5       	ldd	r26, Y+41	; 0x29
    1700:	ba a5       	ldd	r27, Y+42	; 0x2a
    1702:	2f a1       	ldd	r18, Y+39	; 0x27
    1704:	38 a5       	ldd	r19, Y+40	; 0x28
    1706:	49 a5       	ldd	r20, Y+41	; 0x29
    1708:	5a a5       	ldd	r21, Y+42	; 0x2a
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 ea       	ldi	r20, 0xA0	; 160
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9c 01       	movw	r18, r24
    172c:	ad 01       	movw	r20, r26
    172e:	c4 01       	movw	r24, r8
    1730:	b3 01       	movw	r22, r6
    1732:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	48 e9       	ldi	r20, 0x98	; 152
    1744:	51 e4       	ldi	r21, 0x41	; 65
    1746:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9c 01       	movw	r18, r24
    1750:	ad 01       	movw	r20, r26
    1752:	c8 01       	movw	r24, r16
    1754:	b7 01       	movw	r22, r14
    1756:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	f5 01       	movw	r30, r10
    1760:	80 87       	std	Z+8, r24	; 0x08
    1762:	91 87       	std	Z+9, r25	; 0x09
    1764:	a2 87       	std	Z+10, r26	; 0x0a
    1766:	b3 87       	std	Z+11, r27	; 0x0b



	USART_Send_string("G variance ");
    1768:	8d e1       	ldi	r24, 0x1D	; 29
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	USART_Send_string(" X: ");
    1770:	8c e0       	ldi	r24, 0x0C	; 12
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	printFloat(variance.x,5);
    1778:	f5 01       	movw	r30, r10
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	a2 81       	ldd	r26, Z+2	; 0x02
    1780:	b3 81       	ldd	r27, Z+3	; 0x03
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	45 e0       	ldi	r20, 0x05	; 5
    1788:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
	USART_Send_string(" Y: ");
    178c:	81 e1       	ldi	r24, 0x11	; 17
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	printFloat(variance.y,5);
    1794:	f5 01       	movw	r30, r10
    1796:	84 81       	ldd	r24, Z+4	; 0x04
    1798:	95 81       	ldd	r25, Z+5	; 0x05
    179a:	a6 81       	ldd	r26, Z+6	; 0x06
    179c:	b7 81       	ldd	r27, Z+7	; 0x07
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	45 e0       	ldi	r20, 0x05	; 5
    17a4:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
	USART_Send_string(" Z: ");
    17a8:	86 e1       	ldi	r24, 0x16	; 22
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	printFloat(variance.z,5);
    17b0:	f5 01       	movw	r30, r10
    17b2:	80 85       	ldd	r24, Z+8	; 0x08
    17b4:	91 85       	ldd	r25, Z+9	; 0x09
    17b6:	a2 85       	ldd	r26, Z+10	; 0x0a
    17b8:	b3 85       	ldd	r27, Z+11	; 0x0b
    17ba:	bc 01       	movw	r22, r24
    17bc:	cd 01       	movw	r24, r26
    17be:	45 e0       	ldi	r20, 0x05	; 5
    17c0:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
	USART_Send_string("\n");
    17c4:	8b e1       	ldi	r24, 0x1B	; 27
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	
	
	return variance;
	
}
    17cc:	c5 01       	movw	r24, r10
    17ce:	c6 55       	subi	r28, 0x56	; 86
    17d0:	de 4f       	sbci	r29, 0xFE	; 254
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	bf 90       	pop	r11
    17ee:	af 90       	pop	r10
    17f0:	9f 90       	pop	r9
    17f2:	8f 90       	pop	r8
    17f4:	7f 90       	pop	r7
    17f6:	6f 90       	pop	r6
    17f8:	08 95       	ret

000017fa <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_>:

//////////////////// KALMAN PART //////////////////////


void KalmanFilter (Matrix* xk, Matrix xnew, Matrix uk, Matrix* Pk, Matrix R, Matrix Q, Matrix* S, Matrix* K, Matrix I)
{
    17fa:	8f 92       	push	r8
    17fc:	9f 92       	push	r9
    17fe:	af 92       	push	r10
    1800:	bf 92       	push	r11
    1802:	cf 92       	push	r12
    1804:	df 92       	push	r13
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	c4 55       	subi	r28, 0x54	; 84
    1818:	d0 40       	sbci	r29, 0x00	; 0
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	fe 01       	movw	r30, r28
    1826:	ed 5b       	subi	r30, 0xBD	; 189
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	ce 01       	movw	r24, r28
    1830:	8b 5b       	subi	r24, 0xBB	; 187
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	fc 01       	movw	r30, r24
    1836:	71 83       	std	Z+1, r23	; 0x01
    1838:	60 83       	st	Z, r22
    183a:	ce 01       	movw	r24, r28
    183c:	89 5b       	subi	r24, 0xB9	; 185
    183e:	9f 4f       	sbci	r25, 0xFF	; 255
    1840:	fc 01       	movw	r30, r24
    1842:	51 83       	std	Z+1, r21	; 0x01
    1844:	40 83       	st	Z, r20
    1846:	ce 01       	movw	r24, r28
    1848:	87 5b       	subi	r24, 0xB7	; 183
    184a:	9f 4f       	sbci	r25, 0xFF	; 255
    184c:	fc 01       	movw	r30, r24
    184e:	31 83       	std	Z+1, r19	; 0x01
    1850:	20 83       	st	Z, r18
    1852:	ce 01       	movw	r24, r28
    1854:	85 5b       	subi	r24, 0xB5	; 181
    1856:	9f 4f       	sbci	r25, 0xFF	; 255
    1858:	fc 01       	movw	r30, r24
    185a:	11 83       	std	Z+1, r17	; 0x01
    185c:	00 83       	st	Z, r16
    185e:	ce 01       	movw	r24, r28
    1860:	83 5b       	subi	r24, 0xB3	; 179
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	fc 01       	movw	r30, r24
    1866:	f1 82       	std	Z+1, r15	; 0x01
    1868:	e0 82       	st	Z, r14
    186a:	ce 01       	movw	r24, r28
    186c:	81 5b       	subi	r24, 0xB1	; 177
    186e:	9f 4f       	sbci	r25, 0xFF	; 255
    1870:	fc 01       	movw	r30, r24
    1872:	d1 82       	std	Z+1, r13	; 0x01
    1874:	c0 82       	st	Z, r12
    1876:	ce 01       	movw	r24, r28
    1878:	8f 5a       	subi	r24, 0xAF	; 175
    187a:	9f 4f       	sbci	r25, 0xFF	; 255
    187c:	fc 01       	movw	r30, r24
    187e:	b1 82       	std	Z+1, r11	; 0x01
    1880:	a0 82       	st	Z, r10
    1882:	ce 01       	movw	r24, r28
    1884:	8d 5a       	subi	r24, 0xAD	; 173
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	fc 01       	movw	r30, r24
    188a:	91 82       	std	Z+1, r9	; 0x01
    188c:	80 82       	st	Z, r8
	// Steps and variables names are based on the wikipedia page
	// http://en.wikipedia.org/wiki/Kalman_filter
	
	
////////  Variables declaration
Matrix yk  (3,3); // Observation
    188e:	ce 01       	movw	r24, r28
    1890:	cd 96       	adiw	r24, 0x3d	; 61
    1892:	63 e0       	ldi	r22, 0x03	; 3
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	43 e0       	ldi	r20, 0x03	; 3
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>
	
	
////////  PREDICTION
	// Predicted (a priori) state estimate: 
	*xk = *xk + uk;
    189e:	ce 01       	movw	r24, r28
    18a0:	c7 96       	adiw	r24, 0x37	; 55
    18a2:	9e 01       	movw	r18, r28
    18a4:	2d 5b       	subi	r18, 0xBD	; 189
    18a6:	3f 4f       	sbci	r19, 0xFF	; 255
    18a8:	f9 01       	movw	r30, r18
    18aa:	40 81       	ld	r20, Z
    18ac:	51 81       	ldd	r21, Z+1	; 0x01
    18ae:	9e 01       	movw	r18, r28
    18b0:	29 5b       	subi	r18, 0xB9	; 185
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
    18b4:	f9 01       	movw	r30, r18
    18b6:	20 81       	ld	r18, Z
    18b8:	31 81       	ldd	r19, Z+1	; 0x01
    18ba:	ba 01       	movw	r22, r20
    18bc:	a9 01       	movw	r20, r18
    18be:	0e 94 6f 19 	call	0x32de	; 0x32de <_ZplRK6MatrixS1_>
    18c2:	ce 01       	movw	r24, r28
    18c4:	8d 5b       	subi	r24, 0xBD	; 189
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	fc 01       	movw	r30, r24
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	9e 01       	movw	r18, r28
    18d0:	29 5c       	subi	r18, 0xC9	; 201
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255
    18d4:	b9 01       	movw	r22, r18
    18d6:	0e 94 ad 18 	call	0x315a	; 0x315a <_ZN6MatrixaSERKS_>
    18da:	ce 01       	movw	r24, r28
    18dc:	c7 96       	adiw	r24, 0x37	; 55
    18de:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	
	// Predicted (a priori) estimate covariance
	*Pk = *Pk + Q;
    18e2:	ce 01       	movw	r24, r28
    18e4:	c1 96       	adiw	r24, 0x31	; 49
    18e6:	9e 01       	movw	r18, r28
    18e8:	27 5b       	subi	r18, 0xB7	; 183
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	f9 01       	movw	r30, r18
    18ee:	40 81       	ld	r20, Z
    18f0:	51 81       	ldd	r21, Z+1	; 0x01
    18f2:	9e 01       	movw	r18, r28
    18f4:	23 5b       	subi	r18, 0xB3	; 179
    18f6:	3f 4f       	sbci	r19, 0xFF	; 255
    18f8:	f9 01       	movw	r30, r18
    18fa:	20 81       	ld	r18, Z
    18fc:	31 81       	ldd	r19, Z+1	; 0x01
    18fe:	ba 01       	movw	r22, r20
    1900:	a9 01       	movw	r20, r18
    1902:	0e 94 6f 19 	call	0x32de	; 0x32de <_ZplRK6MatrixS1_>
    1906:	ce 01       	movw	r24, r28
    1908:	87 5b       	subi	r24, 0xB7	; 183
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	fc 01       	movw	r30, r24
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	9e 01       	movw	r18, r28
    1914:	2f 5c       	subi	r18, 0xCF	; 207
    1916:	3f 4f       	sbci	r19, 0xFF	; 255
    1918:	b9 01       	movw	r22, r18
    191a:	0e 94 ad 18 	call	0x315a	; 0x315a <_ZN6MatrixaSERKS_>
    191e:	ce 01       	movw	r24, r28
    1920:	c1 96       	adiw	r24, 0x31	; 49
    1922:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
		
////////  UPDATE
	// Innovation or measurement residual
	yk = xnew - *xk;
    1926:	ce 01       	movw	r24, r28
    1928:	8b 96       	adiw	r24, 0x2b	; 43
    192a:	9e 01       	movw	r18, r28
    192c:	2b 5b       	subi	r18, 0xBB	; 187
    192e:	3f 4f       	sbci	r19, 0xFF	; 255
    1930:	f9 01       	movw	r30, r18
    1932:	40 81       	ld	r20, Z
    1934:	51 81       	ldd	r21, Z+1	; 0x01
    1936:	9e 01       	movw	r18, r28
    1938:	2d 5b       	subi	r18, 0xBD	; 189
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	f9 01       	movw	r30, r18
    193e:	20 81       	ld	r18, Z
    1940:	31 81       	ldd	r19, Z+1	; 0x01
    1942:	ba 01       	movw	r22, r20
    1944:	a9 01       	movw	r20, r18
    1946:	0e 94 19 1a 	call	0x3432	; 0x3432 <_ZmiRK6MatrixS1_>
    194a:	ce 01       	movw	r24, r28
    194c:	cd 96       	adiw	r24, 0x3d	; 61
    194e:	9e 01       	movw	r18, r28
    1950:	25 5d       	subi	r18, 0xD5	; 213
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	b9 01       	movw	r22, r18
    1956:	0e 94 ad 18 	call	0x315a	; 0x315a <_ZN6MatrixaSERKS_>
    195a:	ce 01       	movw	r24, r28
    195c:	8b 96       	adiw	r24, 0x2b	; 43
    195e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	if(yk.mat[0][0]>320){yk.mat[0][0] = yk.mat[0][0]-360; }
    1962:	ce 01       	movw	r24, r28
    1964:	8f 5b       	subi	r24, 0xBF	; 191
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	fc 01       	movw	r30, r24
    196a:	80 81       	ld	r24, Z
    196c:	91 81       	ldd	r25, Z+1	; 0x01
    196e:	fc 01       	movw	r30, r24
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	fc 01       	movw	r30, r24
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	a2 81       	ldd	r26, Z+2	; 0x02
    197c:	b3 81       	ldd	r27, Z+3	; 0x03
    197e:	11 e0       	ldi	r17, 0x01	; 1
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 ea       	ldi	r20, 0xA0	; 160
    198a:	53 e4       	ldi	r21, 0x43	; 67
    198c:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1990:	18 16       	cp	r1, r24
    1992:	0c f0       	brlt	.+2      	; 0x1996 <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x19c>
    1994:	10 e0       	ldi	r17, 0x00	; 0
    1996:	11 23       	and	r17, r17
    1998:	31 f1       	breq	.+76     	; 0x19e6 <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x1ec>
    199a:	ce 01       	movw	r24, r28
    199c:	8f 5b       	subi	r24, 0xBF	; 191
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	fc 01       	movw	r30, r24
    19a2:	80 81       	ld	r24, Z
    19a4:	91 81       	ldd	r25, Z+1	; 0x01
    19a6:	fc 01       	movw	r30, r24
    19a8:	00 81       	ld	r16, Z
    19aa:	11 81       	ldd	r17, Z+1	; 0x01
    19ac:	ce 01       	movw	r24, r28
    19ae:	8f 5b       	subi	r24, 0xBF	; 191
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	fc 01       	movw	r30, r24
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	fc 01       	movw	r30, r24
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	fc 01       	movw	r30, r24
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	a2 81       	ldd	r26, Z+2	; 0x02
    19c6:	b3 81       	ldd	r27, Z+3	; 0x03
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	44 eb       	ldi	r20, 0xB4	; 180
    19d2:	53 e4       	ldi	r21, 0x43	; 67
    19d4:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	f8 01       	movw	r30, r16
    19de:	80 83       	st	Z, r24
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	a2 83       	std	Z+2, r26	; 0x02
    19e4:	b3 83       	std	Z+3, r27	; 0x03
	if(yk.mat[0][0]<320){yk.mat[0][0] = yk.mat[0][0]+360; }
    19e6:	ce 01       	movw	r24, r28
    19e8:	8f 5b       	subi	r24, 0xBF	; 191
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	fc 01       	movw	r30, r24
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	fc 01       	movw	r30, r24
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	fc 01       	movw	r30, r24
    19fa:	80 81       	ld	r24, Z
    19fc:	91 81       	ldd	r25, Z+1	; 0x01
    19fe:	a2 81       	ldd	r26, Z+2	; 0x02
    1a00:	b3 81       	ldd	r27, Z+3	; 0x03
    1a02:	11 e0       	ldi	r17, 0x01	; 1
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 ea       	ldi	r20, 0xA0	; 160
    1a0e:	53 e4       	ldi	r21, 0x43	; 67
    1a10:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	0c f0       	brlt	.+2      	; 0x1a1a <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x220>
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	11 23       	and	r17, r17
    1a1c:	31 f1       	breq	.+76     	; 0x1a6a <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x270>
    1a1e:	ce 01       	movw	r24, r28
    1a20:	8f 5b       	subi	r24, 0xBF	; 191
    1a22:	9f 4f       	sbci	r25, 0xFF	; 255
    1a24:	fc 01       	movw	r30, r24
    1a26:	80 81       	ld	r24, Z
    1a28:	91 81       	ldd	r25, Z+1	; 0x01
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	00 81       	ld	r16, Z
    1a2e:	11 81       	ldd	r17, Z+1	; 0x01
    1a30:	ce 01       	movw	r24, r28
    1a32:	8f 5b       	subi	r24, 0xBF	; 191
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	fc 01       	movw	r30, r24
    1a38:	80 81       	ld	r24, Z
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	fc 01       	movw	r30, r24
    1a44:	80 81       	ld	r24, Z
    1a46:	91 81       	ldd	r25, Z+1	; 0x01
    1a48:	a2 81       	ldd	r26, Z+2	; 0x02
    1a4a:	b3 81       	ldd	r27, Z+3	; 0x03
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	cd 01       	movw	r24, r26
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	44 eb       	ldi	r20, 0xB4	; 180
    1a56:	53 e4       	ldi	r21, 0x43	; 67
    1a58:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	f8 01       	movw	r30, r16
    1a62:	80 83       	st	Z, r24
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	a2 83       	std	Z+2, r26	; 0x02
    1a68:	b3 83       	std	Z+3, r27	; 0x03
		
	if(yk.mat[1][1]>320){yk.mat[1][1] = yk.mat[1][1]-360; }
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	8f 5b       	subi	r24, 0xBF	; 191
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	fc 01       	movw	r30, r24
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	02 96       	adiw	r24, 0x02	; 2
    1a78:	fc 01       	movw	r30, r24
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	04 96       	adiw	r24, 0x04	; 4
    1a80:	fc 01       	movw	r30, r24
    1a82:	80 81       	ld	r24, Z
    1a84:	91 81       	ldd	r25, Z+1	; 0x01
    1a86:	a2 81       	ldd	r26, Z+2	; 0x02
    1a88:	b3 81       	ldd	r27, Z+3	; 0x03
    1a8a:	11 e0       	ldi	r17, 0x01	; 1
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 ea       	ldi	r20, 0xA0	; 160
    1a96:	53 e4       	ldi	r21, 0x43	; 67
    1a98:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1a9c:	18 16       	cp	r1, r24
    1a9e:	0c f0       	brlt	.+2      	; 0x1aa2 <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x2a8>
    1aa0:	10 e0       	ldi	r17, 0x00	; 0
    1aa2:	11 23       	and	r17, r17
    1aa4:	61 f1       	breq	.+88     	; 0x1afe <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x304>
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	8f 5b       	subi	r24, 0xBF	; 191
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	fc 01       	movw	r30, r24
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	02 96       	adiw	r24, 0x02	; 2
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    1aba:	8c 01       	movw	r16, r24
    1abc:	0c 5f       	subi	r16, 0xFC	; 252
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	8f 5b       	subi	r24, 0xBF	; 191
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	02 96       	adiw	r24, 0x02	; 2
    1ace:	fc 01       	movw	r30, r24
    1ad0:	80 81       	ld	r24, Z
    1ad2:	91 81       	ldd	r25, Z+1	; 0x01
    1ad4:	04 96       	adiw	r24, 0x04	; 4
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	a2 81       	ldd	r26, Z+2	; 0x02
    1ade:	b3 81       	ldd	r27, Z+3	; 0x03
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	44 eb       	ldi	r20, 0xB4	; 180
    1aea:	53 e4       	ldi	r21, 0x43	; 67
    1aec:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	f8 01       	movw	r30, r16
    1af6:	80 83       	st	Z, r24
    1af8:	91 83       	std	Z+1, r25	; 0x01
    1afa:	a2 83       	std	Z+2, r26	; 0x02
    1afc:	b3 83       	std	Z+3, r27	; 0x03
	if(yk.mat[1][1]<320){yk.mat[1][1] = yk.mat[1][1]+360; }
    1afe:	ce 01       	movw	r24, r28
    1b00:	8f 5b       	subi	r24, 0xBF	; 191
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	fc 01       	movw	r30, r24
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	02 96       	adiw	r24, 0x02	; 2
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	04 96       	adiw	r24, 0x04	; 4
    1b14:	fc 01       	movw	r30, r24
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	a2 81       	ldd	r26, Z+2	; 0x02
    1b1c:	b3 81       	ldd	r27, Z+3	; 0x03
    1b1e:	11 e0       	ldi	r17, 0x01	; 1
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 ea       	ldi	r20, 0xA0	; 160
    1b2a:	53 e4       	ldi	r21, 0x43	; 67
    1b2c:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x33c>
    1b34:	10 e0       	ldi	r17, 0x00	; 0
    1b36:	11 23       	and	r17, r17
    1b38:	61 f1       	breq	.+88     	; 0x1b92 <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x398>
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	8f 5b       	subi	r24, 0xBF	; 191
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	fc 01       	movw	r30, r24
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	02 96       	adiw	r24, 0x02	; 2
    1b48:	fc 01       	movw	r30, r24
    1b4a:	80 81       	ld	r24, Z
    1b4c:	91 81       	ldd	r25, Z+1	; 0x01
    1b4e:	8c 01       	movw	r16, r24
    1b50:	0c 5f       	subi	r16, 0xFC	; 252
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	ce 01       	movw	r24, r28
    1b56:	8f 5b       	subi	r24, 0xBF	; 191
    1b58:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	02 96       	adiw	r24, 0x02	; 2
    1b62:	fc 01       	movw	r30, r24
    1b64:	80 81       	ld	r24, Z
    1b66:	91 81       	ldd	r25, Z+1	; 0x01
    1b68:	04 96       	adiw	r24, 0x04	; 4
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	a2 81       	ldd	r26, Z+2	; 0x02
    1b72:	b3 81       	ldd	r27, Z+3	; 0x03
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	44 eb       	ldi	r20, 0xB4	; 180
    1b7e:	53 e4       	ldi	r21, 0x43	; 67
    1b80:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	f8 01       	movw	r30, r16
    1b8a:	80 83       	st	Z, r24
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	a2 83       	std	Z+2, r26	; 0x02
    1b90:	b3 83       	std	Z+3, r27	; 0x03
		
	if(yk.mat[2][2]>320){yk.mat[2][2] = yk.mat[2][2]-360; }
    1b92:	ce 01       	movw	r24, r28
    1b94:	8f 5b       	subi	r24, 0xBF	; 191
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	fc 01       	movw	r30, r24
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	04 96       	adiw	r24, 0x04	; 4
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	08 96       	adiw	r24, 0x08	; 8
    1ba8:	fc 01       	movw	r30, r24
    1baa:	80 81       	ld	r24, Z
    1bac:	91 81       	ldd	r25, Z+1	; 0x01
    1bae:	a2 81       	ldd	r26, Z+2	; 0x02
    1bb0:	b3 81       	ldd	r27, Z+3	; 0x03
    1bb2:	11 e0       	ldi	r17, 0x01	; 1
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 ea       	ldi	r20, 0xA0	; 160
    1bbe:	53 e4       	ldi	r21, 0x43	; 67
    1bc0:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	0c f0       	brlt	.+2      	; 0x1bca <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x3d0>
    1bc8:	10 e0       	ldi	r17, 0x00	; 0
    1bca:	11 23       	and	r17, r17
    1bcc:	61 f1       	breq	.+88     	; 0x1c26 <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x42c>
    1bce:	ce 01       	movw	r24, r28
    1bd0:	8f 5b       	subi	r24, 0xBF	; 191
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	80 81       	ld	r24, Z
    1bd8:	91 81       	ldd	r25, Z+1	; 0x01
    1bda:	04 96       	adiw	r24, 0x04	; 4
    1bdc:	fc 01       	movw	r30, r24
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	8c 01       	movw	r16, r24
    1be4:	08 5f       	subi	r16, 0xF8	; 248
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	ce 01       	movw	r24, r28
    1bea:	8f 5b       	subi	r24, 0xBF	; 191
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	fc 01       	movw	r30, r24
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	04 96       	adiw	r24, 0x04	; 4
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	08 96       	adiw	r24, 0x08	; 8
    1bfe:	fc 01       	movw	r30, r24
    1c00:	80 81       	ld	r24, Z
    1c02:	91 81       	ldd	r25, Z+1	; 0x01
    1c04:	a2 81       	ldd	r26, Z+2	; 0x02
    1c06:	b3 81       	ldd	r27, Z+3	; 0x03
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	44 eb       	ldi	r20, 0xB4	; 180
    1c12:	53 e4       	ldi	r21, 0x43	; 67
    1c14:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	80 83       	st	Z, r24
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	a2 83       	std	Z+2, r26	; 0x02
    1c24:	b3 83       	std	Z+3, r27	; 0x03
	if(yk.mat[2][2]<320){yk.mat[2][2] = yk.mat[2][2]+360; }
    1c26:	ce 01       	movw	r24, r28
    1c28:	8f 5b       	subi	r24, 0xBF	; 191
    1c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	80 81       	ld	r24, Z
    1c30:	91 81       	ldd	r25, Z+1	; 0x01
    1c32:	04 96       	adiw	r24, 0x04	; 4
    1c34:	fc 01       	movw	r30, r24
    1c36:	80 81       	ld	r24, Z
    1c38:	91 81       	ldd	r25, Z+1	; 0x01
    1c3a:	08 96       	adiw	r24, 0x08	; 8
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	a2 81       	ldd	r26, Z+2	; 0x02
    1c44:	b3 81       	ldd	r27, Z+3	; 0x03
    1c46:	11 e0       	ldi	r17, 0x01	; 1
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 ea       	ldi	r20, 0xA0	; 160
    1c52:	53 e4       	ldi	r21, 0x43	; 67
    1c54:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	0c f0       	brlt	.+2      	; 0x1c5e <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x464>
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
    1c5e:	11 23       	and	r17, r17
    1c60:	61 f1       	breq	.+88     	; 0x1cba <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_+0x4c0>
    1c62:	ce 01       	movw	r24, r28
    1c64:	8f 5b       	subi	r24, 0xBF	; 191
    1c66:	9f 4f       	sbci	r25, 0xFF	; 255
    1c68:	fc 01       	movw	r30, r24
    1c6a:	80 81       	ld	r24, Z
    1c6c:	91 81       	ldd	r25, Z+1	; 0x01
    1c6e:	04 96       	adiw	r24, 0x04	; 4
    1c70:	fc 01       	movw	r30, r24
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	8c 01       	movw	r16, r24
    1c78:	08 5f       	subi	r16, 0xF8	; 248
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	8f 5b       	subi	r24, 0xBF	; 191
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	fc 01       	movw	r30, r24
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	04 96       	adiw	r24, 0x04	; 4
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	08 96       	adiw	r24, 0x08	; 8
    1c92:	fc 01       	movw	r30, r24
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	a2 81       	ldd	r26, Z+2	; 0x02
    1c9a:	b3 81       	ldd	r27, Z+3	; 0x03
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	44 eb       	ldi	r20, 0xB4	; 180
    1ca6:	53 e4       	ldi	r21, 0x43	; 67
    1ca8:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	80 83       	st	Z, r24
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	a2 83       	std	Z+2, r26	; 0x02
    1cb8:	b3 83       	std	Z+3, r27	; 0x03
	// Innovation covariance
	*S = *Pk + R ;
    1cba:	ce 01       	movw	r24, r28
    1cbc:	85 96       	adiw	r24, 0x25	; 37
    1cbe:	9e 01       	movw	r18, r28
    1cc0:	27 5b       	subi	r18, 0xB7	; 183
    1cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc4:	f9 01       	movw	r30, r18
    1cc6:	40 81       	ld	r20, Z
    1cc8:	51 81       	ldd	r21, Z+1	; 0x01
    1cca:	9e 01       	movw	r18, r28
    1ccc:	25 5b       	subi	r18, 0xB5	; 181
    1cce:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd0:	f9 01       	movw	r30, r18
    1cd2:	20 81       	ld	r18, Z
    1cd4:	31 81       	ldd	r19, Z+1	; 0x01
    1cd6:	ba 01       	movw	r22, r20
    1cd8:	a9 01       	movw	r20, r18
    1cda:	0e 94 6f 19 	call	0x32de	; 0x32de <_ZplRK6MatrixS1_>
    1cde:	ce 01       	movw	r24, r28
    1ce0:	81 5b       	subi	r24, 0xB1	; 177
    1ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	9e 01       	movw	r18, r28
    1cec:	2b 5d       	subi	r18, 0xDB	; 219
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	0e 94 ad 18 	call	0x315a	; 0x315a <_ZN6MatrixaSERKS_>
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	85 96       	adiw	r24, 0x25	; 37
    1cfa:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	// Optimal Kalman Gain
	*K = *Pk * ( S->invert_3x3() );
    1cfe:	ce 01       	movw	r24, r28
    1d00:	49 96       	adiw	r24, 0x19	; 25
    1d02:	9e 01       	movw	r18, r28
    1d04:	21 5b       	subi	r18, 0xB1	; 177
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	f9 01       	movw	r30, r18
    1d0a:	20 81       	ld	r18, Z
    1d0c:	31 81       	ldd	r19, Z+1	; 0x01
    1d0e:	b9 01       	movw	r22, r18
    1d10:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <_ZN6Matrix10invert_3x3Ev>
    1d14:	ce 01       	movw	r24, r28
    1d16:	4f 96       	adiw	r24, 0x1f	; 31
    1d18:	9e 01       	movw	r18, r28
    1d1a:	27 5b       	subi	r18, 0xB7	; 183
    1d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1e:	f9 01       	movw	r30, r18
    1d20:	40 81       	ld	r20, Z
    1d22:	51 81       	ldd	r21, Z+1	; 0x01
    1d24:	9e 01       	movw	r18, r28
    1d26:	27 5e       	subi	r18, 0xE7	; 231
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	ba 01       	movw	r22, r20
    1d2c:	a9 01       	movw	r20, r18
    1d2e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <_ZmlRK6MatrixS1_>
    1d32:	ce 01       	movw	r24, r28
    1d34:	8f 5a       	subi	r24, 0xAF	; 175
    1d36:	9f 4f       	sbci	r25, 0xFF	; 255
    1d38:	fc 01       	movw	r30, r24
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	9e 01       	movw	r18, r28
    1d40:	21 5e       	subi	r18, 0xE1	; 225
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	b9 01       	movw	r22, r18
    1d46:	0e 94 ad 18 	call	0x315a	; 0x315a <_ZN6MatrixaSERKS_>
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	4f 96       	adiw	r24, 0x1f	; 31
    1d4e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
    1d52:	ce 01       	movw	r24, r28
    1d54:	49 96       	adiw	r24, 0x19	; 25
    1d56:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	// Updated state estimate
	*xk = *xk + (*K * yk);
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	0d 96       	adiw	r24, 0x0d	; 13
    1d5e:	9e 01       	movw	r18, r28
    1d60:	2f 5a       	subi	r18, 0xAF	; 175
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	f9 01       	movw	r30, r18
    1d66:	40 81       	ld	r20, Z
    1d68:	51 81       	ldd	r21, Z+1	; 0x01
    1d6a:	9e 01       	movw	r18, r28
    1d6c:	23 5c       	subi	r18, 0xC3	; 195
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d70:	ba 01       	movw	r22, r20
    1d72:	a9 01       	movw	r20, r18
    1d74:	0e 94 c3 1a 	call	0x3586	; 0x3586 <_ZmlRK6MatrixS1_>
    1d78:	ce 01       	movw	r24, r28
    1d7a:	43 96       	adiw	r24, 0x13	; 19
    1d7c:	9e 01       	movw	r18, r28
    1d7e:	2d 5b       	subi	r18, 0xBD	; 189
    1d80:	3f 4f       	sbci	r19, 0xFF	; 255
    1d82:	f9 01       	movw	r30, r18
    1d84:	40 81       	ld	r20, Z
    1d86:	51 81       	ldd	r21, Z+1	; 0x01
    1d88:	9e 01       	movw	r18, r28
    1d8a:	23 5f       	subi	r18, 0xF3	; 243
    1d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8e:	ba 01       	movw	r22, r20
    1d90:	a9 01       	movw	r20, r18
    1d92:	0e 94 6f 19 	call	0x32de	; 0x32de <_ZplRK6MatrixS1_>
    1d96:	ce 01       	movw	r24, r28
    1d98:	8d 5b       	subi	r24, 0xBD	; 189
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	9e 01       	movw	r18, r28
    1da4:	2d 5e       	subi	r18, 0xED	; 237
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	b9 01       	movw	r22, r18
    1daa:	0e 94 ad 18 	call	0x315a	; 0x315a <_ZN6MatrixaSERKS_>
    1dae:	ce 01       	movw	r24, r28
    1db0:	43 96       	adiw	r24, 0x13	; 19
    1db2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
    1db6:	ce 01       	movw	r24, r28
    1db8:	0d 96       	adiw	r24, 0x0d	; 13
    1dba:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	// Updated estimate covariance
	*Pk = ( I - *K) * (*Pk);
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	8d 5a       	subi	r24, 0xAD	; 173
    1dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	40 81       	ld	r20, Z
    1dc8:	51 81       	ldd	r21, Z+1	; 0x01
    1dca:	ce 01       	movw	r24, r28
    1dcc:	8f 5a       	subi	r24, 0xAF	; 175
    1dce:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	20 81       	ld	r18, Z
    1dd4:	31 81       	ldd	r19, Z+1	; 0x01
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	01 96       	adiw	r24, 0x01	; 1
    1dda:	ba 01       	movw	r22, r20
    1ddc:	a9 01       	movw	r20, r18
    1dde:	0e 94 19 1a 	call	0x3432	; 0x3432 <_ZmiRK6MatrixS1_>
    1de2:	ce 01       	movw	r24, r28
    1de4:	07 96       	adiw	r24, 0x07	; 7
    1de6:	9e 01       	movw	r18, r28
    1de8:	27 5b       	subi	r18, 0xB7	; 183
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	f9 01       	movw	r30, r18
    1dee:	20 81       	ld	r18, Z
    1df0:	31 81       	ldd	r19, Z+1	; 0x01
    1df2:	ae 01       	movw	r20, r28
    1df4:	4f 5f       	subi	r20, 0xFF	; 255
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	ba 01       	movw	r22, r20
    1dfa:	a9 01       	movw	r20, r18
    1dfc:	0e 94 c3 1a 	call	0x3586	; 0x3586 <_ZmlRK6MatrixS1_>
    1e00:	ce 01       	movw	r24, r28
    1e02:	87 5b       	subi	r24, 0xB7	; 183
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	fc 01       	movw	r30, r24
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	9e 01       	movw	r18, r28
    1e0e:	29 5f       	subi	r18, 0xF9	; 249
    1e10:	3f 4f       	sbci	r19, 0xFF	; 255
    1e12:	b9 01       	movw	r22, r18
    1e14:	0e 94 ad 18 	call	0x315a	; 0x315a <_ZN6MatrixaSERKS_>
    1e18:	ce 01       	movw	r24, r28
    1e1a:	07 96       	adiw	r24, 0x07	; 7
    1e1c:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
    1e20:	ce 01       	movw	r24, r28
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	// Steps and variables names are based on the wikipedia page
	// http://en.wikipedia.org/wiki/Kalman_filter
	
	
////////  Variables declaration
Matrix yk  (3,3); // Observation
    1e28:	ce 01       	movw	r24, r28
    1e2a:	cd 96       	adiw	r24, 0x3d	; 61
    1e2c:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	*xk = *xk + (*K * yk);
	// Updated estimate covariance
	*Pk = ( I - *K) * (*Pk);

	
    1e30:	cc 5a       	subi	r28, 0xAC	; 172
    1e32:	df 4f       	sbci	r29, 0xFF	; 255
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	ff 90       	pop	r15
    1e48:	ef 90       	pop	r14
    1e4a:	df 90       	pop	r13
    1e4c:	cf 90       	pop	r12
    1e4e:	bf 90       	pop	r11
    1e50:	af 90       	pop	r10
    1e52:	9f 90       	pop	r9
    1e54:	8f 90       	pop	r8
    1e56:	08 95       	ret

00001e58 <main>:
	Matrix* Kptr = &K;	
 

 
 int main(void)
 {
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	2e 97       	sbiw	r28, 0x0e	; 14
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61

	// Initialization
	initialize();				// Global function for all initializations
    1e70:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_Z10initializev>
	anglesGyroGlobal ={0,0,0};	 
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	dc 01       	movw	r26, r24
    1e7a:	80 93 a6 01 	sts	0x01A6, r24
    1e7e:	90 93 a7 01 	sts	0x01A7, r25
    1e82:	a0 93 a8 01 	sts	0x01A8, r26
    1e86:	b0 93 a9 01 	sts	0x01A9, r27
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	dc 01       	movw	r26, r24
    1e90:	80 93 aa 01 	sts	0x01AA, r24
    1e94:	90 93 ab 01 	sts	0x01AB, r25
    1e98:	a0 93 ac 01 	sts	0x01AC, r26
    1e9c:	b0 93 ad 01 	sts	0x01AD, r27
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	80 93 ae 01 	sts	0x01AE, r24
    1eaa:	90 93 af 01 	sts	0x01AF, r25
    1eae:	a0 93 b0 01 	sts	0x01B0, r26
    1eb2:	b0 93 b1 01 	sts	0x01B1, r27
	USART_Send_string("Begin\n");
    1eb6:	83 e3       	ldi	r24, 0x33	; 51
    1eb8:	91 e0       	ldi	r25, 0x01	; 1
    1eba:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a8 ec       	ldi	r26, 0xC8	; 200
    1ec4:	b2 e4       	ldi	r27, 0x42	; 66
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	ab 83       	std	Y+3, r26	; 0x03
    1ecc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	69 81       	ldd	r22, Y+1	; 0x01
    1ed0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a e7       	ldi	r20, 0x7A	; 122
    1edc:	55 e4       	ldi	r21, 0x45	; 69
    1ede:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	af 83       	std	Y+7, r26	; 0x07
    1eec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1eee:	11 e0       	ldi	r17, 0x01	; 1
    1ef0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ef2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ef4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef6:	98 85       	ldd	r25, Y+8	; 0x08
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <main+0xb2>
    1f08:	10 e0       	ldi	r17, 0x00	; 0
    1f0a:	11 23       	and	r17, r17
    1f0c:	29 f0       	breq	.+10     	; 0x1f18 <main+0xc0>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9a 87       	std	Y+10, r25	; 0x0a
    1f14:	89 87       	std	Y+9, r24	; 0x09
    1f16:	4a c0       	rjmp	.+148    	; 0x1fac <main+0x154>
	else if (__tmp > 65535)
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	6d 81       	ldd	r22, Y+5	; 0x05
    1f1c:	7e 81       	ldd	r23, Y+6	; 0x06
    1f1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f20:	98 85       	ldd	r25, Y+8	; 0x08
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <main+0xdc>
    1f32:	10 e0       	ldi	r17, 0x00	; 0
    1f34:	11 23       	and	r17, r17
    1f36:	81 f1       	breq	.+96     	; 0x1f98 <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	69 81       	ldd	r22, Y+1	; 0x01
    1f3a:	7a 81       	ldd	r23, Y+2	; 0x02
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 15 2c 	call	0x582a	; 0x582a <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	9a 87       	std	Y+10, r25	; 0x0a
    1f5e:	89 87       	std	Y+9, r24	; 0x09
    1f60:	12 c0       	rjmp	.+36     	; 0x1f86 <main+0x12e>
    1f62:	80 e9       	ldi	r24, 0x90	; 144
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	9c 87       	std	Y+12, r25	; 0x0c
    1f68:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1f6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f6e:	8c 01       	movw	r16, r24
    1f70:	c8 01       	movw	r24, r16
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <main+0x11a>
    1f76:	8c 01       	movw	r16, r24
    1f78:	1c 87       	std	Y+12, r17	; 0x0c
    1f7a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	89 85       	ldd	r24, Y+9	; 0x09
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	9a 87       	std	Y+10, r25	; 0x0a
    1f84:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	21 e0       	ldi	r18, 0x01	; 1
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <main+0x13a>
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	22 23       	and	r18, r18
    1f94:	31 f7       	brne	.-52     	; 0x1f62 <main+0x10a>
    1f96:	17 c0       	rjmp	.+46     	; 0x1fc6 <main+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f98:	6d 81       	ldd	r22, Y+5	; 0x05
    1f9a:	7e 81       	ldd	r23, Y+6	; 0x06
    1f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f9e:	98 85       	ldd	r25, Y+8	; 0x08
    1fa0:	0e 94 15 2c 	call	0x582a	; 0x582a <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9a 87       	std	Y+10, r25	; 0x0a
    1faa:	89 87       	std	Y+9, r24	; 0x09
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	9e 87       	std	Y+14, r25	; 0x0e
    1fb2:	8d 87       	std	Y+13, r24	; 0x0d
    1fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb8:	8c 01       	movw	r16, r24
    1fba:	f8 01       	movw	r30, r16
    1fbc:	31 97       	sbiw	r30, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <main+0x164>
    1fc0:	8f 01       	movw	r16, r30
    1fc2:	1e 87       	std	Y+14, r17	; 0x0e
    1fc4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);	
		
		
	//Configure and initalize the sensors
	compass_config();
    1fc6:	0e 94 02 22 	call	0x4404	; 0x4404 <_Z14compass_configv>
	gyro_config();
    1fca:	0e 94 57 26 	call	0x4cae	; 0x4cae <_Z11gyro_configv>
	
	
	// Kalman filter matrix initializations
	Pk.mat[0][0]=1; Pk.mat[1][1]=1; Pk.mat[2][2]=1;
    1fce:	80 91 f2 01 	lds	r24, 0x01F2
    1fd2:	90 91 f3 01 	lds	r25, 0x01F3
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	20 81       	ld	r18, Z
    1fda:	31 81       	ldd	r19, Z+1	; 0x01
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	a0 e8       	ldi	r26, 0x80	; 128
    1fe2:	bf e3       	ldi	r27, 0x3F	; 63
    1fe4:	f9 01       	movw	r30, r18
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	a2 83       	std	Z+2, r26	; 0x02
    1fec:	b3 83       	std	Z+3, r27	; 0x03
    1fee:	80 91 f2 01 	lds	r24, 0x01F2
    1ff2:	90 91 f3 01 	lds	r25, 0x01F3
    1ff6:	02 96       	adiw	r24, 0x02	; 2
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	9c 01       	movw	r18, r24
    2000:	2c 5f       	subi	r18, 0xFC	; 252
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a0 e8       	ldi	r26, 0x80	; 128
    200a:	bf e3       	ldi	r27, 0x3F	; 63
    200c:	f9 01       	movw	r30, r18
    200e:	80 83       	st	Z, r24
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	a2 83       	std	Z+2, r26	; 0x02
    2014:	b3 83       	std	Z+3, r27	; 0x03
    2016:	80 91 f2 01 	lds	r24, 0x01F2
    201a:	90 91 f3 01 	lds	r25, 0x01F3
    201e:	04 96       	adiw	r24, 0x04	; 4
    2020:	fc 01       	movw	r30, r24
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	9c 01       	movw	r18, r24
    2028:	28 5f       	subi	r18, 0xF8	; 248
    202a:	3f 4f       	sbci	r19, 0xFF	; 255
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e8       	ldi	r26, 0x80	; 128
    2032:	bf e3       	ldi	r27, 0x3F	; 63
    2034:	f9 01       	movw	r30, r18
    2036:	80 83       	st	Z, r24
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	a2 83       	std	Z+2, r26	; 0x02
    203c:	b3 83       	std	Z+3, r27	; 0x03
	I.mat[0][0]=1; I.mat[1][1]=1; I.mat[2][2]=1;					// Identity matrix
    203e:	80 91 ec 01 	lds	r24, 0x01EC
    2042:	90 91 ed 01 	lds	r25, 0x01ED
    2046:	fc 01       	movw	r30, r24
    2048:	20 81       	ld	r18, Z
    204a:	31 81       	ldd	r19, Z+1	; 0x01
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a0 e8       	ldi	r26, 0x80	; 128
    2052:	bf e3       	ldi	r27, 0x3F	; 63
    2054:	f9 01       	movw	r30, r18
    2056:	80 83       	st	Z, r24
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	a2 83       	std	Z+2, r26	; 0x02
    205c:	b3 83       	std	Z+3, r27	; 0x03
    205e:	80 91 ec 01 	lds	r24, 0x01EC
    2062:	90 91 ed 01 	lds	r25, 0x01ED
    2066:	02 96       	adiw	r24, 0x02	; 2
    2068:	fc 01       	movw	r30, r24
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	9c 01       	movw	r18, r24
    2070:	2c 5f       	subi	r18, 0xFC	; 252
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a0 e8       	ldi	r26, 0x80	; 128
    207a:	bf e3       	ldi	r27, 0x3F	; 63
    207c:	f9 01       	movw	r30, r18
    207e:	80 83       	st	Z, r24
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	a2 83       	std	Z+2, r26	; 0x02
    2084:	b3 83       	std	Z+3, r27	; 0x03
    2086:	80 91 ec 01 	lds	r24, 0x01EC
    208a:	90 91 ed 01 	lds	r25, 0x01ED
    208e:	04 96       	adiw	r24, 0x04	; 4
    2090:	fc 01       	movw	r30, r24
    2092:	80 81       	ld	r24, Z
    2094:	91 81       	ldd	r25, Z+1	; 0x01
    2096:	9c 01       	movw	r18, r24
    2098:	28 5f       	subi	r18, 0xF8	; 248
    209a:	3f 4f       	sbci	r19, 0xFF	; 255
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a0 e8       	ldi	r26, 0x80	; 128
    20a2:	bf e3       	ldi	r27, 0x3F	; 63
    20a4:	f9 01       	movw	r30, r18
    20a6:	80 83       	st	Z, r24
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	a2 83       	std	Z+2, r26	; 0x02
    20ac:	b3 83       	std	Z+3, r27	; 0x03
	
	
	///////////////// COVARIANCE NOISE MATRICES /////////////////
	R.mat[0][0]=0.5; R.mat[1][1]=0.5; R.mat[2][2]=0.01;				// Measurement noise (accelerometer)
    20ae:	80 91 f8 01 	lds	r24, 0x01F8
    20b2:	90 91 f9 01 	lds	r25, 0x01F9
    20b6:	fc 01       	movw	r30, r24
    20b8:	20 81       	ld	r18, Z
    20ba:	31 81       	ldd	r19, Z+1	; 0x01
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a0 e0       	ldi	r26, 0x00	; 0
    20c2:	bf e3       	ldi	r27, 0x3F	; 63
    20c4:	f9 01       	movw	r30, r18
    20c6:	80 83       	st	Z, r24
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	a2 83       	std	Z+2, r26	; 0x02
    20cc:	b3 83       	std	Z+3, r27	; 0x03
    20ce:	80 91 f8 01 	lds	r24, 0x01F8
    20d2:	90 91 f9 01 	lds	r25, 0x01F9
    20d6:	02 96       	adiw	r24, 0x02	; 2
    20d8:	fc 01       	movw	r30, r24
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	9c 01       	movw	r18, r24
    20e0:	2c 5f       	subi	r18, 0xFC	; 252
    20e2:	3f 4f       	sbci	r19, 0xFF	; 255
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	a0 e0       	ldi	r26, 0x00	; 0
    20ea:	bf e3       	ldi	r27, 0x3F	; 63
    20ec:	f9 01       	movw	r30, r18
    20ee:	80 83       	st	Z, r24
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	a2 83       	std	Z+2, r26	; 0x02
    20f4:	b3 83       	std	Z+3, r27	; 0x03
    20f6:	80 91 f8 01 	lds	r24, 0x01F8
    20fa:	90 91 f9 01 	lds	r25, 0x01F9
    20fe:	04 96       	adiw	r24, 0x04	; 4
    2100:	fc 01       	movw	r30, r24
    2102:	80 81       	ld	r24, Z
    2104:	91 81       	ldd	r25, Z+1	; 0x01
    2106:	9c 01       	movw	r18, r24
    2108:	28 5f       	subi	r18, 0xF8	; 248
    210a:	3f 4f       	sbci	r19, 0xFF	; 255
    210c:	8a e0       	ldi	r24, 0x0A	; 10
    210e:	97 ed       	ldi	r25, 0xD7	; 215
    2110:	a3 e2       	ldi	r26, 0x23	; 35
    2112:	bc e3       	ldi	r27, 0x3C	; 60
    2114:	f9 01       	movw	r30, r18
    2116:	80 83       	st	Z, r24
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	a2 83       	std	Z+2, r26	; 0x02
    211c:	b3 83       	std	Z+3, r27	; 0x03
	Q.mat[0][0]=0.005;  Q.mat[1][1]=0.005;	Q.mat[2][2]=0.0001;	// Processing noise (gyro)
    211e:	80 91 fe 01 	lds	r24, 0x01FE
    2122:	90 91 ff 01 	lds	r25, 0x01FF
    2126:	fc 01       	movw	r30, r24
    2128:	20 81       	ld	r18, Z
    212a:	31 81       	ldd	r19, Z+1	; 0x01
    212c:	8a e0       	ldi	r24, 0x0A	; 10
    212e:	97 ed       	ldi	r25, 0xD7	; 215
    2130:	a3 ea       	ldi	r26, 0xA3	; 163
    2132:	bb e3       	ldi	r27, 0x3B	; 59
    2134:	f9 01       	movw	r30, r18
    2136:	80 83       	st	Z, r24
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	a2 83       	std	Z+2, r26	; 0x02
    213c:	b3 83       	std	Z+3, r27	; 0x03
    213e:	80 91 fe 01 	lds	r24, 0x01FE
    2142:	90 91 ff 01 	lds	r25, 0x01FF
    2146:	02 96       	adiw	r24, 0x02	; 2
    2148:	fc 01       	movw	r30, r24
    214a:	80 81       	ld	r24, Z
    214c:	91 81       	ldd	r25, Z+1	; 0x01
    214e:	9c 01       	movw	r18, r24
    2150:	2c 5f       	subi	r18, 0xFC	; 252
    2152:	3f 4f       	sbci	r19, 0xFF	; 255
    2154:	8a e0       	ldi	r24, 0x0A	; 10
    2156:	97 ed       	ldi	r25, 0xD7	; 215
    2158:	a3 ea       	ldi	r26, 0xA3	; 163
    215a:	bb e3       	ldi	r27, 0x3B	; 59
    215c:	f9 01       	movw	r30, r18
    215e:	80 83       	st	Z, r24
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	a2 83       	std	Z+2, r26	; 0x02
    2164:	b3 83       	std	Z+3, r27	; 0x03
    2166:	80 91 fe 01 	lds	r24, 0x01FE
    216a:	90 91 ff 01 	lds	r25, 0x01FF
    216e:	04 96       	adiw	r24, 0x04	; 4
    2170:	fc 01       	movw	r30, r24
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	9c 01       	movw	r18, r24
    2178:	28 5f       	subi	r18, 0xF8	; 248
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	87 e1       	ldi	r24, 0x17	; 23
    217e:	97 eb       	ldi	r25, 0xB7	; 183
    2180:	a1 ed       	ldi	r26, 0xD1	; 209
    2182:	b8 e3       	ldi	r27, 0x38	; 56
    2184:	f9 01       	movw	r30, r18
    2186:	80 83       	st	Z, r24
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	a2 83       	std	Z+2, r26	; 0x02
    218c:	b3 83       	std	Z+3, r27	; 0x03
		
	
	///////////////// ///////////// /////////////////
	///////////////// INTERRUPT USE /////////////////
	// Comment to deactivate interrupts, uncomment to work with timer1 interrupts
	 sei();
    218e:	78 94       	sei
	///////////////// ///////////// /////////////////
	
	while(1) 
    2190:	ff cf       	rjmp	.-2      	; 0x2190 <main+0x338>

00002192 <_Z6filterv>:




void filter(void)
{		
    2192:	8f 92       	push	r8
    2194:	9f 92       	push	r9
    2196:	af 92       	push	r10
    2198:	bf 92       	push	r11
    219a:	cf 92       	push	r12
    219c:	df 92       	push	r13
    219e:	ef 92       	push	r14
    21a0:	ff 92       	push	r15
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	aa 97       	sbiw	r28, 0x2a	; 42
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
		// Get new sensor values
		anglesAccel = accelcompass_angle_acquisition();
    21ba:	ce 01       	movw	r24, r28
    21bc:	4f 96       	adiw	r24, 0x1f	; 31
    21be:	0e 94 de 03 	call	0x7bc	; 0x7bc <_Z30accelcompass_angle_acquisitionv>
    21c2:	82 eb       	ldi	r24, 0xB2	; 178
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	9e 01       	movw	r18, r28
    21c8:	21 5e       	subi	r18, 0xE1	; 225
    21ca:	3f 4f       	sbci	r19, 0xFF	; 255
    21cc:	4c e0       	ldi	r20, 0x0C	; 12
    21ce:	f9 01       	movw	r30, r18
    21d0:	00 80       	ld	r0, Z
    21d2:	2f 5f       	subi	r18, 0xFF	; 255
    21d4:	3f 4f       	sbci	r19, 0xFF	; 255
    21d6:	fc 01       	movw	r30, r24
    21d8:	00 82       	st	Z, r0
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	41 50       	subi	r20, 0x01	; 1
    21de:	44 23       	and	r20, r20
    21e0:	b1 f7       	brne	.-20     	; 0x21ce <_Z6filterv+0x3c>
		anglesGyro = gyro_angle_acquisition();
    21e2:	ce 01       	movw	r24, r28
    21e4:	4f 96       	adiw	r24, 0x1f	; 31
    21e6:	0e 94 a1 08 	call	0x1142	; 0x1142 <_Z22gyro_angle_acquisitionv>
    21ea:	8e eb       	ldi	r24, 0xBE	; 190
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	9e 01       	movw	r18, r28
    21f0:	21 5e       	subi	r18, 0xE1	; 225
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255
    21f4:	4c e0       	ldi	r20, 0x0C	; 12
    21f6:	f9 01       	movw	r30, r18
    21f8:	00 80       	ld	r0, Z
    21fa:	2f 5f       	subi	r18, 0xFF	; 255
    21fc:	3f 4f       	sbci	r19, 0xFF	; 255
    21fe:	fc 01       	movw	r30, r24
    2200:	00 82       	st	Z, r0
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	41 50       	subi	r20, 0x01	; 1
    2206:	44 23       	and	r20, r20
    2208:	b1 f7       	brne	.-20     	; 0x21f6 <_Z6filterv+0x64>
		
		// Put those values in the right measurement/processing matrices
		xnew.mat[0][0] = anglesAccel.x; xnew.mat[1][1] = anglesAccel.y; xnew.mat[2][2] = anglesAccel.z;
    220a:	80 91 e0 01 	lds	r24, 0x01E0
    220e:	90 91 e1 01 	lds	r25, 0x01E1
    2212:	fc 01       	movw	r30, r24
    2214:	20 81       	ld	r18, Z
    2216:	31 81       	ldd	r19, Z+1	; 0x01
    2218:	80 91 b2 01 	lds	r24, 0x01B2
    221c:	90 91 b3 01 	lds	r25, 0x01B3
    2220:	a0 91 b4 01 	lds	r26, 0x01B4
    2224:	b0 91 b5 01 	lds	r27, 0x01B5
    2228:	f9 01       	movw	r30, r18
    222a:	80 83       	st	Z, r24
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	a2 83       	std	Z+2, r26	; 0x02
    2230:	b3 83       	std	Z+3, r27	; 0x03
    2232:	80 91 e0 01 	lds	r24, 0x01E0
    2236:	90 91 e1 01 	lds	r25, 0x01E1
    223a:	02 96       	adiw	r24, 0x02	; 2
    223c:	fc 01       	movw	r30, r24
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	9c 01       	movw	r18, r24
    2244:	2c 5f       	subi	r18, 0xFC	; 252
    2246:	3f 4f       	sbci	r19, 0xFF	; 255
    2248:	80 91 b6 01 	lds	r24, 0x01B6
    224c:	90 91 b7 01 	lds	r25, 0x01B7
    2250:	a0 91 b8 01 	lds	r26, 0x01B8
    2254:	b0 91 b9 01 	lds	r27, 0x01B9
    2258:	f9 01       	movw	r30, r18
    225a:	80 83       	st	Z, r24
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	a2 83       	std	Z+2, r26	; 0x02
    2260:	b3 83       	std	Z+3, r27	; 0x03
    2262:	80 91 e0 01 	lds	r24, 0x01E0
    2266:	90 91 e1 01 	lds	r25, 0x01E1
    226a:	04 96       	adiw	r24, 0x04	; 4
    226c:	fc 01       	movw	r30, r24
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	9c 01       	movw	r18, r24
    2274:	28 5f       	subi	r18, 0xF8	; 248
    2276:	3f 4f       	sbci	r19, 0xFF	; 255
    2278:	80 91 ba 01 	lds	r24, 0x01BA
    227c:	90 91 bb 01 	lds	r25, 0x01BB
    2280:	a0 91 bc 01 	lds	r26, 0x01BC
    2284:	b0 91 bd 01 	lds	r27, 0x01BD
    2288:	f9 01       	movw	r30, r18
    228a:	80 83       	st	Z, r24
    228c:	91 83       	std	Z+1, r25	; 0x01
    228e:	a2 83       	std	Z+2, r26	; 0x02
    2290:	b3 83       	std	Z+3, r27	; 0x03
		uk.mat[0][0] = anglesGyro.y;  uk.mat[1][1] = -anglesGyro.x;  uk.mat[2][2] = -anglesGyro.z;
    2292:	80 91 e6 01 	lds	r24, 0x01E6
    2296:	90 91 e7 01 	lds	r25, 0x01E7
    229a:	fc 01       	movw	r30, r24
    229c:	20 81       	ld	r18, Z
    229e:	31 81       	ldd	r19, Z+1	; 0x01
    22a0:	80 91 c2 01 	lds	r24, 0x01C2
    22a4:	90 91 c3 01 	lds	r25, 0x01C3
    22a8:	a0 91 c4 01 	lds	r26, 0x01C4
    22ac:	b0 91 c5 01 	lds	r27, 0x01C5
    22b0:	f9 01       	movw	r30, r18
    22b2:	80 83       	st	Z, r24
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	a2 83       	std	Z+2, r26	; 0x02
    22b8:	b3 83       	std	Z+3, r27	; 0x03
    22ba:	80 91 e6 01 	lds	r24, 0x01E6
    22be:	90 91 e7 01 	lds	r25, 0x01E7
    22c2:	02 96       	adiw	r24, 0x02	; 2
    22c4:	fc 01       	movw	r30, r24
    22c6:	80 81       	ld	r24, Z
    22c8:	91 81       	ldd	r25, Z+1	; 0x01
    22ca:	9c 01       	movw	r18, r24
    22cc:	2c 5f       	subi	r18, 0xFC	; 252
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
    22d0:	80 91 be 01 	lds	r24, 0x01BE
    22d4:	90 91 bf 01 	lds	r25, 0x01BF
    22d8:	a0 91 c0 01 	lds	r26, 0x01C0
    22dc:	b0 91 c1 01 	lds	r27, 0x01C1
    22e0:	b0 58       	subi	r27, 0x80	; 128
    22e2:	f9 01       	movw	r30, r18
    22e4:	80 83       	st	Z, r24
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	a2 83       	std	Z+2, r26	; 0x02
    22ea:	b3 83       	std	Z+3, r27	; 0x03
    22ec:	80 91 e6 01 	lds	r24, 0x01E6
    22f0:	90 91 e7 01 	lds	r25, 0x01E7
    22f4:	04 96       	adiw	r24, 0x04	; 4
    22f6:	fc 01       	movw	r30, r24
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	9c 01       	movw	r18, r24
    22fe:	28 5f       	subi	r18, 0xF8	; 248
    2300:	3f 4f       	sbci	r19, 0xFF	; 255
    2302:	80 91 c6 01 	lds	r24, 0x01C6
    2306:	90 91 c7 01 	lds	r25, 0x01C7
    230a:	a0 91 c8 01 	lds	r26, 0x01C8
    230e:	b0 91 c9 01 	lds	r27, 0x01C9
    2312:	b0 58       	subi	r27, 0x80	; 128
    2314:	f9 01       	movw	r30, r18
    2316:	80 83       	st	Z, r24
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	a2 83       	std	Z+2, r26	; 0x02
    231c:	b3 83       	std	Z+3, r27	; 0x03
	
		// Run the filter
		KalmanFilter( xkptr,  xnew,  uk,  Pkptr,  R, Q, Sptr,  Kptr,  I);
    231e:	e0 90 2b 01 	lds	r14, 0x012B
    2322:	f0 90 2c 01 	lds	r15, 0x012C
    2326:	ce 01       	movw	r24, r28
    2328:	49 96       	adiw	r24, 0x19	; 25
    232a:	2c ed       	ldi	r18, 0xDC	; 220
    232c:	31 e0       	ldi	r19, 0x01	; 1
    232e:	b9 01       	movw	r22, r18
    2330:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <_ZN6MatrixC1ERKS_>
    2334:	ce 01       	movw	r24, r28
    2336:	43 96       	adiw	r24, 0x13	; 19
    2338:	22 ee       	ldi	r18, 0xE2	; 226
    233a:	31 e0       	ldi	r19, 0x01	; 1
    233c:	b9 01       	movw	r22, r18
    233e:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <_ZN6MatrixC1ERKS_>
    2342:	00 91 2d 01 	lds	r16, 0x012D
    2346:	10 91 2e 01 	lds	r17, 0x012E
    234a:	ce 01       	movw	r24, r28
    234c:	0d 96       	adiw	r24, 0x0d	; 13
    234e:	24 ef       	ldi	r18, 0xF4	; 244
    2350:	31 e0       	ldi	r19, 0x01	; 1
    2352:	b9 01       	movw	r22, r18
    2354:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <_ZN6MatrixC1ERKS_>
    2358:	ce 01       	movw	r24, r28
    235a:	07 96       	adiw	r24, 0x07	; 7
    235c:	2a ef       	ldi	r18, 0xFA	; 250
    235e:	31 e0       	ldi	r19, 0x01	; 1
    2360:	b9 01       	movw	r22, r18
    2362:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <_ZN6MatrixC1ERKS_>
    2366:	c0 90 2f 01 	lds	r12, 0x012F
    236a:	d0 90 30 01 	lds	r13, 0x0130
    236e:	a0 90 31 01 	lds	r10, 0x0131
    2372:	b0 90 32 01 	lds	r11, 0x0132
    2376:	28 ee       	ldi	r18, 0xE8	; 232
    2378:	31 e0       	ldi	r19, 0x01	; 1
    237a:	ce 01       	movw	r24, r28
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	b9 01       	movw	r22, r18
    2380:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <_ZN6MatrixC1ERKS_>
    2384:	ae 01       	movw	r20, r28
    2386:	47 5e       	subi	r20, 0xE7	; 231
    2388:	5f 4f       	sbci	r21, 0xFF	; 255
    238a:	9e 01       	movw	r18, r28
    238c:	2d 5e       	subi	r18, 0xED	; 237
    238e:	3f 4f       	sbci	r19, 0xFF	; 255
    2390:	de 01       	movw	r26, r28
    2392:	1d 96       	adiw	r26, 0x0d	; 13
    2394:	fe 01       	movw	r30, r28
    2396:	37 96       	adiw	r30, 0x07	; 7
    2398:	c7 01       	movw	r24, r14
    239a:	ba 01       	movw	r22, r20
    239c:	a9 01       	movw	r20, r18
    239e:	98 01       	movw	r18, r16
    23a0:	8d 01       	movw	r16, r26
    23a2:	7f 01       	movw	r14, r30
    23a4:	fe 01       	movw	r30, r28
    23a6:	31 96       	adiw	r30, 0x01	; 1
    23a8:	4f 01       	movw	r8, r30
    23aa:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_Z12KalmanFilterP6MatrixS_S_S0_S_S_S0_S0_S_>
    23ae:	ce 01       	movw	r24, r28
    23b0:	01 96       	adiw	r24, 0x01	; 1
    23b2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
    23b6:	ce 01       	movw	r24, r28
    23b8:	07 96       	adiw	r24, 0x07	; 7
    23ba:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
    23be:	ce 01       	movw	r24, r28
    23c0:	0d 96       	adiw	r24, 0x0d	; 13
    23c2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
    23c6:	ce 01       	movw	r24, r28
    23c8:	43 96       	adiw	r24, 0x13	; 19
    23ca:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
    23ce:	ce 01       	movw	r24, r28
    23d0:	49 96       	adiw	r24, 0x19	; 25
    23d2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
		
		// Shift results
		anglesOutput = {xk(0,0), xk(1,1), xk(2,2)};
    23d6:	86 ed       	ldi	r24, 0xD6	; 214
    23d8:	91 e0       	ldi	r25, 0x01	; 1
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	40 e0       	ldi	r20, 0x00	; 0
    23e0:	50 e0       	ldi	r21, 0x00	; 0
    23e2:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN6MatrixclEjj>
    23e6:	fc 01       	movw	r30, r24
    23e8:	a0 80       	ld	r10, Z
    23ea:	b1 80       	ldd	r11, Z+1	; 0x01
    23ec:	c2 80       	ldd	r12, Z+2	; 0x02
    23ee:	d3 80       	ldd	r13, Z+3	; 0x03
    23f0:	86 ed       	ldi	r24, 0xD6	; 214
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN6MatrixclEjj>
    2400:	fc 01       	movw	r30, r24
    2402:	e0 80       	ld	r14, Z
    2404:	f1 80       	ldd	r15, Z+1	; 0x01
    2406:	02 81       	ldd	r16, Z+2	; 0x02
    2408:	13 81       	ldd	r17, Z+3	; 0x03
    240a:	86 ed       	ldi	r24, 0xD6	; 214
    240c:	91 e0       	ldi	r25, 0x01	; 1
    240e:	62 e0       	ldi	r22, 0x02	; 2
    2410:	70 e0       	ldi	r23, 0x00	; 0
    2412:	42 e0       	ldi	r20, 0x02	; 2
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN6MatrixclEjj>
    241a:	fc 01       	movw	r30, r24
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	a2 81       	ldd	r26, Z+2	; 0x02
    2422:	b3 81       	ldd	r27, Z+3	; 0x03
    2424:	a0 92 ca 01 	sts	0x01CA, r10
    2428:	b0 92 cb 01 	sts	0x01CB, r11
    242c:	c0 92 cc 01 	sts	0x01CC, r12
    2430:	d0 92 cd 01 	sts	0x01CD, r13
    2434:	e0 92 ce 01 	sts	0x01CE, r14
    2438:	f0 92 cf 01 	sts	0x01CF, r15
    243c:	00 93 d0 01 	sts	0x01D0, r16
    2440:	10 93 d1 01 	sts	0x01D1, r17
    2444:	80 93 d2 01 	sts	0x01D2, r24
    2448:	90 93 d3 01 	sts	0x01D3, r25
    244c:	a0 93 d4 01 	sts	0x01D4, r26
    2450:	b0 93 d5 01 	sts	0x01D5, r27
		if(anglesOutput.x >180)
    2454:	80 91 ca 01 	lds	r24, 0x01CA
    2458:	90 91 cb 01 	lds	r25, 0x01CB
    245c:	a0 91 cc 01 	lds	r26, 0x01CC
    2460:	b0 91 cd 01 	lds	r27, 0x01CD
    2464:	11 e0       	ldi	r17, 0x01	; 1
    2466:	bc 01       	movw	r22, r24
    2468:	cd 01       	movw	r24, r26
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	44 e3       	ldi	r20, 0x34	; 52
    2470:	53 e4       	ldi	r21, 0x43	; 67
    2472:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    2476:	18 16       	cp	r1, r24
    2478:	0c f0       	brlt	.+2      	; 0x247c <_Z6filterv+0x2ea>
    247a:	10 e0       	ldi	r17, 0x00	; 0
    247c:	11 23       	and	r17, r17
    247e:	d1 f0       	breq	.+52     	; 0x24b4 <_Z6filterv+0x322>
			{anglesOutput.x-=360;}
    2480:	80 91 ca 01 	lds	r24, 0x01CA
    2484:	90 91 cb 01 	lds	r25, 0x01CB
    2488:	a0 91 cc 01 	lds	r26, 0x01CC
    248c:	b0 91 cd 01 	lds	r27, 0x01CD
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	44 eb       	ldi	r20, 0xB4	; 180
    249a:	53 e4       	ldi	r21, 0x43	; 67
    249c:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	80 93 ca 01 	sts	0x01CA, r24
    24a8:	90 93 cb 01 	sts	0x01CB, r25
    24ac:	a0 93 cc 01 	sts	0x01CC, r26
    24b0:	b0 93 cd 01 	sts	0x01CD, r27
		if(anglesOutput.x <-180)
    24b4:	80 91 ca 01 	lds	r24, 0x01CA
    24b8:	90 91 cb 01 	lds	r25, 0x01CB
    24bc:	a0 91 cc 01 	lds	r26, 0x01CC
    24c0:	b0 91 cd 01 	lds	r27, 0x01CD
    24c4:	11 e0       	ldi	r17, 0x01	; 1
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	44 e3       	ldi	r20, 0x34	; 52
    24d0:	53 ec       	ldi	r21, 0xC3	; 195
    24d2:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    24d6:	88 23       	and	r24, r24
    24d8:	0c f0       	brlt	.+2      	; 0x24dc <_Z6filterv+0x34a>
    24da:	10 e0       	ldi	r17, 0x00	; 0
    24dc:	11 23       	and	r17, r17
    24de:	d1 f0       	breq	.+52     	; 0x2514 <_Z6filterv+0x382>
			{anglesOutput.x+=360;}
    24e0:	80 91 ca 01 	lds	r24, 0x01CA
    24e4:	90 91 cb 01 	lds	r25, 0x01CB
    24e8:	a0 91 cc 01 	lds	r26, 0x01CC
    24ec:	b0 91 cd 01 	lds	r27, 0x01CD
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	44 eb       	ldi	r20, 0xB4	; 180
    24fa:	53 e4       	ldi	r21, 0x43	; 67
    24fc:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	80 93 ca 01 	sts	0x01CA, r24
    2508:	90 93 cb 01 	sts	0x01CB, r25
    250c:	a0 93 cc 01 	sts	0x01CC, r26
    2510:	b0 93 cd 01 	sts	0x01CD, r27
		if(anglesOutput.y >180)
    2514:	80 91 ce 01 	lds	r24, 0x01CE
    2518:	90 91 cf 01 	lds	r25, 0x01CF
    251c:	a0 91 d0 01 	lds	r26, 0x01D0
    2520:	b0 91 d1 01 	lds	r27, 0x01D1
    2524:	11 e0       	ldi	r17, 0x01	; 1
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	44 e3       	ldi	r20, 0x34	; 52
    2530:	53 e4       	ldi	r21, 0x43	; 67
    2532:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    2536:	18 16       	cp	r1, r24
    2538:	0c f0       	brlt	.+2      	; 0x253c <_Z6filterv+0x3aa>
    253a:	10 e0       	ldi	r17, 0x00	; 0
    253c:	11 23       	and	r17, r17
    253e:	d1 f0       	breq	.+52     	; 0x2574 <_Z6filterv+0x3e2>
			{anglesOutput.y-=360;}
    2540:	80 91 ce 01 	lds	r24, 0x01CE
    2544:	90 91 cf 01 	lds	r25, 0x01CF
    2548:	a0 91 d0 01 	lds	r26, 0x01D0
    254c:	b0 91 d1 01 	lds	r27, 0x01D1
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	44 eb       	ldi	r20, 0xB4	; 180
    255a:	53 e4       	ldi	r21, 0x43	; 67
    255c:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	80 93 ce 01 	sts	0x01CE, r24
    2568:	90 93 cf 01 	sts	0x01CF, r25
    256c:	a0 93 d0 01 	sts	0x01D0, r26
    2570:	b0 93 d1 01 	sts	0x01D1, r27
		if(anglesOutput.y <-180)
    2574:	80 91 ce 01 	lds	r24, 0x01CE
    2578:	90 91 cf 01 	lds	r25, 0x01CF
    257c:	a0 91 d0 01 	lds	r26, 0x01D0
    2580:	b0 91 d1 01 	lds	r27, 0x01D1
    2584:	11 e0       	ldi	r17, 0x01	; 1
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	44 e3       	ldi	r20, 0x34	; 52
    2590:	53 ec       	ldi	r21, 0xC3	; 195
    2592:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    2596:	88 23       	and	r24, r24
    2598:	0c f0       	brlt	.+2      	; 0x259c <_Z6filterv+0x40a>
    259a:	10 e0       	ldi	r17, 0x00	; 0
    259c:	11 23       	and	r17, r17
    259e:	d1 f0       	breq	.+52     	; 0x25d4 <_Z6filterv+0x442>
			{anglesOutput.y+=360;}
    25a0:	80 91 ce 01 	lds	r24, 0x01CE
    25a4:	90 91 cf 01 	lds	r25, 0x01CF
    25a8:	a0 91 d0 01 	lds	r26, 0x01D0
    25ac:	b0 91 d1 01 	lds	r27, 0x01D1
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	44 eb       	ldi	r20, 0xB4	; 180
    25ba:	53 e4       	ldi	r21, 0x43	; 67
    25bc:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	80 93 ce 01 	sts	0x01CE, r24
    25c8:	90 93 cf 01 	sts	0x01CF, r25
    25cc:	a0 93 d0 01 	sts	0x01D0, r26
    25d0:	b0 93 d1 01 	sts	0x01D1, r27
		if(anglesOutput.z >180)
    25d4:	80 91 d2 01 	lds	r24, 0x01D2
    25d8:	90 91 d3 01 	lds	r25, 0x01D3
    25dc:	a0 91 d4 01 	lds	r26, 0x01D4
    25e0:	b0 91 d5 01 	lds	r27, 0x01D5
    25e4:	11 e0       	ldi	r17, 0x01	; 1
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	44 e3       	ldi	r20, 0x34	; 52
    25f0:	53 e4       	ldi	r21, 0x43	; 67
    25f2:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    25f6:	18 16       	cp	r1, r24
    25f8:	0c f0       	brlt	.+2      	; 0x25fc <_Z6filterv+0x46a>
    25fa:	10 e0       	ldi	r17, 0x00	; 0
    25fc:	11 23       	and	r17, r17
    25fe:	d1 f0       	breq	.+52     	; 0x2634 <_Z6filterv+0x4a2>
			{anglesOutput.z-=360;}
    2600:	80 91 d2 01 	lds	r24, 0x01D2
    2604:	90 91 d3 01 	lds	r25, 0x01D3
    2608:	a0 91 d4 01 	lds	r26, 0x01D4
    260c:	b0 91 d5 01 	lds	r27, 0x01D5
    2610:	bc 01       	movw	r22, r24
    2612:	cd 01       	movw	r24, r26
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	44 eb       	ldi	r20, 0xB4	; 180
    261a:	53 e4       	ldi	r21, 0x43	; 67
    261c:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	80 93 d2 01 	sts	0x01D2, r24
    2628:	90 93 d3 01 	sts	0x01D3, r25
    262c:	a0 93 d4 01 	sts	0x01D4, r26
    2630:	b0 93 d5 01 	sts	0x01D5, r27
		if(anglesOutput.z <-180)
    2634:	80 91 d2 01 	lds	r24, 0x01D2
    2638:	90 91 d3 01 	lds	r25, 0x01D3
    263c:	a0 91 d4 01 	lds	r26, 0x01D4
    2640:	b0 91 d5 01 	lds	r27, 0x01D5
    2644:	11 e0       	ldi	r17, 0x01	; 1
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	44 e3       	ldi	r20, 0x34	; 52
    2650:	53 ec       	ldi	r21, 0xC3	; 195
    2652:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    2656:	88 23       	and	r24, r24
    2658:	0c f0       	brlt	.+2      	; 0x265c <_Z6filterv+0x4ca>
    265a:	10 e0       	ldi	r17, 0x00	; 0
    265c:	11 23       	and	r17, r17
    265e:	d1 f0       	breq	.+52     	; 0x2694 <_Z6filterv+0x502>
			{anglesOutput.z+=360;}
    2660:	80 91 d2 01 	lds	r24, 0x01D2
    2664:	90 91 d3 01 	lds	r25, 0x01D3
    2668:	a0 91 d4 01 	lds	r26, 0x01D4
    266c:	b0 91 d5 01 	lds	r27, 0x01D5
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	44 eb       	ldi	r20, 0xB4	; 180
    267a:	53 e4       	ldi	r21, 0x43	; 67
    267c:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	80 93 d2 01 	sts	0x01D2, r24
    2688:	90 93 d3 01 	sts	0x01D3, r25
    268c:	a0 93 d4 01 	sts	0x01D4, r26
    2690:	b0 93 d5 01 	sts	0x01D5, r27
		
		// Output results in CSV format (Comma-separated values)
		USART_Send_string("000");
    2694:	8a e3       	ldi	r24, 0x3A	; 58
    2696:	91 e0       	ldi	r25, 0x01	; 1
    2698:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		USART_Send_string(",");
    269c:	8e e3       	ldi	r24, 0x3E	; 62
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		
		printFloat(anglesAccel.x,0);
    26a4:	80 91 b2 01 	lds	r24, 0x01B2
    26a8:	90 91 b3 01 	lds	r25, 0x01B3
    26ac:	a0 91 b4 01 	lds	r26, 0x01B4
    26b0:	b0 91 b5 01 	lds	r27, 0x01B5
    26b4:	bc 01       	movw	r22, r24
    26b6:	cd 01       	movw	r24, r26
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
		USART_Send_string(",");
    26be:	8e e3       	ldi	r24, 0x3E	; 62
    26c0:	91 e0       	ldi	r25, 0x01	; 1
    26c2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		
		printFloat(anglesOutput.x,0);
    26c6:	80 91 ca 01 	lds	r24, 0x01CA
    26ca:	90 91 cb 01 	lds	r25, 0x01CB
    26ce:	a0 91 cc 01 	lds	r26, 0x01CC
    26d2:	b0 91 cd 01 	lds	r27, 0x01CD
    26d6:	bc 01       	movw	r22, r24
    26d8:	cd 01       	movw	r24, r26
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
		USART_Send_string(",");
    26e0:	8e e3       	ldi	r24, 0x3E	; 62
    26e2:	91 e0       	ldi	r25, 0x01	; 1
    26e4:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		
		printFloat(anglesAccel.y,0);
    26e8:	80 91 b6 01 	lds	r24, 0x01B6
    26ec:	90 91 b7 01 	lds	r25, 0x01B7
    26f0:	a0 91 b8 01 	lds	r26, 0x01B8
    26f4:	b0 91 b9 01 	lds	r27, 0x01B9
    26f8:	bc 01       	movw	r22, r24
    26fa:	cd 01       	movw	r24, r26
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
		USART_Send_string(",");
    2702:	8e e3       	ldi	r24, 0x3E	; 62
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		
		printFloat(anglesOutput.y,0);
    270a:	80 91 ce 01 	lds	r24, 0x01CE
    270e:	90 91 cf 01 	lds	r25, 0x01CF
    2712:	a0 91 d0 01 	lds	r26, 0x01D0
    2716:	b0 91 d1 01 	lds	r27, 0x01D1
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
		USART_Send_string(",");
    2724:	8e e3       	ldi	r24, 0x3E	; 62
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		
		printFloat(anglesAccel.z,0);
    272c:	80 91 ba 01 	lds	r24, 0x01BA
    2730:	90 91 bb 01 	lds	r25, 0x01BB
    2734:	a0 91 bc 01 	lds	r26, 0x01BC
    2738:	b0 91 bd 01 	lds	r27, 0x01BD
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
		USART_Send_string(",");
    2746:	8e e3       	ldi	r24, 0x3E	; 62
    2748:	91 e0       	ldi	r25, 0x01	; 1
    274a:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		
		printFloat(anglesOutput.z,0);
    274e:	80 91 d2 01 	lds	r24, 0x01D2
    2752:	90 91 d3 01 	lds	r25, 0x01D3
    2756:	a0 91 d4 01 	lds	r26, 0x01D4
    275a:	b0 91 d5 01 	lds	r27, 0x01D5
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
		USART_Send_string("\n");
    2768:	80 e4       	ldi	r24, 0x40	; 64
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	}		
    2770:	aa 96       	adiw	r28, 0x2a	; 42
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	cf 90       	pop	r12
    278c:	bf 90       	pop	r11
    278e:	af 90       	pop	r10
    2790:	9f 90       	pop	r9
    2792:	8f 90       	pop	r8
    2794:	08 95       	ret

00002796 <__vector_13>:


///////////////////////////
// Timer1 Interrupt handler
    ISR(TIMER1_OVF_vect) 
	{		 
    2796:	1f 92       	push	r1
    2798:	0f 92       	push	r0
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	0f 92       	push	r0
    279e:	11 24       	eor	r1, r1
    27a0:	2f 93       	push	r18
    27a2:	3f 93       	push	r19
    27a4:	4f 93       	push	r20
    27a6:	5f 93       	push	r21
    27a8:	6f 93       	push	r22
    27aa:	7f 93       	push	r23
    27ac:	8f 93       	push	r24
    27ae:	9f 93       	push	r25
    27b0:	af 93       	push	r26
    27b2:	bf 93       	push	r27
    27b4:	ef 93       	push	r30
    27b6:	ff 93       	push	r31
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
		TCNT1 = tcnt1;		// Reload the timer value
    27c0:	84 e8       	ldi	r24, 0x84	; 132
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	20 91 29 01 	lds	r18, 0x0129
    27c8:	30 91 2a 01 	lds	r19, 0x012A
    27cc:	fc 01       	movw	r30, r24
    27ce:	31 83       	std	Z+1, r19	; 0x01
    27d0:	20 83       	st	Z, r18
		sei();				// Re-enable the timer as fast as possible
    27d2:	78 94       	sei
		filter();			// Run the filtering
    27d4:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z6filterv>
    }  
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	ff 91       	pop	r31
    27de:	ef 91       	pop	r30
    27e0:	bf 91       	pop	r27
    27e2:	af 91       	pop	r26
    27e4:	9f 91       	pop	r25
    27e6:	8f 91       	pop	r24
    27e8:	7f 91       	pop	r23
    27ea:	6f 91       	pop	r22
    27ec:	5f 91       	pop	r21
    27ee:	4f 91       	pop	r20
    27f0:	3f 91       	pop	r19
    27f2:	2f 91       	pop	r18
    27f4:	0f 90       	pop	r0
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	0f 90       	pop	r0
    27fa:	1f 90       	pop	r1
    27fc:	18 95       	reti

000027fe <_Z10initializev>:



// Initialization function
void initialize(void)
{
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
	init_interrupts();  // Initializes Timer1 interrupts
    2806:	0e 94 0c 14 	call	0x2818	; 0x2818 <_Z15init_interruptsv>
	USART_Init(MYUBRR); // Initializes the serial communication
    280a:	88 e0       	ldi	r24, 0x08	; 8
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	0e 94 11 27 	call	0x4e22	; 0x4e22 <_Z10USART_Initj>
}	
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	08 95       	ret

00002818 <_Z15init_interruptsv>:


// Interrupts configuration
void init_interrupts(void)
{
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
	  /* First disable the timer overflow interrupt while we're configuring */  
      TIMSK1 &= ~(1<<TOIE1);  
    2820:	8f e6       	ldi	r24, 0x6F	; 111
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	2f e6       	ldi	r18, 0x6F	; 111
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	f9 01       	movw	r30, r18
    282a:	20 81       	ld	r18, Z
    282c:	2e 7f       	andi	r18, 0xFE	; 254
    282e:	fc 01       	movw	r30, r24
    2830:	20 83       	st	Z, r18
      
      /* Configure timer2 in normal mode (pure counting, no PWM etc.) */  
      TCCR1A &= ~((1<<WGM11) | (1<<WGM10));  
    2832:	80 e8       	ldi	r24, 0x80	; 128
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	20 e8       	ldi	r18, 0x80	; 128
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	f9 01       	movw	r30, r18
    283c:	20 81       	ld	r18, Z
    283e:	2c 7f       	andi	r18, 0xFC	; 252
    2840:	fc 01       	movw	r30, r24
    2842:	20 83       	st	Z, r18
      TCCR1B &= ~((1<<WGM13) | (1<<WGM12));  
    2844:	81 e8       	ldi	r24, 0x81	; 129
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	21 e8       	ldi	r18, 0x81	; 129
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	f9 01       	movw	r30, r18
    284e:	20 81       	ld	r18, Z
    2850:	27 7e       	andi	r18, 0xE7	; 231
    2852:	fc 01       	movw	r30, r24
    2854:	20 83       	st	Z, r18
      
 
      /* Disable Compare Match A interrupt enable (only want overflow) */  
      TIMSK1 &= ~(1<<OCIE1A);  
    2856:	8f e6       	ldi	r24, 0x6F	; 111
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	2f e6       	ldi	r18, 0x6F	; 111
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	f9 01       	movw	r30, r18
    2860:	20 81       	ld	r18, Z
    2862:	2d 7f       	andi	r18, 0xFD	; 253
    2864:	fc 01       	movw	r30, r24
    2866:	20 83       	st	Z, r18
      
      // Prescalar = 8.  Time between interrupts ~=32ms;
      TCCR1B &= ~(1<<CS12);			// Clear bit
    2868:	81 e8       	ldi	r24, 0x81	; 129
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	21 e8       	ldi	r18, 0x81	; 129
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	f9 01       	movw	r30, r18
    2872:	20 81       	ld	r18, Z
    2874:	2b 7f       	andi	r18, 0xFB	; 251
    2876:	fc 01       	movw	r30, r24
    2878:	20 83       	st	Z, r18
	  TCCR1B |= (1<<CS11);          // Set bit 
    287a:	81 e8       	ldi	r24, 0x81	; 129
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	21 e8       	ldi	r18, 0x81	; 129
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	f9 01       	movw	r30, r18
    2884:	20 81       	ld	r18, Z
    2886:	22 60       	ori	r18, 0x02	; 2
    2888:	fc 01       	movw	r30, r24
    288a:	20 83       	st	Z, r18
	  TCCR1B &= ~(1<<CS10);			// Clear bit
    288c:	81 e8       	ldi	r24, 0x81	; 129
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	21 e8       	ldi	r18, 0x81	; 129
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	f9 01       	movw	r30, r18
    2896:	20 81       	ld	r18, Z
    2898:	2e 7f       	andi	r18, 0xFE	; 254
    289a:	fc 01       	movw	r30, r24
    289c:	20 83       	st	Z, r18
      
      /* Finally load and enable the timer */  
      TCNT1 = tcnt1;  
    289e:	84 e8       	ldi	r24, 0x84	; 132
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	20 91 29 01 	lds	r18, 0x0129
    28a6:	30 91 2a 01 	lds	r19, 0x012A
    28aa:	fc 01       	movw	r30, r24
    28ac:	31 83       	std	Z+1, r19	; 0x01
    28ae:	20 83       	st	Z, r18
      TIMSK1 |= (1<<TOIE1);  
    28b0:	8f e6       	ldi	r24, 0x6F	; 111
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	2f e6       	ldi	r18, 0x6F	; 111
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	f9 01       	movw	r30, r18
    28ba:	20 81       	ld	r18, Z
    28bc:	21 60       	ori	r18, 0x01	; 1
    28be:	fc 01       	movw	r30, r24
    28c0:	20 83       	st	Z, r18
}
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <_Z41__static_initialization_and_destruction_0ii>:
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <_Z41__static_initialization_and_destruction_0ii+0x6>
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <_Z41__static_initialization_and_destruction_0ii+0x8>
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	89 83       	std	Y+1, r24	; 0x01
    28d8:	7c 83       	std	Y+4, r23	; 0x04
    28da:	6b 83       	std	Y+3, r22	; 0x03
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	91 05       	cpc	r25, r1
    28e4:	09 f0       	breq	.+2      	; 0x28e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
    28e6:	4f c0       	rjmp	.+158    	; 0x2986 <_Z41__static_initialization_and_destruction_0ii+0xbe>
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	2f ef       	ldi	r18, 0xFF	; 255
    28ee:	8f 3f       	cpi	r24, 0xFF	; 255
    28f0:	92 07       	cpc	r25, r18
    28f2:	09 f0       	breq	.+2      	; 0x28f6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    28f4:	48 c0       	rjmp	.+144    	; 0x2986 <_Z41__static_initialization_and_destruction_0ii+0xbe>
		
//KALMAN MATRIX DECLARATIONS		
	// Steps and variables names are based on the wikipedia page
	// http://en.wikipedia.org/wiki/Kalman_filter
	
	Matrix xk (3,3);			// Predicted state k at k-1
    28f6:	86 ed       	ldi	r24, 0xD6	; 214
    28f8:	91 e0       	ldi	r25, 0x01	; 1
    28fa:	63 e0       	ldi	r22, 0x03	; 3
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	43 e0       	ldi	r20, 0x03	; 3
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>
	Matrix xnew  (3,3);			// New measured state
    2906:	8c ed       	ldi	r24, 0xDC	; 220
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	63 e0       	ldi	r22, 0x03	; 3
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	43 e0       	ldi	r20, 0x03	; 3
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>
	Matrix uk  (3,3);			// rate k
    2916:	82 ee       	ldi	r24, 0xE2	; 226
    2918:	91 e0       	ldi	r25, 0x01	; 1
    291a:	63 e0       	ldi	r22, 0x03	; 3
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	43 e0       	ldi	r20, 0x03	; 3
    2920:	50 e0       	ldi	r21, 0x00	; 0
    2922:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>
	
	
	Matrix I (3,3);				// Identity matrix
    2926:	88 ee       	ldi	r24, 0xE8	; 232
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	63 e0       	ldi	r22, 0x03	; 3
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	43 e0       	ldi	r20, 0x03	; 3
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>
	Matrix Pk(3,3);				// Covariance matrix
    2936:	8e ee       	ldi	r24, 0xEE	; 238
    2938:	91 e0       	ldi	r25, 0x01	; 1
    293a:	63 e0       	ldi	r22, 0x03	; 3
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	43 e0       	ldi	r20, 0x03	; 3
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>
	Matrix R (3,3);				// Measurement noise (linked to accelerometer)
    2946:	84 ef       	ldi	r24, 0xF4	; 244
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	63 e0       	ldi	r22, 0x03	; 3
    294c:	70 e0       	ldi	r23, 0x00	; 0
    294e:	43 e0       	ldi	r20, 0x03	; 3
    2950:	50 e0       	ldi	r21, 0x00	; 0
    2952:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>
	Matrix Q (3,3);				// Processing noise (linked to gyroscope)
    2956:	8a ef       	ldi	r24, 0xFA	; 250
    2958:	91 e0       	ldi	r25, 0x01	; 1
    295a:	63 e0       	ldi	r22, 0x03	; 3
    295c:	70 e0       	ldi	r23, 0x00	; 0
    295e:	43 e0       	ldi	r20, 0x03	; 3
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>

	Matrix S (3,3); 
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	92 e0       	ldi	r25, 0x02	; 2
    296a:	63 e0       	ldi	r22, 0x03	; 3
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	43 e0       	ldi	r20, 0x03	; 3
    2970:	50 e0       	ldi	r21, 0x00	; 0
    2972:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>
	Matrix K (3,3);				// Kalman Gain
    2976:	86 e0       	ldi	r24, 0x06	; 6
    2978:	92 e0       	ldi	r25, 0x02	; 2
    297a:	63 e0       	ldi	r22, 0x03	; 3
    297c:	70 e0       	ldi	r23, 0x00	; 0
    297e:	43 e0       	ldi	r20, 0x03	; 3
    2980:	50 e0       	ldi	r21, 0x00	; 0
    2982:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	9a 81       	ldd	r25, Y+2	; 0x02
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	51 f5       	brne	.+84     	; 0x29e2 <_Z41__static_initialization_and_destruction_0ii+0x11a>
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	9c 81       	ldd	r25, Y+4	; 0x04
    2992:	2f ef       	ldi	r18, 0xFF	; 255
    2994:	8f 3f       	cpi	r24, 0xFF	; 255
    2996:	92 07       	cpc	r25, r18
    2998:	21 f5       	brne	.+72     	; 0x29e2 <_Z41__static_initialization_and_destruction_0ii+0x11a>
    299a:	86 e0       	ldi	r24, 0x06	; 6
    299c:	92 e0       	ldi	r25, 0x02	; 2
    299e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	Matrix I (3,3);				// Identity matrix
	Matrix Pk(3,3);				// Covariance matrix
	Matrix R (3,3);				// Measurement noise (linked to accelerometer)
	Matrix Q (3,3);				// Processing noise (linked to gyroscope)

	Matrix S (3,3); 
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	92 e0       	ldi	r25, 0x02	; 2
    29a6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	
	
	Matrix I (3,3);				// Identity matrix
	Matrix Pk(3,3);				// Covariance matrix
	Matrix R (3,3);				// Measurement noise (linked to accelerometer)
	Matrix Q (3,3);				// Processing noise (linked to gyroscope)
    29aa:	8a ef       	ldi	r24, 0xFA	; 250
    29ac:	91 e0       	ldi	r25, 0x01	; 1
    29ae:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	Matrix uk  (3,3);			// rate k
	
	
	Matrix I (3,3);				// Identity matrix
	Matrix Pk(3,3);				// Covariance matrix
	Matrix R (3,3);				// Measurement noise (linked to accelerometer)
    29b2:	84 ef       	ldi	r24, 0xF4	; 244
    29b4:	91 e0       	ldi	r25, 0x01	; 1
    29b6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	Matrix xnew  (3,3);			// New measured state
	Matrix uk  (3,3);			// rate k
	
	
	Matrix I (3,3);				// Identity matrix
	Matrix Pk(3,3);				// Covariance matrix
    29ba:	8e ee       	ldi	r24, 0xEE	; 238
    29bc:	91 e0       	ldi	r25, 0x01	; 1
    29be:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	Matrix xk (3,3);			// Predicted state k at k-1
	Matrix xnew  (3,3);			// New measured state
	Matrix uk  (3,3);			// rate k
	
	
	Matrix I (3,3);				// Identity matrix
    29c2:	88 ee       	ldi	r24, 0xE8	; 232
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	// Steps and variables names are based on the wikipedia page
	// http://en.wikipedia.org/wiki/Kalman_filter
	
	Matrix xk (3,3);			// Predicted state k at k-1
	Matrix xnew  (3,3);			// New measured state
	Matrix uk  (3,3);			// rate k
    29ca:	82 ee       	ldi	r24, 0xE2	; 226
    29cc:	91 e0       	ldi	r25, 0x01	; 1
    29ce:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
//KALMAN MATRIX DECLARATIONS		
	// Steps and variables names are based on the wikipedia page
	// http://en.wikipedia.org/wiki/Kalman_filter
	
	Matrix xk (3,3);			// Predicted state k at k-1
	Matrix xnew  (3,3);			// New measured state
    29d2:	8c ed       	ldi	r24, 0xDC	; 220
    29d4:	91 e0       	ldi	r25, 0x01	; 1
    29d6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
		
//KALMAN MATRIX DECLARATIONS		
	// Steps and variables names are based on the wikipedia page
	// http://en.wikipedia.org/wiki/Kalman_filter
	
	Matrix xk (3,3);			// Predicted state k at k-1
    29da:	86 ed       	ldi	r24, 0xD6	; 214
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN6MatrixD1Ev>
	  TCCR1B &= ~(1<<CS10);			// Clear bit
      
      /* Finally load and enable the timer */  
      TCNT1 = tcnt1;  
      TIMSK1 |= (1<<TOIE1);  
}
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <_GLOBAL__I_tcnt1>:
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	6f ef       	ldi	r22, 0xFF	; 255
    29fe:	7f ef       	ldi	r23, 0xFF	; 255
    2a00:	0e 94 64 14 	call	0x28c8	; 0x28c8 <_Z41__static_initialization_and_destruction_0ii>
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <_GLOBAL__D_tcnt1>:
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	cd b7       	in	r28, 0x3d	; 61
    2a10:	de b7       	in	r29, 0x3e	; 62
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	6f ef       	ldi	r22, 0xFF	; 255
    2a18:	7f ef       	ldi	r23, 0xFF	; 255
    2a1a:	0e 94 64 14 	call	0x28c8	; 0x28c8 <_Z41__static_initialization_and_destruction_0ii>
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <_Z12vector_crossPK6vectorS1_PS_>:
#include "usart.h"


// Vector functions
void vector_cross(const vector *a, const vector *b, vector *out)
{
    2a24:	ef 92       	push	r14
    2a26:	ff 92       	push	r15
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <_Z12vector_crossPK6vectorS1_PS_+0xe>
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <_Z12vector_crossPK6vectorS1_PS_+0x10>
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <_Z12vector_crossPK6vectorS1_PS_+0x12>
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	7c 83       	std	Y+4, r23	; 0x04
    2a40:	6b 83       	std	Y+3, r22	; 0x03
    2a42:	5e 83       	std	Y+6, r21	; 0x06
    2a44:	4d 83       	std	Y+5, r20	; 0x05
	out->x = a->y * b->z - a->z * b->y;
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	84 81       	ldd	r24, Z+4	; 0x04
    2a4e:	95 81       	ldd	r25, Z+5	; 0x05
    2a50:	a6 81       	ldd	r26, Z+6	; 0x06
    2a52:	b7 81       	ldd	r27, Z+7	; 0x07
    2a54:	2b 81       	ldd	r18, Y+3	; 0x03
    2a56:	3c 81       	ldd	r19, Y+4	; 0x04
    2a58:	f9 01       	movw	r30, r18
    2a5a:	20 85       	ldd	r18, Z+8	; 0x08
    2a5c:	31 85       	ldd	r19, Z+9	; 0x09
    2a5e:	42 85       	ldd	r20, Z+10	; 0x0a
    2a60:	53 85       	ldd	r21, Z+11	; 0x0b
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	7c 01       	movw	r14, r24
    2a70:	8d 01       	movw	r16, r26
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	fc 01       	movw	r30, r24
    2a78:	80 85       	ldd	r24, Z+8	; 0x08
    2a7a:	91 85       	ldd	r25, Z+9	; 0x09
    2a7c:	a2 85       	ldd	r26, Z+10	; 0x0a
    2a7e:	b3 85       	ldd	r27, Z+11	; 0x0b
    2a80:	2b 81       	ldd	r18, Y+3	; 0x03
    2a82:	3c 81       	ldd	r19, Y+4	; 0x04
    2a84:	f9 01       	movw	r30, r18
    2a86:	24 81       	ldd	r18, Z+4	; 0x04
    2a88:	35 81       	ldd	r19, Z+5	; 0x05
    2a8a:	46 81       	ldd	r20, Z+6	; 0x06
    2a8c:	57 81       	ldd	r21, Z+7	; 0x07
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9c 01       	movw	r18, r24
    2a9c:	ad 01       	movw	r20, r26
    2a9e:	c8 01       	movw	r24, r16
    2aa0:	b7 01       	movw	r22, r14
    2aa2:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	2d 81       	ldd	r18, Y+5	; 0x05
    2aac:	3e 81       	ldd	r19, Y+6	; 0x06
    2aae:	f9 01       	movw	r30, r18
    2ab0:	80 83       	st	Z, r24
    2ab2:	91 83       	std	Z+1, r25	; 0x01
    2ab4:	a2 83       	std	Z+2, r26	; 0x02
    2ab6:	b3 83       	std	Z+3, r27	; 0x03
	out->y = a->z * b->x - a->x * b->z;
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	fc 01       	movw	r30, r24
    2abe:	80 85       	ldd	r24, Z+8	; 0x08
    2ac0:	91 85       	ldd	r25, Z+9	; 0x09
    2ac2:	a2 85       	ldd	r26, Z+10	; 0x0a
    2ac4:	b3 85       	ldd	r27, Z+11	; 0x0b
    2ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    2aca:	f9 01       	movw	r30, r18
    2acc:	20 81       	ld	r18, Z
    2ace:	31 81       	ldd	r19, Z+1	; 0x01
    2ad0:	42 81       	ldd	r20, Z+2	; 0x02
    2ad2:	53 81       	ldd	r21, Z+3	; 0x03
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	7c 01       	movw	r14, r24
    2ae2:	8d 01       	movw	r16, r26
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	fc 01       	movw	r30, r24
    2aea:	80 81       	ld	r24, Z
    2aec:	91 81       	ldd	r25, Z+1	; 0x01
    2aee:	a2 81       	ldd	r26, Z+2	; 0x02
    2af0:	b3 81       	ldd	r27, Z+3	; 0x03
    2af2:	2b 81       	ldd	r18, Y+3	; 0x03
    2af4:	3c 81       	ldd	r19, Y+4	; 0x04
    2af6:	f9 01       	movw	r30, r18
    2af8:	20 85       	ldd	r18, Z+8	; 0x08
    2afa:	31 85       	ldd	r19, Z+9	; 0x09
    2afc:	42 85       	ldd	r20, Z+10	; 0x0a
    2afe:	53 85       	ldd	r21, Z+11	; 0x0b
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9c 01       	movw	r18, r24
    2b0e:	ad 01       	movw	r20, r26
    2b10:	c8 01       	movw	r24, r16
    2b12:	b7 01       	movw	r22, r14
    2b14:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b1e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b20:	f9 01       	movw	r30, r18
    2b22:	84 83       	std	Z+4, r24	; 0x04
    2b24:	95 83       	std	Z+5, r25	; 0x05
    2b26:	a6 83       	std	Z+6, r26	; 0x06
    2b28:	b7 83       	std	Z+7, r27	; 0x07
	out->z = a->x * b->y - a->y * b->x;
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	fc 01       	movw	r30, r24
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	a2 81       	ldd	r26, Z+2	; 0x02
    2b36:	b3 81       	ldd	r27, Z+3	; 0x03
    2b38:	2b 81       	ldd	r18, Y+3	; 0x03
    2b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b3c:	f9 01       	movw	r30, r18
    2b3e:	24 81       	ldd	r18, Z+4	; 0x04
    2b40:	35 81       	ldd	r19, Z+5	; 0x05
    2b42:	46 81       	ldd	r20, Z+6	; 0x06
    2b44:	57 81       	ldd	r21, Z+7	; 0x07
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	7c 01       	movw	r14, r24
    2b54:	8d 01       	movw	r16, r26
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	84 81       	ldd	r24, Z+4	; 0x04
    2b5e:	95 81       	ldd	r25, Z+5	; 0x05
    2b60:	a6 81       	ldd	r26, Z+6	; 0x06
    2b62:	b7 81       	ldd	r27, Z+7	; 0x07
    2b64:	2b 81       	ldd	r18, Y+3	; 0x03
    2b66:	3c 81       	ldd	r19, Y+4	; 0x04
    2b68:	f9 01       	movw	r30, r18
    2b6a:	20 81       	ld	r18, Z
    2b6c:	31 81       	ldd	r19, Z+1	; 0x01
    2b6e:	42 81       	ldd	r20, Z+2	; 0x02
    2b70:	53 81       	ldd	r21, Z+3	; 0x03
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9c 01       	movw	r18, r24
    2b80:	ad 01       	movw	r20, r26
    2b82:	c8 01       	movw	r24, r16
    2b84:	b7 01       	movw	r22, r14
    2b86:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	2d 81       	ldd	r18, Y+5	; 0x05
    2b90:	3e 81       	ldd	r19, Y+6	; 0x06
    2b92:	f9 01       	movw	r30, r18
    2b94:	80 87       	std	Z+8, r24	; 0x08
    2b96:	91 87       	std	Z+9, r25	; 0x09
    2b98:	a2 87       	std	Z+10, r26	; 0x0a
    2b9a:	b3 87       	std	Z+11, r27	; 0x0b
}
    2b9c:	26 96       	adiw	r28, 0x06	; 6
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	ff 90       	pop	r15
    2bb2:	ef 90       	pop	r14
    2bb4:	08 95       	ret

00002bb6 <_Z10vector_dotPK6vectorS1_>:

float vector_dot(const vector *a, const vector *b)
{
    2bb6:	ef 92       	push	r14
    2bb8:	ff 92       	push	r15
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <_Z10vector_dotPK6vectorS1_+0xe>
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <_Z10vector_dotPK6vectorS1_+0x10>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	9a 83       	std	Y+2, r25	; 0x02
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	7c 83       	std	Y+4, r23	; 0x04
    2bd0:	6b 83       	std	Y+3, r22	; 0x03
  return a->x * b->x + a->y * b->y + a->z * b->z;
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	80 81       	ld	r24, Z
    2bda:	91 81       	ldd	r25, Z+1	; 0x01
    2bdc:	a2 81       	ldd	r26, Z+2	; 0x02
    2bde:	b3 81       	ldd	r27, Z+3	; 0x03
    2be0:	2b 81       	ldd	r18, Y+3	; 0x03
    2be2:	3c 81       	ldd	r19, Y+4	; 0x04
    2be4:	f9 01       	movw	r30, r18
    2be6:	20 81       	ld	r18, Z
    2be8:	31 81       	ldd	r19, Z+1	; 0x01
    2bea:	42 81       	ldd	r20, Z+2	; 0x02
    2bec:	53 81       	ldd	r21, Z+3	; 0x03
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	7c 01       	movw	r14, r24
    2bfc:	8d 01       	movw	r16, r26
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	fc 01       	movw	r30, r24
    2c04:	84 81       	ldd	r24, Z+4	; 0x04
    2c06:	95 81       	ldd	r25, Z+5	; 0x05
    2c08:	a6 81       	ldd	r26, Z+6	; 0x06
    2c0a:	b7 81       	ldd	r27, Z+7	; 0x07
    2c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c10:	f9 01       	movw	r30, r18
    2c12:	24 81       	ldd	r18, Z+4	; 0x04
    2c14:	35 81       	ldd	r19, Z+5	; 0x05
    2c16:	46 81       	ldd	r20, Z+6	; 0x06
    2c18:	57 81       	ldd	r21, Z+7	; 0x07
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	cd 01       	movw	r24, r26
    2c1e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	9c 01       	movw	r18, r24
    2c28:	ad 01       	movw	r20, r26
    2c2a:	c8 01       	movw	r24, r16
    2c2c:	b7 01       	movw	r22, r14
    2c2e:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	7c 01       	movw	r14, r24
    2c38:	8d 01       	movw	r16, r26
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	fc 01       	movw	r30, r24
    2c40:	80 85       	ldd	r24, Z+8	; 0x08
    2c42:	91 85       	ldd	r25, Z+9	; 0x09
    2c44:	a2 85       	ldd	r26, Z+10	; 0x0a
    2c46:	b3 85       	ldd	r27, Z+11	; 0x0b
    2c48:	2b 81       	ldd	r18, Y+3	; 0x03
    2c4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c4c:	f9 01       	movw	r30, r18
    2c4e:	20 85       	ldd	r18, Z+8	; 0x08
    2c50:	31 85       	ldd	r19, Z+9	; 0x09
    2c52:	42 85       	ldd	r20, Z+10	; 0x0a
    2c54:	53 85       	ldd	r21, Z+11	; 0x0b
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	9c 01       	movw	r18, r24
    2c64:	ad 01       	movw	r20, r26
    2c66:	c8 01       	movw	r24, r16
    2c68:	b7 01       	movw	r22, r14
    2c6a:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
}
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	08 95       	ret

00002c8c <_Z16vector_normalizeP6vector>:

void vector_normalize(vector *a)
{
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	00 d0       	rcall	.+0      	; 0x2c92 <_Z16vector_normalizeP6vector+0x6>
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <_Z16vector_normalizeP6vector+0x8>
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <_Z16vector_normalizeP6vector+0xa>
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
	float mag = sqrt(vector_dot(a, a));
    2c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca2:	2d 81       	ldd	r18, Y+5	; 0x05
    2ca4:	3e 81       	ldd	r19, Y+6	; 0x06
    2ca6:	b9 01       	movw	r22, r18
    2ca8:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <_Z10vector_dotPK6vectorS1_>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <sqrt>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	ab 83       	std	Y+3, r26	; 0x03
    2cc2:	bc 83       	std	Y+4, r27	; 0x04
	a->x /= mag;
    2cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc8:	fc 01       	movw	r30, r24
    2cca:	80 81       	ld	r24, Z
    2ccc:	91 81       	ldd	r25, Z+1	; 0x01
    2cce:	a2 81       	ldd	r26, Z+2	; 0x02
    2cd0:	b3 81       	ldd	r27, Z+3	; 0x03
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	29 81       	ldd	r18, Y+1	; 0x01
    2cd8:	3a 81       	ldd	r19, Y+2	; 0x02
    2cda:	4b 81       	ldd	r20, Y+3	; 0x03
    2cdc:	5c 81       	ldd	r21, Y+4	; 0x04
    2cde:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ce8:	3e 81       	ldd	r19, Y+6	; 0x06
    2cea:	f9 01       	movw	r30, r18
    2cec:	80 83       	st	Z, r24
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	a2 83       	std	Z+2, r26	; 0x02
    2cf2:	b3 83       	std	Z+3, r27	; 0x03
	a->y /= mag;
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	84 81       	ldd	r24, Z+4	; 0x04
    2cfc:	95 81       	ldd	r25, Z+5	; 0x05
    2cfe:	a6 81       	ldd	r26, Z+6	; 0x06
    2d00:	b7 81       	ldd	r27, Z+7	; 0x07
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	29 81       	ldd	r18, Y+1	; 0x01
    2d08:	3a 81       	ldd	r19, Y+2	; 0x02
    2d0a:	4b 81       	ldd	r20, Y+3	; 0x03
    2d0c:	5c 81       	ldd	r21, Y+4	; 0x04
    2d0e:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	2d 81       	ldd	r18, Y+5	; 0x05
    2d18:	3e 81       	ldd	r19, Y+6	; 0x06
    2d1a:	f9 01       	movw	r30, r18
    2d1c:	84 83       	std	Z+4, r24	; 0x04
    2d1e:	95 83       	std	Z+5, r25	; 0x05
    2d20:	a6 83       	std	Z+6, r26	; 0x06
    2d22:	b7 83       	std	Z+7, r27	; 0x07
	a->z /= mag;
    2d24:	8d 81       	ldd	r24, Y+5	; 0x05
    2d26:	9e 81       	ldd	r25, Y+6	; 0x06
    2d28:	fc 01       	movw	r30, r24
    2d2a:	80 85       	ldd	r24, Z+8	; 0x08
    2d2c:	91 85       	ldd	r25, Z+9	; 0x09
    2d2e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2d30:	b3 85       	ldd	r27, Z+11	; 0x0b
    2d32:	bc 01       	movw	r22, r24
    2d34:	cd 01       	movw	r24, r26
    2d36:	29 81       	ldd	r18, Y+1	; 0x01
    2d38:	3a 81       	ldd	r19, Y+2	; 0x02
    2d3a:	4b 81       	ldd	r20, Y+3	; 0x03
    2d3c:	5c 81       	ldd	r21, Y+4	; 0x04
    2d3e:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	2d 81       	ldd	r18, Y+5	; 0x05
    2d48:	3e 81       	ldd	r19, Y+6	; 0x06
    2d4a:	f9 01       	movw	r30, r18
    2d4c:	80 87       	std	Z+8, r24	; 0x08
    2d4e:	91 87       	std	Z+9, r25	; 0x09
    2d50:	a2 87       	std	Z+10, r26	; 0x0a
    2d52:	b3 87       	std	Z+11, r27	; 0x0b
}
    2d54:	26 96       	adiw	r28, 0x06	; 6
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <_ZN6Matrix4initEv>:
// Matrix functions


// Memory allocation function
void Matrix::init ()
{
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	df 93       	push	r29
    2d6c:	cf 93       	push	r28
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <_ZN6Matrix4initEv+0xa>
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <_ZN6Matrix4initEv+0xc>
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <_ZN6Matrix4initEv+0xe>
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
	mat = (float**)malloc(sizeof(float*)*row);
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	fc 01       	movw	r30, r24
    2d82:	80 81       	ld	r24, Z
    2d84:	91 81       	ldd	r25, Z+1	; 0x01
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <malloc>
    2d8e:	9c 01       	movw	r18, r24
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	fc 01       	movw	r30, r24
    2d96:	35 83       	std	Z+5, r19	; 0x05
    2d98:	24 83       	std	Z+4, r18	; 0x04
	if (mat == NULL)
    2d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9e:	fc 01       	movw	r30, r24
    2da0:	84 81       	ldd	r24, Z+4	; 0x04
    2da2:	95 81       	ldd	r25, Z+5	; 0x05
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	21 f4       	brne	.+8      	; 0x2db0 <_ZN6Matrix4initEv+0x4a>
			USART_Send_string("fail\n");
    2da8:	82 e4       	ldi	r24, 0x42	; 66
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	
	for (int i=0; i<row; i++)
    2db0:	1a 82       	std	Y+2, r1	; 0x02
    2db2:	19 82       	std	Y+1, r1	; 0x01
    2db4:	67 c0       	rjmp	.+206    	; 0x2e84 <_ZN6Matrix4initEv+0x11e>
	{
		mat[i] = (float*)malloc(sizeof(float)*col);
    2db6:	8d 81       	ldd	r24, Y+5	; 0x05
    2db8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dba:	fc 01       	movw	r30, r24
    2dbc:	24 81       	ldd	r18, Z+4	; 0x04
    2dbe:	35 81       	ldd	r19, Z+5	; 0x05
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	89 01       	movw	r16, r18
    2dca:	08 0f       	add	r16, r24
    2dcc:	19 1f       	adc	r17, r25
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	82 81       	ldd	r24, Z+2	; 0x02
    2dd6:	93 81       	ldd	r25, Z+3	; 0x03
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	88 0f       	add	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <malloc>
    2de4:	f8 01       	movw	r30, r16
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	80 83       	st	Z, r24
		if (mat[i] == NULL)
    2dea:	8d 81       	ldd	r24, Y+5	; 0x05
    2dec:	9e 81       	ldd	r25, Y+6	; 0x06
    2dee:	fc 01       	movw	r30, r24
    2df0:	24 81       	ldd	r18, Z+4	; 0x04
    2df2:	35 81       	ldd	r19, Z+5	; 0x05
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	82 0f       	add	r24, r18
    2dfe:	93 1f       	adc	r25, r19
    2e00:	fc 01       	movw	r30, r24
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	21 f4       	brne	.+8      	; 0x2e12 <_ZN6Matrix4initEv+0xac>
			USART_Send_string("fail2\n");
    2e0a:	88 e4       	ldi	r24, 0x48	; 72
    2e0c:	91 e0       	ldi	r25, 0x01	; 1
    2e0e:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		for(int j=0; j<col; j++)
    2e12:	1c 82       	std	Y+4, r1	; 0x04
    2e14:	1b 82       	std	Y+3, r1	; 0x03
    2e16:	23 c0       	rjmp	.+70     	; 0x2e5e <_ZN6Matrix4initEv+0xf8>
		{
			mat[i][j] = 0.0f;
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	24 81       	ldd	r18, Z+4	; 0x04
    2e20:	35 81       	ldd	r19, Z+5	; 0x05
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	82 0f       	add	r24, r18
    2e2c:	93 1f       	adc	r25, r19
    2e2e:	fc 01       	movw	r30, r24
    2e30:	20 81       	ld	r18, Z
    2e32:	31 81       	ldd	r19, Z+1	; 0x01
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	88 0f       	add	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	28 0f       	add	r18, r24
    2e42:	39 1f       	adc	r19, r25
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	dc 01       	movw	r26, r24
    2e4a:	f9 01       	movw	r30, r18
    2e4c:	80 83       	st	Z, r24
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	a2 83       	std	Z+2, r26	; 0x02
    2e52:	b3 83       	std	Z+3, r27	; 0x03
	for (int i=0; i<row; i++)
	{
		mat[i] = (float*)malloc(sizeof(float)*col);
		if (mat[i] == NULL)
			USART_Send_string("fail2\n");
		for(int j=0; j<col; j++)
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	01 96       	adiw	r24, 0x01	; 1
    2e5a:	9c 83       	std	Y+4, r25	; 0x04
    2e5c:	8b 83       	std	Y+3, r24	; 0x03
    2e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e60:	9e 81       	ldd	r25, Y+6	; 0x06
    2e62:	fc 01       	movw	r30, r24
    2e64:	22 81       	ldd	r18, Z+2	; 0x02
    2e66:	33 81       	ldd	r19, Z+3	; 0x03
    2e68:	41 e0       	ldi	r20, 0x01	; 1
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6e:	82 17       	cp	r24, r18
    2e70:	93 07       	cpc	r25, r19
    2e72:	0c f0       	brlt	.+2      	; 0x2e76 <_ZN6Matrix4initEv+0x110>
    2e74:	40 e0       	ldi	r20, 0x00	; 0
    2e76:	44 23       	and	r20, r20
    2e78:	79 f6       	brne	.-98     	; 0x2e18 <_ZN6Matrix4initEv+0xb2>
{
	mat = (float**)malloc(sizeof(float*)*row);
	if (mat == NULL)
			USART_Send_string("fail\n");
	
	for (int i=0; i<row; i++)
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7e:	01 96       	adiw	r24, 0x01	; 1
    2e80:	9a 83       	std	Y+2, r25	; 0x02
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	fc 01       	movw	r30, r24
    2e8a:	20 81       	ld	r18, Z
    2e8c:	31 81       	ldd	r19, Z+1	; 0x01
    2e8e:	41 e0       	ldi	r20, 0x01	; 1
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	9a 81       	ldd	r25, Y+2	; 0x02
    2e94:	82 17       	cp	r24, r18
    2e96:	93 07       	cpc	r25, r19
    2e98:	0c f0       	brlt	.+2      	; 0x2e9c <_ZN6Matrix4initEv+0x136>
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	44 23       	and	r20, r20
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <_ZN6Matrix4initEv+0x13c>
    2ea0:	8a cf       	rjmp	.-236    	; 0x2db6 <_ZN6Matrix4initEv+0x50>
		for(int j=0; j<col; j++)
		{
			mat[i][j] = 0.0f;
		}
	}	
}
    2ea2:	26 96       	adiw	r28, 0x06	; 6
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	08 95       	ret

00002eb8 <_ZN6MatrixC1Ev>:

// Default constructor
Matrix::Matrix()
    2eb8:	df 93       	push	r29
    2eba:	cf 93       	push	r28
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <_ZN6MatrixC1Ev+0x6>
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
{
	//USART_Send_string(".");
	row=3;
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	23 e0       	ldi	r18, 0x03	; 3
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	fc 01       	movw	r30, r24
    2ed0:	31 83       	std	Z+1, r19	; 0x01
    2ed2:	20 83       	st	Z, r18
	col=3;
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed8:	23 e0       	ldi	r18, 0x03	; 3
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	fc 01       	movw	r30, r24
    2ede:	33 83       	std	Z+3, r19	; 0x03
    2ee0:	22 83       	std	Z+2, r18	; 0x02
	init();
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee6:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN6Matrix4initEv>
	//USART_Send_string(",");
}
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	08 95       	ret

00002ef4 <_ZN6MatrixC1ERKS_>:

// Constructor copy
Matrix::Matrix(const Matrix& m)
    2ef4:	0f 93       	push	r16
    2ef6:	1f 93       	push	r17
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	28 97       	sbiw	r28, 0x08	; 8
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
    2f0c:	9e 83       	std	Y+6, r25	; 0x06
    2f0e:	8d 83       	std	Y+5, r24	; 0x05
    2f10:	78 87       	std	Y+8, r23	; 0x08
    2f12:	6f 83       	std	Y+7, r22	; 0x07
{
	row= m.row;
    2f14:	8f 81       	ldd	r24, Y+7	; 0x07
    2f16:	98 85       	ldd	r25, Y+8	; 0x08
    2f18:	fc 01       	movw	r30, r24
    2f1a:	20 81       	ld	r18, Z
    2f1c:	31 81       	ldd	r19, Z+1	; 0x01
    2f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f20:	9e 81       	ldd	r25, Y+6	; 0x06
    2f22:	fc 01       	movw	r30, r24
    2f24:	31 83       	std	Z+1, r19	; 0x01
    2f26:	20 83       	st	Z, r18
	col= m.col;
    2f28:	8f 81       	ldd	r24, Y+7	; 0x07
    2f2a:	98 85       	ldd	r25, Y+8	; 0x08
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	22 81       	ldd	r18, Z+2	; 0x02
    2f30:	33 81       	ldd	r19, Z+3	; 0x03
    2f32:	8d 81       	ldd	r24, Y+5	; 0x05
    2f34:	9e 81       	ldd	r25, Y+6	; 0x06
    2f36:	fc 01       	movw	r30, r24
    2f38:	33 83       	std	Z+3, r19	; 0x03
    2f3a:	22 83       	std	Z+2, r18	; 0x02
	
	mat = (float**)malloc(sizeof(float*)*row);
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	fc 01       	movw	r30, r24
    2f42:	80 81       	ld	r24, Z
    2f44:	91 81       	ldd	r25, Z+1	; 0x01
    2f46:	88 0f       	add	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <malloc>
    2f4e:	9c 01       	movw	r18, r24
    2f50:	8d 81       	ldd	r24, Y+5	; 0x05
    2f52:	9e 81       	ldd	r25, Y+6	; 0x06
    2f54:	fc 01       	movw	r30, r24
    2f56:	35 83       	std	Z+5, r19	; 0x05
    2f58:	24 83       	std	Z+4, r18	; 0x04
	if (mat == NULL)
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	fc 01       	movw	r30, r24
    2f60:	84 81       	ldd	r24, Z+4	; 0x04
    2f62:	95 81       	ldd	r25, Z+5	; 0x05
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	21 f4       	brne	.+8      	; 0x2f70 <_ZN6MatrixC1ERKS_+0x7c>
			USART_Send_string("fail\n");
    2f68:	82 e4       	ldi	r24, 0x42	; 66
    2f6a:	91 e0       	ldi	r25, 0x01	; 1
    2f6c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	
	for (int i=0; i<row; i++)
    2f70:	1a 82       	std	Y+2, r1	; 0x02
    2f72:	19 82       	std	Y+1, r1	; 0x01
    2f74:	74 c0       	rjmp	.+232    	; 0x305e <_ZN6MatrixC1ERKS_+0x16a>
	{
		mat[i] = (float*)malloc(sizeof(float)*col);
    2f76:	8d 81       	ldd	r24, Y+5	; 0x05
    2f78:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	24 81       	ldd	r18, Z+4	; 0x04
    2f7e:	35 81       	ldd	r19, Z+5	; 0x05
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	89 01       	movw	r16, r18
    2f8a:	08 0f       	add	r16, r24
    2f8c:	19 1f       	adc	r17, r25
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	fc 01       	movw	r30, r24
    2f94:	82 81       	ldd	r24, Z+2	; 0x02
    2f96:	93 81       	ldd	r25, Z+3	; 0x03
    2f98:	88 0f       	add	r24, r24
    2f9a:	99 1f       	adc	r25, r25
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <malloc>
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	91 83       	std	Z+1, r25	; 0x01
    2fa8:	80 83       	st	Z, r24
		if (mat[i] == NULL)
    2faa:	8d 81       	ldd	r24, Y+5	; 0x05
    2fac:	9e 81       	ldd	r25, Y+6	; 0x06
    2fae:	fc 01       	movw	r30, r24
    2fb0:	24 81       	ldd	r18, Z+4	; 0x04
    2fb2:	35 81       	ldd	r19, Z+5	; 0x05
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	88 0f       	add	r24, r24
    2fba:	99 1f       	adc	r25, r25
    2fbc:	82 0f       	add	r24, r18
    2fbe:	93 1f       	adc	r25, r19
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	80 81       	ld	r24, Z
    2fc4:	91 81       	ldd	r25, Z+1	; 0x01
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	21 f4       	brne	.+8      	; 0x2fd2 <_ZN6MatrixC1ERKS_+0xde>
			USART_Send_string("fail\n");
    2fca:	82 e4       	ldi	r24, 0x42	; 66
    2fcc:	91 e0       	ldi	r25, 0x01	; 1
    2fce:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		for(int j=0; j<col; j++)
    2fd2:	1c 82       	std	Y+4, r1	; 0x04
    2fd4:	1b 82       	std	Y+3, r1	; 0x03
    2fd6:	30 c0       	rjmp	.+96     	; 0x3038 <_ZN6MatrixC1ERKS_+0x144>
		{
			(*this)(i, j) = m.mat[i][j];
    2fd8:	49 81       	ldd	r20, Y+1	; 0x01
    2fda:	5a 81       	ldd	r21, Y+2	; 0x02
    2fdc:	2b 81       	ldd	r18, Y+3	; 0x03
    2fde:	3c 81       	ldd	r19, Y+4	; 0x04
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	ba 01       	movw	r22, r20
    2fe6:	a9 01       	movw	r20, r18
    2fe8:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN6MatrixclEjj>
    2fec:	9c 01       	movw	r18, r24
    2fee:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff0:	98 85       	ldd	r25, Y+8	; 0x08
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	44 81       	ldd	r20, Z+4	; 0x04
    2ff6:	55 81       	ldd	r21, Z+5	; 0x05
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	84 0f       	add	r24, r20
    3002:	95 1f       	adc	r25, r21
    3004:	fc 01       	movw	r30, r24
    3006:	40 81       	ld	r20, Z
    3008:	51 81       	ldd	r21, Z+1	; 0x01
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	84 0f       	add	r24, r20
    3018:	95 1f       	adc	r25, r21
    301a:	fc 01       	movw	r30, r24
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	a2 81       	ldd	r26, Z+2	; 0x02
    3022:	b3 81       	ldd	r27, Z+3	; 0x03
    3024:	f9 01       	movw	r30, r18
    3026:	80 83       	st	Z, r24
    3028:	91 83       	std	Z+1, r25	; 0x01
    302a:	a2 83       	std	Z+2, r26	; 0x02
    302c:	b3 83       	std	Z+3, r27	; 0x03
	for (int i=0; i<row; i++)
	{
		mat[i] = (float*)malloc(sizeof(float)*col);
		if (mat[i] == NULL)
			USART_Send_string("fail\n");
		for(int j=0; j<col; j++)
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	01 96       	adiw	r24, 0x01	; 1
    3034:	9c 83       	std	Y+4, r25	; 0x04
    3036:	8b 83       	std	Y+3, r24	; 0x03
    3038:	8d 81       	ldd	r24, Y+5	; 0x05
    303a:	9e 81       	ldd	r25, Y+6	; 0x06
    303c:	fc 01       	movw	r30, r24
    303e:	22 81       	ldd	r18, Z+2	; 0x02
    3040:	33 81       	ldd	r19, Z+3	; 0x03
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	9c 81       	ldd	r25, Y+4	; 0x04
    3048:	82 17       	cp	r24, r18
    304a:	93 07       	cpc	r25, r19
    304c:	0c f0       	brlt	.+2      	; 0x3050 <_ZN6MatrixC1ERKS_+0x15c>
    304e:	40 e0       	ldi	r20, 0x00	; 0
    3050:	44 23       	and	r20, r20
    3052:	11 f6       	brne	.-124    	; 0x2fd8 <_ZN6MatrixC1ERKS_+0xe4>
	
	mat = (float**)malloc(sizeof(float*)*row);
	if (mat == NULL)
			USART_Send_string("fail\n");
	
	for (int i=0; i<row; i++)
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	9a 81       	ldd	r25, Y+2	; 0x02
    3058:	01 96       	adiw	r24, 0x01	; 1
    305a:	9a 83       	std	Y+2, r25	; 0x02
    305c:	89 83       	std	Y+1, r24	; 0x01
    305e:	8d 81       	ldd	r24, Y+5	; 0x05
    3060:	9e 81       	ldd	r25, Y+6	; 0x06
    3062:	fc 01       	movw	r30, r24
    3064:	20 81       	ld	r18, Z
    3066:	31 81       	ldd	r19, Z+1	; 0x01
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	9a 81       	ldd	r25, Y+2	; 0x02
    306e:	82 17       	cp	r24, r18
    3070:	93 07       	cpc	r25, r19
    3072:	0c f0       	brlt	.+2      	; 0x3076 <_ZN6MatrixC1ERKS_+0x182>
    3074:	40 e0       	ldi	r20, 0x00	; 0
    3076:	44 23       	and	r20, r20
    3078:	09 f0       	breq	.+2      	; 0x307c <_ZN6MatrixC1ERKS_+0x188>
    307a:	7d cf       	rjmp	.-262    	; 0x2f76 <_ZN6MatrixC1ERKS_+0x82>
		for(int j=0; j<col; j++)
		{
			(*this)(i, j) = m.mat[i][j];
		}
	}	
}
    307c:	28 96       	adiw	r28, 0x08	; 8
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
    3088:	cf 91       	pop	r28
    308a:	df 91       	pop	r29
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	08 95       	ret

00003092 <_ZN6MatrixC1Eii>:


// User constructor
Matrix::Matrix(int rownum , int colnum)
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	00 d0       	rcall	.+0      	; 0x3098 <_ZN6MatrixC1Eii+0x6>
    3098:	00 d0       	rcall	.+0      	; 0x309a <_ZN6MatrixC1Eii+0x8>
    309a:	00 d0       	rcall	.+0      	; 0x309c <_ZN6MatrixC1Eii+0xa>
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	9a 83       	std	Y+2, r25	; 0x02
    30a2:	89 83       	std	Y+1, r24	; 0x01
    30a4:	7c 83       	std	Y+4, r23	; 0x04
    30a6:	6b 83       	std	Y+3, r22	; 0x03
    30a8:	5e 83       	std	Y+6, r21	; 0x06
    30aa:	4d 83       	std	Y+5, r20	; 0x05
{

	row=rownum;
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	2b 81       	ldd	r18, Y+3	; 0x03
    30b2:	3c 81       	ldd	r19, Y+4	; 0x04
    30b4:	fc 01       	movw	r30, r24
    30b6:	31 83       	std	Z+1, r19	; 0x01
    30b8:	20 83       	st	Z, r18
	col=colnum;
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	9a 81       	ldd	r25, Y+2	; 0x02
    30be:	2d 81       	ldd	r18, Y+5	; 0x05
    30c0:	3e 81       	ldd	r19, Y+6	; 0x06
    30c2:	fc 01       	movw	r30, r24
    30c4:	33 83       	std	Z+3, r19	; 0x03
    30c6:	22 83       	std	Z+2, r18	; 0x02
	init();	
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	9a 81       	ldd	r25, Y+2	; 0x02
    30cc:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN6Matrix4initEv>
}
    30d0:	26 96       	adiw	r28, 0x06	; 6
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <_ZN6MatrixD1Ev>:




// Destructor
Matrix::~Matrix()
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <_ZN6MatrixD1Ev+0x6>
    30e8:	00 d0       	rcall	.+0      	; 0x30ea <_ZN6MatrixD1Ev+0x8>
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	9c 83       	std	Y+4, r25	; 0x04
    30f0:	8b 83       	std	Y+3, r24	; 0x03
{
	//USART_Send_string("?");
	for(int i=0; i<row; i++)
    30f2:	1a 82       	std	Y+2, r1	; 0x02
    30f4:	19 82       	std	Y+1, r1	; 0x01
    30f6:	15 c0       	rjmp	.+42     	; 0x3122 <_ZN6MatrixD1Ev+0x40>
	{
			free(this->mat[i]);
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	9c 81       	ldd	r25, Y+4	; 0x04
    30fc:	fc 01       	movw	r30, r24
    30fe:	24 81       	ldd	r18, Z+4	; 0x04
    3100:	35 81       	ldd	r19, Z+5	; 0x05
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	9a 81       	ldd	r25, Y+2	; 0x02
    3106:	88 0f       	add	r24, r24
    3108:	99 1f       	adc	r25, r25
    310a:	82 0f       	add	r24, r18
    310c:	93 1f       	adc	r25, r19
    310e:	fc 01       	movw	r30, r24
    3110:	80 81       	ld	r24, Z
    3112:	91 81       	ldd	r25, Z+1	; 0x01
    3114:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <free>

// Destructor
Matrix::~Matrix()
{
	//USART_Send_string("?");
	for(int i=0; i<row; i++)
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	01 96       	adiw	r24, 0x01	; 1
    311e:	9a 83       	std	Y+2, r25	; 0x02
    3120:	89 83       	std	Y+1, r24	; 0x01
    3122:	8b 81       	ldd	r24, Y+3	; 0x03
    3124:	9c 81       	ldd	r25, Y+4	; 0x04
    3126:	fc 01       	movw	r30, r24
    3128:	20 81       	ld	r18, Z
    312a:	31 81       	ldd	r19, Z+1	; 0x01
    312c:	41 e0       	ldi	r20, 0x01	; 1
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	9a 81       	ldd	r25, Y+2	; 0x02
    3132:	82 17       	cp	r24, r18
    3134:	93 07       	cpc	r25, r19
    3136:	0c f0       	brlt	.+2      	; 0x313a <_ZN6MatrixD1Ev+0x58>
    3138:	40 e0       	ldi	r20, 0x00	; 0
    313a:	44 23       	and	r20, r20
    313c:	e9 f6       	brne	.-70     	; 0x30f8 <_ZN6MatrixD1Ev+0x16>
	{
			free(this->mat[i]);
	}	
	free(this->mat);
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	9c 81       	ldd	r25, Y+4	; 0x04
    3142:	fc 01       	movw	r30, r24
    3144:	84 81       	ldd	r24, Z+4	; 0x04
    3146:	95 81       	ldd	r25, Z+5	; 0x05
    3148:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <free>
	//USART_Send_string("!");
}
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	cf 91       	pop	r28
    3156:	df 91       	pop	r29
    3158:	08 95       	ret

0000315a <_ZN6MatrixaSERKS_>:

// Operators

// Allocation
Matrix& Matrix::operator =(const Matrix& Other)
{
    315a:	df 93       	push	r29
    315c:	cf 93       	push	r28
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	2a 97       	sbiw	r28, 0x0a	; 10
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	98 87       	std	Y+8, r25	; 0x08
    3170:	8f 83       	std	Y+7, r24	; 0x07
    3172:	7a 87       	std	Y+10, r23	; 0x0a
    3174:	69 87       	std	Y+9, r22	; 0x09
	row=Other.row;
    3176:	89 85       	ldd	r24, Y+9	; 0x09
    3178:	9a 85       	ldd	r25, Y+10	; 0x0a
    317a:	fc 01       	movw	r30, r24
    317c:	20 81       	ld	r18, Z
    317e:	31 81       	ldd	r19, Z+1	; 0x01
    3180:	8f 81       	ldd	r24, Y+7	; 0x07
    3182:	98 85       	ldd	r25, Y+8	; 0x08
    3184:	fc 01       	movw	r30, r24
    3186:	31 83       	std	Z+1, r19	; 0x01
    3188:	20 83       	st	Z, r18
	col=Other.col;
    318a:	89 85       	ldd	r24, Y+9	; 0x09
    318c:	9a 85       	ldd	r25, Y+10	; 0x0a
    318e:	fc 01       	movw	r30, r24
    3190:	22 81       	ldd	r18, Z+2	; 0x02
    3192:	33 81       	ldd	r19, Z+3	; 0x03
    3194:	8f 81       	ldd	r24, Y+7	; 0x07
    3196:	98 85       	ldd	r25, Y+8	; 0x08
    3198:	fc 01       	movw	r30, r24
    319a:	33 83       	std	Z+3, r19	; 0x03
    319c:	22 83       	std	Z+2, r18	; 0x02
	
    // Destruction de la ressource (ici un pointeur brut)
	for (int i=0; i<row; i++)
    319e:	1a 82       	std	Y+2, r1	; 0x02
    31a0:	19 82       	std	Y+1, r1	; 0x01
    31a2:	15 c0       	rjmp	.+42     	; 0x31ce <_ZN6MatrixaSERKS_+0x74>
	{
		free (mat[i]);
    31a4:	8f 81       	ldd	r24, Y+7	; 0x07
    31a6:	98 85       	ldd	r25, Y+8	; 0x08
    31a8:	fc 01       	movw	r30, r24
    31aa:	24 81       	ldd	r18, Z+4	; 0x04
    31ac:	35 81       	ldd	r19, Z+5	; 0x05
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	9a 81       	ldd	r25, Y+2	; 0x02
    31b2:	88 0f       	add	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	82 0f       	add	r24, r18
    31b8:	93 1f       	adc	r25, r19
    31ba:	fc 01       	movw	r30, r24
    31bc:	80 81       	ld	r24, Z
    31be:	91 81       	ldd	r25, Z+1	; 0x01
    31c0:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <free>
{
	row=Other.row;
	col=Other.col;
	
    // Destruction de la ressource (ici un pointeur brut)
	for (int i=0; i<row; i++)
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	01 96       	adiw	r24, 0x01	; 1
    31ca:	9a 83       	std	Y+2, r25	; 0x02
    31cc:	89 83       	std	Y+1, r24	; 0x01
    31ce:	8f 81       	ldd	r24, Y+7	; 0x07
    31d0:	98 85       	ldd	r25, Y+8	; 0x08
    31d2:	fc 01       	movw	r30, r24
    31d4:	20 81       	ld	r18, Z
    31d6:	31 81       	ldd	r19, Z+1	; 0x01
    31d8:	41 e0       	ldi	r20, 0x01	; 1
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	9a 81       	ldd	r25, Y+2	; 0x02
    31de:	82 17       	cp	r24, r18
    31e0:	93 07       	cpc	r25, r19
    31e2:	0c f0       	brlt	.+2      	; 0x31e6 <_ZN6MatrixaSERKS_+0x8c>
    31e4:	40 e0       	ldi	r20, 0x00	; 0
    31e6:	44 23       	and	r20, r20
    31e8:	e9 f6       	brne	.-70     	; 0x31a4 <_ZN6MatrixaSERKS_+0x4a>
	{
		free (mat[i]);
	}
    free(this->mat);
    31ea:	8f 81       	ldd	r24, Y+7	; 0x07
    31ec:	98 85       	ldd	r25, Y+8	; 0x08
    31ee:	fc 01       	movw	r30, r24
    31f0:	84 81       	ldd	r24, Z+4	; 0x04
    31f2:	95 81       	ldd	r25, Z+5	; 0x05
    31f4:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <free>

    // Allocation d'une nouvelle
    init();
    31f8:	8f 81       	ldd	r24, Y+7	; 0x07
    31fa:	98 85       	ldd	r25, Y+8	; 0x08
    31fc:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN6Matrix4initEv>

    // Copie de la ressource
    for (int i=0; i<this->row; i++)
    3200:	1c 82       	std	Y+4, r1	; 0x04
    3202:	1b 82       	std	Y+3, r1	; 0x03
    3204:	52 c0       	rjmp	.+164    	; 0x32aa <_ZN6MatrixaSERKS_+0x150>
	{
		// Handles columns of right Matrix
		for (int j=0; j<this->col; j++)
    3206:	1e 82       	std	Y+6, r1	; 0x06
    3208:	1d 82       	std	Y+5, r1	; 0x05
    320a:	3b c0       	rjmp	.+118    	; 0x3282 <_ZN6MatrixaSERKS_+0x128>
		{
			// Handles the multiplication 
				this->mat[i][j] =Other.mat[i][j];
    320c:	8f 81       	ldd	r24, Y+7	; 0x07
    320e:	98 85       	ldd	r25, Y+8	; 0x08
    3210:	fc 01       	movw	r30, r24
    3212:	24 81       	ldd	r18, Z+4	; 0x04
    3214:	35 81       	ldd	r19, Z+5	; 0x05
    3216:	8b 81       	ldd	r24, Y+3	; 0x03
    3218:	9c 81       	ldd	r25, Y+4	; 0x04
    321a:	88 0f       	add	r24, r24
    321c:	99 1f       	adc	r25, r25
    321e:	82 0f       	add	r24, r18
    3220:	93 1f       	adc	r25, r19
    3222:	fc 01       	movw	r30, r24
    3224:	20 81       	ld	r18, Z
    3226:	31 81       	ldd	r19, Z+1	; 0x01
    3228:	8d 81       	ldd	r24, Y+5	; 0x05
    322a:	9e 81       	ldd	r25, Y+6	; 0x06
    322c:	88 0f       	add	r24, r24
    322e:	99 1f       	adc	r25, r25
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	28 0f       	add	r18, r24
    3236:	39 1f       	adc	r19, r25
    3238:	89 85       	ldd	r24, Y+9	; 0x09
    323a:	9a 85       	ldd	r25, Y+10	; 0x0a
    323c:	fc 01       	movw	r30, r24
    323e:	44 81       	ldd	r20, Z+4	; 0x04
    3240:	55 81       	ldd	r21, Z+5	; 0x05
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	9c 81       	ldd	r25, Y+4	; 0x04
    3246:	88 0f       	add	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	84 0f       	add	r24, r20
    324c:	95 1f       	adc	r25, r21
    324e:	fc 01       	movw	r30, r24
    3250:	40 81       	ld	r20, Z
    3252:	51 81       	ldd	r21, Z+1	; 0x01
    3254:	8d 81       	ldd	r24, Y+5	; 0x05
    3256:	9e 81       	ldd	r25, Y+6	; 0x06
    3258:	88 0f       	add	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	88 0f       	add	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	84 0f       	add	r24, r20
    3262:	95 1f       	adc	r25, r21
    3264:	fc 01       	movw	r30, r24
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	a2 81       	ldd	r26, Z+2	; 0x02
    326c:	b3 81       	ldd	r27, Z+3	; 0x03
    326e:	f9 01       	movw	r30, r18
    3270:	80 83       	st	Z, r24
    3272:	91 83       	std	Z+1, r25	; 0x01
    3274:	a2 83       	std	Z+2, r26	; 0x02
    3276:	b3 83       	std	Z+3, r27	; 0x03

    // Copie de la ressource
    for (int i=0; i<this->row; i++)
	{
		// Handles columns of right Matrix
		for (int j=0; j<this->col; j++)
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	9e 81       	ldd	r25, Y+6	; 0x06
    327c:	01 96       	adiw	r24, 0x01	; 1
    327e:	9e 83       	std	Y+6, r25	; 0x06
    3280:	8d 83       	std	Y+5, r24	; 0x05
    3282:	8f 81       	ldd	r24, Y+7	; 0x07
    3284:	98 85       	ldd	r25, Y+8	; 0x08
    3286:	fc 01       	movw	r30, r24
    3288:	22 81       	ldd	r18, Z+2	; 0x02
    328a:	33 81       	ldd	r19, Z+3	; 0x03
    328c:	41 e0       	ldi	r20, 0x01	; 1
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	9e 81       	ldd	r25, Y+6	; 0x06
    3292:	82 17       	cp	r24, r18
    3294:	93 07       	cpc	r25, r19
    3296:	0c f0       	brlt	.+2      	; 0x329a <_ZN6MatrixaSERKS_+0x140>
    3298:	40 e0       	ldi	r20, 0x00	; 0
    329a:	44 23       	and	r20, r20
    329c:	09 f0       	breq	.+2      	; 0x32a0 <_ZN6MatrixaSERKS_+0x146>
    329e:	b6 cf       	rjmp	.-148    	; 0x320c <_ZN6MatrixaSERKS_+0xb2>

    // Allocation d'une nouvelle
    init();

    // Copie de la ressource
    for (int i=0; i<this->row; i++)
    32a0:	8b 81       	ldd	r24, Y+3	; 0x03
    32a2:	9c 81       	ldd	r25, Y+4	; 0x04
    32a4:	01 96       	adiw	r24, 0x01	; 1
    32a6:	9c 83       	std	Y+4, r25	; 0x04
    32a8:	8b 83       	std	Y+3, r24	; 0x03
    32aa:	8f 81       	ldd	r24, Y+7	; 0x07
    32ac:	98 85       	ldd	r25, Y+8	; 0x08
    32ae:	fc 01       	movw	r30, r24
    32b0:	20 81       	ld	r18, Z
    32b2:	31 81       	ldd	r19, Z+1	; 0x01
    32b4:	41 e0       	ldi	r20, 0x01	; 1
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ba:	82 17       	cp	r24, r18
    32bc:	93 07       	cpc	r25, r19
    32be:	0c f0       	brlt	.+2      	; 0x32c2 <_ZN6MatrixaSERKS_+0x168>
    32c0:	40 e0       	ldi	r20, 0x00	; 0
    32c2:	44 23       	and	r20, r20
    32c4:	09 f0       	breq	.+2      	; 0x32c8 <_ZN6MatrixaSERKS_+0x16e>
    32c6:	9f cf       	rjmp	.-194    	; 0x3206 <_ZN6MatrixaSERKS_+0xac>
		{
			// Handles the multiplication 
				this->mat[i][j] =Other.mat[i][j];
		}
	}
    return *this;
    32c8:	8f 81       	ldd	r24, Y+7	; 0x07
    32ca:	98 85       	ldd	r25, Y+8	; 0x08
} 
    32cc:	2a 96       	adiw	r28, 0x0a	; 10
    32ce:	0f b6       	in	r0, 0x3f	; 63
    32d0:	f8 94       	cli
    32d2:	de bf       	out	0x3e, r29	; 62
    32d4:	0f be       	out	0x3f, r0	; 63
    32d6:	cd bf       	out	0x3d, r28	; 61
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <_ZplRK6MatrixS1_>:


// Addition
Matrix operator+(Matrix const& a, Matrix const& b)
{
    32de:	ef 92       	push	r14
    32e0:	ff 92       	push	r15
    32e2:	0f 93       	push	r16
    32e4:	1f 93       	push	r17
    32e6:	df 93       	push	r29
    32e8:	cf 93       	push	r28
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	2e 97       	sbiw	r28, 0x0e	; 14
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	8c 01       	movw	r16, r24
    32fc:	7c 87       	std	Y+12, r23	; 0x0c
    32fe:	6b 87       	std	Y+11, r22	; 0x0b
    3300:	5e 87       	std	Y+14, r21	; 0x0e
    3302:	4d 87       	std	Y+13, r20	; 0x0d
	Matrix copie;
    3304:	c8 01       	movw	r24, r16
    3306:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN6MatrixC1Ev>
    
	// Copie de la ressource
    for (int i=0; i<a.row; i++)
    330a:	1a 82       	std	Y+2, r1	; 0x02
    330c:	19 82       	std	Y+1, r1	; 0x01
    330e:	73 c0       	rjmp	.+230    	; 0x33f6 <_ZplRK6MatrixS1_+0x118>
	{
		// Handles columns of right Matrix
		for (int j=0; j<a.col; j++)
    3310:	1c 82       	std	Y+4, r1	; 0x04
    3312:	1b 82       	std	Y+3, r1	; 0x03
    3314:	5c c0       	rjmp	.+184    	; 0x33ce <_ZplRK6MatrixS1_+0xf0>
		{
			// Handles the multiplication 
				copie.mat[i][j] = a.mat[i][j] + b.mat[i][j];
    3316:	c8 01       	movw	r24, r16
    3318:	fc 01       	movw	r30, r24
    331a:	24 81       	ldd	r18, Z+4	; 0x04
    331c:	35 81       	ldd	r19, Z+5	; 0x05
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	88 0f       	add	r24, r24
    3324:	99 1f       	adc	r25, r25
    3326:	82 0f       	add	r24, r18
    3328:	93 1f       	adc	r25, r19
    332a:	fc 01       	movw	r30, r24
    332c:	20 81       	ld	r18, Z
    332e:	31 81       	ldd	r19, Z+1	; 0x01
    3330:	8b 81       	ldd	r24, Y+3	; 0x03
    3332:	9c 81       	ldd	r25, Y+4	; 0x04
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	88 0f       	add	r24, r24
    333a:	99 1f       	adc	r25, r25
    333c:	79 01       	movw	r14, r18
    333e:	e8 0e       	add	r14, r24
    3340:	f9 1e       	adc	r15, r25
    3342:	8b 85       	ldd	r24, Y+11	; 0x0b
    3344:	9c 85       	ldd	r25, Y+12	; 0x0c
    3346:	fc 01       	movw	r30, r24
    3348:	24 81       	ldd	r18, Z+4	; 0x04
    334a:	35 81       	ldd	r19, Z+5	; 0x05
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	9a 81       	ldd	r25, Y+2	; 0x02
    3350:	88 0f       	add	r24, r24
    3352:	99 1f       	adc	r25, r25
    3354:	82 0f       	add	r24, r18
    3356:	93 1f       	adc	r25, r19
    3358:	fc 01       	movw	r30, r24
    335a:	20 81       	ld	r18, Z
    335c:	31 81       	ldd	r19, Z+1	; 0x01
    335e:	8b 81       	ldd	r24, Y+3	; 0x03
    3360:	9c 81       	ldd	r25, Y+4	; 0x04
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	88 0f       	add	r24, r24
    3368:	99 1f       	adc	r25, r25
    336a:	82 0f       	add	r24, r18
    336c:	93 1f       	adc	r25, r19
    336e:	fc 01       	movw	r30, r24
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	a2 81       	ldd	r26, Z+2	; 0x02
    3376:	b3 81       	ldd	r27, Z+3	; 0x03
    3378:	2d 85       	ldd	r18, Y+13	; 0x0d
    337a:	3e 85       	ldd	r19, Y+14	; 0x0e
    337c:	f9 01       	movw	r30, r18
    337e:	44 81       	ldd	r20, Z+4	; 0x04
    3380:	55 81       	ldd	r21, Z+5	; 0x05
    3382:	29 81       	ldd	r18, Y+1	; 0x01
    3384:	3a 81       	ldd	r19, Y+2	; 0x02
    3386:	22 0f       	add	r18, r18
    3388:	33 1f       	adc	r19, r19
    338a:	24 0f       	add	r18, r20
    338c:	35 1f       	adc	r19, r21
    338e:	f9 01       	movw	r30, r18
    3390:	40 81       	ld	r20, Z
    3392:	51 81       	ldd	r21, Z+1	; 0x01
    3394:	2b 81       	ldd	r18, Y+3	; 0x03
    3396:	3c 81       	ldd	r19, Y+4	; 0x04
    3398:	22 0f       	add	r18, r18
    339a:	33 1f       	adc	r19, r19
    339c:	22 0f       	add	r18, r18
    339e:	33 1f       	adc	r19, r19
    33a0:	24 0f       	add	r18, r20
    33a2:	35 1f       	adc	r19, r21
    33a4:	f9 01       	movw	r30, r18
    33a6:	20 81       	ld	r18, Z
    33a8:	31 81       	ldd	r19, Z+1	; 0x01
    33aa:	42 81       	ldd	r20, Z+2	; 0x02
    33ac:	53 81       	ldd	r21, Z+3	; 0x03
    33ae:	bc 01       	movw	r22, r24
    33b0:	cd 01       	movw	r24, r26
    33b2:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	f7 01       	movw	r30, r14
    33bc:	80 83       	st	Z, r24
    33be:	91 83       	std	Z+1, r25	; 0x01
    33c0:	a2 83       	std	Z+2, r26	; 0x02
    33c2:	b3 83       	std	Z+3, r27	; 0x03
    
	// Copie de la ressource
    for (int i=0; i<a.row; i++)
	{
		// Handles columns of right Matrix
		for (int j=0; j<a.col; j++)
    33c4:	8b 81       	ldd	r24, Y+3	; 0x03
    33c6:	9c 81       	ldd	r25, Y+4	; 0x04
    33c8:	01 96       	adiw	r24, 0x01	; 1
    33ca:	9c 83       	std	Y+4, r25	; 0x04
    33cc:	8b 83       	std	Y+3, r24	; 0x03
    33ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    33d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    33d2:	fc 01       	movw	r30, r24
    33d4:	22 81       	ldd	r18, Z+2	; 0x02
    33d6:	33 81       	ldd	r19, Z+3	; 0x03
    33d8:	41 e0       	ldi	r20, 0x01	; 1
    33da:	8b 81       	ldd	r24, Y+3	; 0x03
    33dc:	9c 81       	ldd	r25, Y+4	; 0x04
    33de:	82 17       	cp	r24, r18
    33e0:	93 07       	cpc	r25, r19
    33e2:	0c f0       	brlt	.+2      	; 0x33e6 <_ZplRK6MatrixS1_+0x108>
    33e4:	40 e0       	ldi	r20, 0x00	; 0
    33e6:	44 23       	and	r20, r20
    33e8:	09 f0       	breq	.+2      	; 0x33ec <_ZplRK6MatrixS1_+0x10e>
    33ea:	95 cf       	rjmp	.-214    	; 0x3316 <_ZplRK6MatrixS1_+0x38>
Matrix operator+(Matrix const& a, Matrix const& b)
{
	Matrix copie;
    
	// Copie de la ressource
    for (int i=0; i<a.row; i++)
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	9a 81       	ldd	r25, Y+2	; 0x02
    33f0:	01 96       	adiw	r24, 0x01	; 1
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	89 83       	std	Y+1, r24	; 0x01
    33f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    33f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    33fa:	fc 01       	movw	r30, r24
    33fc:	20 81       	ld	r18, Z
    33fe:	31 81       	ldd	r19, Z+1	; 0x01
    3400:	41 e0       	ldi	r20, 0x01	; 1
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	9a 81       	ldd	r25, Y+2	; 0x02
    3406:	82 17       	cp	r24, r18
    3408:	93 07       	cpc	r25, r19
    340a:	0c f0       	brlt	.+2      	; 0x340e <_ZplRK6MatrixS1_+0x130>
    340c:	40 e0       	ldi	r20, 0x00	; 0
    340e:	44 23       	and	r20, r20
    3410:	09 f0       	breq	.+2      	; 0x3414 <_ZplRK6MatrixS1_+0x136>
    3412:	7e cf       	rjmp	.-260    	; 0x3310 <_ZplRK6MatrixS1_+0x32>
		}
	}
	
	
    return copie;
}
    3414:	c8 01       	movw	r24, r16
    3416:	c8 01       	movw	r24, r16
    3418:	2e 96       	adiw	r28, 0x0e	; 14
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	ff 90       	pop	r15
    342e:	ef 90       	pop	r14
    3430:	08 95       	ret

00003432 <_ZmiRK6MatrixS1_>:

// Substraction
Matrix operator-(Matrix const& a, Matrix const& b)
{
    3432:	ef 92       	push	r14
    3434:	ff 92       	push	r15
    3436:	0f 93       	push	r16
    3438:	1f 93       	push	r17
    343a:	df 93       	push	r29
    343c:	cf 93       	push	r28
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	2e 97       	sbiw	r28, 0x0e	; 14
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	8c 01       	movw	r16, r24
    3450:	7c 87       	std	Y+12, r23	; 0x0c
    3452:	6b 87       	std	Y+11, r22	; 0x0b
    3454:	5e 87       	std	Y+14, r21	; 0x0e
    3456:	4d 87       	std	Y+13, r20	; 0x0d
	Matrix copie;
    3458:	c8 01       	movw	r24, r16
    345a:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN6MatrixC1Ev>
    
	// Copie de la ressource
    for (int i=0; i<a.row; i++)
    345e:	1a 82       	std	Y+2, r1	; 0x02
    3460:	19 82       	std	Y+1, r1	; 0x01
    3462:	73 c0       	rjmp	.+230    	; 0x354a <_ZmiRK6MatrixS1_+0x118>
	{
		// Handles columns of right Matrix
		for (int j=0; j<a.col; j++)
    3464:	1c 82       	std	Y+4, r1	; 0x04
    3466:	1b 82       	std	Y+3, r1	; 0x03
    3468:	5c c0       	rjmp	.+184    	; 0x3522 <_ZmiRK6MatrixS1_+0xf0>
		{
			// Handles the multiplication 
				copie.mat[i][j] = a.mat[i][j] - b.mat[i][j];
    346a:	c8 01       	movw	r24, r16
    346c:	fc 01       	movw	r30, r24
    346e:	24 81       	ldd	r18, Z+4	; 0x04
    3470:	35 81       	ldd	r19, Z+5	; 0x05
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	9a 81       	ldd	r25, Y+2	; 0x02
    3476:	88 0f       	add	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	82 0f       	add	r24, r18
    347c:	93 1f       	adc	r25, r19
    347e:	fc 01       	movw	r30, r24
    3480:	20 81       	ld	r18, Z
    3482:	31 81       	ldd	r19, Z+1	; 0x01
    3484:	8b 81       	ldd	r24, Y+3	; 0x03
    3486:	9c 81       	ldd	r25, Y+4	; 0x04
    3488:	88 0f       	add	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	88 0f       	add	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	79 01       	movw	r14, r18
    3492:	e8 0e       	add	r14, r24
    3494:	f9 1e       	adc	r15, r25
    3496:	8b 85       	ldd	r24, Y+11	; 0x0b
    3498:	9c 85       	ldd	r25, Y+12	; 0x0c
    349a:	fc 01       	movw	r30, r24
    349c:	24 81       	ldd	r18, Z+4	; 0x04
    349e:	35 81       	ldd	r19, Z+5	; 0x05
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	9a 81       	ldd	r25, Y+2	; 0x02
    34a4:	88 0f       	add	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	82 0f       	add	r24, r18
    34aa:	93 1f       	adc	r25, r19
    34ac:	fc 01       	movw	r30, r24
    34ae:	20 81       	ld	r18, Z
    34b0:	31 81       	ldd	r19, Z+1	; 0x01
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	9c 81       	ldd	r25, Y+4	; 0x04
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	88 0f       	add	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	82 0f       	add	r24, r18
    34c0:	93 1f       	adc	r25, r19
    34c2:	fc 01       	movw	r30, r24
    34c4:	80 81       	ld	r24, Z
    34c6:	91 81       	ldd	r25, Z+1	; 0x01
    34c8:	a2 81       	ldd	r26, Z+2	; 0x02
    34ca:	b3 81       	ldd	r27, Z+3	; 0x03
    34cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    34ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    34d0:	f9 01       	movw	r30, r18
    34d2:	44 81       	ldd	r20, Z+4	; 0x04
    34d4:	55 81       	ldd	r21, Z+5	; 0x05
    34d6:	29 81       	ldd	r18, Y+1	; 0x01
    34d8:	3a 81       	ldd	r19, Y+2	; 0x02
    34da:	22 0f       	add	r18, r18
    34dc:	33 1f       	adc	r19, r19
    34de:	24 0f       	add	r18, r20
    34e0:	35 1f       	adc	r19, r21
    34e2:	f9 01       	movw	r30, r18
    34e4:	40 81       	ld	r20, Z
    34e6:	51 81       	ldd	r21, Z+1	; 0x01
    34e8:	2b 81       	ldd	r18, Y+3	; 0x03
    34ea:	3c 81       	ldd	r19, Y+4	; 0x04
    34ec:	22 0f       	add	r18, r18
    34ee:	33 1f       	adc	r19, r19
    34f0:	22 0f       	add	r18, r18
    34f2:	33 1f       	adc	r19, r19
    34f4:	24 0f       	add	r18, r20
    34f6:	35 1f       	adc	r19, r21
    34f8:	f9 01       	movw	r30, r18
    34fa:	20 81       	ld	r18, Z
    34fc:	31 81       	ldd	r19, Z+1	; 0x01
    34fe:	42 81       	ldd	r20, Z+2	; 0x02
    3500:	53 81       	ldd	r21, Z+3	; 0x03
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	f7 01       	movw	r30, r14
    3510:	80 83       	st	Z, r24
    3512:	91 83       	std	Z+1, r25	; 0x01
    3514:	a2 83       	std	Z+2, r26	; 0x02
    3516:	b3 83       	std	Z+3, r27	; 0x03
    
	// Copie de la ressource
    for (int i=0; i<a.row; i++)
	{
		// Handles columns of right Matrix
		for (int j=0; j<a.col; j++)
    3518:	8b 81       	ldd	r24, Y+3	; 0x03
    351a:	9c 81       	ldd	r25, Y+4	; 0x04
    351c:	01 96       	adiw	r24, 0x01	; 1
    351e:	9c 83       	std	Y+4, r25	; 0x04
    3520:	8b 83       	std	Y+3, r24	; 0x03
    3522:	8b 85       	ldd	r24, Y+11	; 0x0b
    3524:	9c 85       	ldd	r25, Y+12	; 0x0c
    3526:	fc 01       	movw	r30, r24
    3528:	22 81       	ldd	r18, Z+2	; 0x02
    352a:	33 81       	ldd	r19, Z+3	; 0x03
    352c:	41 e0       	ldi	r20, 0x01	; 1
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	9c 81       	ldd	r25, Y+4	; 0x04
    3532:	82 17       	cp	r24, r18
    3534:	93 07       	cpc	r25, r19
    3536:	0c f0       	brlt	.+2      	; 0x353a <_ZmiRK6MatrixS1_+0x108>
    3538:	40 e0       	ldi	r20, 0x00	; 0
    353a:	44 23       	and	r20, r20
    353c:	09 f0       	breq	.+2      	; 0x3540 <_ZmiRK6MatrixS1_+0x10e>
    353e:	95 cf       	rjmp	.-214    	; 0x346a <_ZmiRK6MatrixS1_+0x38>
Matrix operator-(Matrix const& a, Matrix const& b)
{
	Matrix copie;
    
	// Copie de la ressource
    for (int i=0; i<a.row; i++)
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	9a 81       	ldd	r25, Y+2	; 0x02
    3544:	01 96       	adiw	r24, 0x01	; 1
    3546:	9a 83       	std	Y+2, r25	; 0x02
    3548:	89 83       	std	Y+1, r24	; 0x01
    354a:	8b 85       	ldd	r24, Y+11	; 0x0b
    354c:	9c 85       	ldd	r25, Y+12	; 0x0c
    354e:	fc 01       	movw	r30, r24
    3550:	20 81       	ld	r18, Z
    3552:	31 81       	ldd	r19, Z+1	; 0x01
    3554:	41 e0       	ldi	r20, 0x01	; 1
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	9a 81       	ldd	r25, Y+2	; 0x02
    355a:	82 17       	cp	r24, r18
    355c:	93 07       	cpc	r25, r19
    355e:	0c f0       	brlt	.+2      	; 0x3562 <_ZmiRK6MatrixS1_+0x130>
    3560:	40 e0       	ldi	r20, 0x00	; 0
    3562:	44 23       	and	r20, r20
    3564:	09 f0       	breq	.+2      	; 0x3568 <_ZmiRK6MatrixS1_+0x136>
    3566:	7e cf       	rjmp	.-260    	; 0x3464 <_ZmiRK6MatrixS1_+0x32>
		}
	}
	
	
    return copie;
}
    3568:	c8 01       	movw	r24, r16
    356a:	c8 01       	movw	r24, r16
    356c:	2e 96       	adiw	r28, 0x0e	; 14
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	ff 90       	pop	r15
    3582:	ef 90       	pop	r14
    3584:	08 95       	ret

00003586 <_ZmlRK6MatrixS1_>:

// Multiplication
Matrix operator *(Matrix const& a, Matrix const& b)
{
    3586:	af 92       	push	r10
    3588:	bf 92       	push	r11
    358a:	cf 92       	push	r12
    358c:	df 92       	push	r13
    358e:	ef 92       	push	r14
    3590:	ff 92       	push	r15
    3592:	0f 93       	push	r16
    3594:	1f 93       	push	r17
    3596:	df 93       	push	r29
    3598:	cf 93       	push	r28
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62
    359e:	60 97       	sbiw	r28, 0x10	; 16
    35a0:	0f b6       	in	r0, 0x3f	; 63
    35a2:	f8 94       	cli
    35a4:	de bf       	out	0x3e, r29	; 62
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	8c 01       	movw	r16, r24
    35ac:	7e 87       	std	Y+14, r23	; 0x0e
    35ae:	6d 87       	std	Y+13, r22	; 0x0d
    35b0:	58 8b       	std	Y+16, r21	; 0x10
    35b2:	4f 87       	std	Y+15, r20	; 0x0f
	Matrix copie;
    35b4:	c8 01       	movw	r24, r16
    35b6:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN6MatrixC1Ev>
	int k;	

	// Handles rows of left Matrix
	for (int i=0; i<a.row; i++)
    35ba:	1c 82       	std	Y+4, r1	; 0x04
    35bc:	1b 82       	std	Y+3, r1	; 0x03
    35be:	c9 c0       	rjmp	.+402    	; 0x3752 <_ZmlRK6MatrixS1_+0x1cc>
	{
		// Handles columns of right Matrix
		for (int j=0; j<b.col; j++)
    35c0:	1e 82       	std	Y+6, r1	; 0x06
    35c2:	1d 82       	std	Y+5, r1	; 0x05
    35c4:	b2 c0       	rjmp	.+356    	; 0x372a <_ZmlRK6MatrixS1_+0x1a4>
		{
			// Handles the multiplication
			for (k=0, copie.mat[i][j]=0.0; k<a.col; k++)
    35c6:	1a 82       	std	Y+2, r1	; 0x02
    35c8:	19 82       	std	Y+1, r1	; 0x01
    35ca:	c8 01       	movw	r24, r16
    35cc:	fc 01       	movw	r30, r24
    35ce:	24 81       	ldd	r18, Z+4	; 0x04
    35d0:	35 81       	ldd	r19, Z+5	; 0x05
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	88 0f       	add	r24, r24
    35d8:	99 1f       	adc	r25, r25
    35da:	82 0f       	add	r24, r18
    35dc:	93 1f       	adc	r25, r19
    35de:	fc 01       	movw	r30, r24
    35e0:	20 81       	ld	r18, Z
    35e2:	31 81       	ldd	r19, Z+1	; 0x01
    35e4:	8d 81       	ldd	r24, Y+5	; 0x05
    35e6:	9e 81       	ldd	r25, Y+6	; 0x06
    35e8:	88 0f       	add	r24, r24
    35ea:	99 1f       	adc	r25, r25
    35ec:	88 0f       	add	r24, r24
    35ee:	99 1f       	adc	r25, r25
    35f0:	28 0f       	add	r18, r24
    35f2:	39 1f       	adc	r19, r25
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	dc 01       	movw	r26, r24
    35fa:	f9 01       	movw	r30, r18
    35fc:	80 83       	st	Z, r24
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	a2 83       	std	Z+2, r26	; 0x02
    3602:	b3 83       	std	Z+3, r27	; 0x03
    3604:	7e c0       	rjmp	.+252    	; 0x3702 <_ZmlRK6MatrixS1_+0x17c>
			{
				copie.mat[i][j] += a.mat[i][k] * b.mat[k][j];
    3606:	c8 01       	movw	r24, r16
    3608:	fc 01       	movw	r30, r24
    360a:	24 81       	ldd	r18, Z+4	; 0x04
    360c:	35 81       	ldd	r19, Z+5	; 0x05
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	88 0f       	add	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	82 0f       	add	r24, r18
    3618:	93 1f       	adc	r25, r19
    361a:	fc 01       	movw	r30, r24
    361c:	20 81       	ld	r18, Z
    361e:	31 81       	ldd	r19, Z+1	; 0x01
    3620:	8d 81       	ldd	r24, Y+5	; 0x05
    3622:	9e 81       	ldd	r25, Y+6	; 0x06
    3624:	88 0f       	add	r24, r24
    3626:	99 1f       	adc	r25, r25
    3628:	88 0f       	add	r24, r24
    362a:	99 1f       	adc	r25, r25
    362c:	59 01       	movw	r10, r18
    362e:	a8 0e       	add	r10, r24
    3630:	b9 1e       	adc	r11, r25
    3632:	c8 01       	movw	r24, r16
    3634:	fc 01       	movw	r30, r24
    3636:	24 81       	ldd	r18, Z+4	; 0x04
    3638:	35 81       	ldd	r19, Z+5	; 0x05
    363a:	8b 81       	ldd	r24, Y+3	; 0x03
    363c:	9c 81       	ldd	r25, Y+4	; 0x04
    363e:	88 0f       	add	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	82 0f       	add	r24, r18
    3644:	93 1f       	adc	r25, r19
    3646:	fc 01       	movw	r30, r24
    3648:	20 81       	ld	r18, Z
    364a:	31 81       	ldd	r19, Z+1	; 0x01
    364c:	8d 81       	ldd	r24, Y+5	; 0x05
    364e:	9e 81       	ldd	r25, Y+6	; 0x06
    3650:	88 0f       	add	r24, r24
    3652:	99 1f       	adc	r25, r25
    3654:	88 0f       	add	r24, r24
    3656:	99 1f       	adc	r25, r25
    3658:	82 0f       	add	r24, r18
    365a:	93 1f       	adc	r25, r19
    365c:	fc 01       	movw	r30, r24
    365e:	c0 80       	ld	r12, Z
    3660:	d1 80       	ldd	r13, Z+1	; 0x01
    3662:	e2 80       	ldd	r14, Z+2	; 0x02
    3664:	f3 80       	ldd	r15, Z+3	; 0x03
    3666:	8d 85       	ldd	r24, Y+13	; 0x0d
    3668:	9e 85       	ldd	r25, Y+14	; 0x0e
    366a:	fc 01       	movw	r30, r24
    366c:	24 81       	ldd	r18, Z+4	; 0x04
    366e:	35 81       	ldd	r19, Z+5	; 0x05
    3670:	8b 81       	ldd	r24, Y+3	; 0x03
    3672:	9c 81       	ldd	r25, Y+4	; 0x04
    3674:	88 0f       	add	r24, r24
    3676:	99 1f       	adc	r25, r25
    3678:	82 0f       	add	r24, r18
    367a:	93 1f       	adc	r25, r19
    367c:	fc 01       	movw	r30, r24
    367e:	20 81       	ld	r18, Z
    3680:	31 81       	ldd	r19, Z+1	; 0x01
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	88 0f       	add	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	88 0f       	add	r24, r24
    368c:	99 1f       	adc	r25, r25
    368e:	82 0f       	add	r24, r18
    3690:	93 1f       	adc	r25, r19
    3692:	fc 01       	movw	r30, r24
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	a2 81       	ldd	r26, Z+2	; 0x02
    369a:	b3 81       	ldd	r27, Z+3	; 0x03
    369c:	2f 85       	ldd	r18, Y+15	; 0x0f
    369e:	38 89       	ldd	r19, Y+16	; 0x10
    36a0:	f9 01       	movw	r30, r18
    36a2:	44 81       	ldd	r20, Z+4	; 0x04
    36a4:	55 81       	ldd	r21, Z+5	; 0x05
    36a6:	29 81       	ldd	r18, Y+1	; 0x01
    36a8:	3a 81       	ldd	r19, Y+2	; 0x02
    36aa:	22 0f       	add	r18, r18
    36ac:	33 1f       	adc	r19, r19
    36ae:	24 0f       	add	r18, r20
    36b0:	35 1f       	adc	r19, r21
    36b2:	f9 01       	movw	r30, r18
    36b4:	40 81       	ld	r20, Z
    36b6:	51 81       	ldd	r21, Z+1	; 0x01
    36b8:	2d 81       	ldd	r18, Y+5	; 0x05
    36ba:	3e 81       	ldd	r19, Y+6	; 0x06
    36bc:	22 0f       	add	r18, r18
    36be:	33 1f       	adc	r19, r19
    36c0:	22 0f       	add	r18, r18
    36c2:	33 1f       	adc	r19, r19
    36c4:	24 0f       	add	r18, r20
    36c6:	35 1f       	adc	r19, r21
    36c8:	f9 01       	movw	r30, r18
    36ca:	20 81       	ld	r18, Z
    36cc:	31 81       	ldd	r19, Z+1	; 0x01
    36ce:	42 81       	ldd	r20, Z+2	; 0x02
    36d0:	53 81       	ldd	r21, Z+3	; 0x03
    36d2:	bc 01       	movw	r22, r24
    36d4:	cd 01       	movw	r24, r26
    36d6:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	9c 01       	movw	r18, r24
    36e0:	ad 01       	movw	r20, r26
    36e2:	c7 01       	movw	r24, r14
    36e4:	b6 01       	movw	r22, r12
    36e6:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	f5 01       	movw	r30, r10
    36f0:	80 83       	st	Z, r24
    36f2:	91 83       	std	Z+1, r25	; 0x01
    36f4:	a2 83       	std	Z+2, r26	; 0x02
    36f6:	b3 83       	std	Z+3, r27	; 0x03
	{
		// Handles columns of right Matrix
		for (int j=0; j<b.col; j++)
		{
			// Handles the multiplication
			for (k=0, copie.mat[i][j]=0.0; k<a.col; k++)
    36f8:	89 81       	ldd	r24, Y+1	; 0x01
    36fa:	9a 81       	ldd	r25, Y+2	; 0x02
    36fc:	01 96       	adiw	r24, 0x01	; 1
    36fe:	9a 83       	std	Y+2, r25	; 0x02
    3700:	89 83       	std	Y+1, r24	; 0x01
    3702:	8d 85       	ldd	r24, Y+13	; 0x0d
    3704:	9e 85       	ldd	r25, Y+14	; 0x0e
    3706:	fc 01       	movw	r30, r24
    3708:	22 81       	ldd	r18, Z+2	; 0x02
    370a:	33 81       	ldd	r19, Z+3	; 0x03
    370c:	41 e0       	ldi	r20, 0x01	; 1
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	9a 81       	ldd	r25, Y+2	; 0x02
    3712:	82 17       	cp	r24, r18
    3714:	93 07       	cpc	r25, r19
    3716:	0c f0       	brlt	.+2      	; 0x371a <_ZmlRK6MatrixS1_+0x194>
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	44 23       	and	r20, r20
    371c:	09 f0       	breq	.+2      	; 0x3720 <_ZmlRK6MatrixS1_+0x19a>
    371e:	73 cf       	rjmp	.-282    	; 0x3606 <_ZmlRK6MatrixS1_+0x80>

	// Handles rows of left Matrix
	for (int i=0; i<a.row; i++)
	{
		// Handles columns of right Matrix
		for (int j=0; j<b.col; j++)
    3720:	8d 81       	ldd	r24, Y+5	; 0x05
    3722:	9e 81       	ldd	r25, Y+6	; 0x06
    3724:	01 96       	adiw	r24, 0x01	; 1
    3726:	9e 83       	std	Y+6, r25	; 0x06
    3728:	8d 83       	std	Y+5, r24	; 0x05
    372a:	8f 85       	ldd	r24, Y+15	; 0x0f
    372c:	98 89       	ldd	r25, Y+16	; 0x10
    372e:	fc 01       	movw	r30, r24
    3730:	22 81       	ldd	r18, Z+2	; 0x02
    3732:	33 81       	ldd	r19, Z+3	; 0x03
    3734:	41 e0       	ldi	r20, 0x01	; 1
    3736:	8d 81       	ldd	r24, Y+5	; 0x05
    3738:	9e 81       	ldd	r25, Y+6	; 0x06
    373a:	82 17       	cp	r24, r18
    373c:	93 07       	cpc	r25, r19
    373e:	0c f0       	brlt	.+2      	; 0x3742 <_ZmlRK6MatrixS1_+0x1bc>
    3740:	40 e0       	ldi	r20, 0x00	; 0
    3742:	44 23       	and	r20, r20
    3744:	09 f0       	breq	.+2      	; 0x3748 <_ZmlRK6MatrixS1_+0x1c2>
    3746:	3f cf       	rjmp	.-386    	; 0x35c6 <_ZmlRK6MatrixS1_+0x40>
{
	Matrix copie;
	int k;	

	// Handles rows of left Matrix
	for (int i=0; i<a.row; i++)
    3748:	8b 81       	ldd	r24, Y+3	; 0x03
    374a:	9c 81       	ldd	r25, Y+4	; 0x04
    374c:	01 96       	adiw	r24, 0x01	; 1
    374e:	9c 83       	std	Y+4, r25	; 0x04
    3750:	8b 83       	std	Y+3, r24	; 0x03
    3752:	8d 85       	ldd	r24, Y+13	; 0x0d
    3754:	9e 85       	ldd	r25, Y+14	; 0x0e
    3756:	fc 01       	movw	r30, r24
    3758:	20 81       	ld	r18, Z
    375a:	31 81       	ldd	r19, Z+1	; 0x01
    375c:	41 e0       	ldi	r20, 0x01	; 1
    375e:	8b 81       	ldd	r24, Y+3	; 0x03
    3760:	9c 81       	ldd	r25, Y+4	; 0x04
    3762:	82 17       	cp	r24, r18
    3764:	93 07       	cpc	r25, r19
    3766:	0c f0       	brlt	.+2      	; 0x376a <_ZmlRK6MatrixS1_+0x1e4>
    3768:	40 e0       	ldi	r20, 0x00	; 0
    376a:	44 23       	and	r20, r20
    376c:	09 f0       	breq	.+2      	; 0x3770 <_ZmlRK6MatrixS1_+0x1ea>
    376e:	28 cf       	rjmp	.-432    	; 0x35c0 <_ZmlRK6MatrixS1_+0x3a>
			}
		}
	}
	
	return copie;
}
    3770:	c8 01       	movw	r24, r16
    3772:	c8 01       	movw	r24, r16
    3774:	60 96       	adiw	r28, 0x10	; 16
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	f8 94       	cli
    377a:	de bf       	out	0x3e, r29	; 62
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	cd bf       	out	0x3d, r28	; 61
    3780:	cf 91       	pop	r28
    3782:	df 91       	pop	r29
    3784:	1f 91       	pop	r17
    3786:	0f 91       	pop	r16
    3788:	ff 90       	pop	r15
    378a:	ef 90       	pop	r14
    378c:	df 90       	pop	r13
    378e:	cf 90       	pop	r12
    3790:	bf 90       	pop	r11
    3792:	af 90       	pop	r10
    3794:	08 95       	ret

00003796 <_ZN6MatrixclEjj>:



float& Matrix:: operator() (unsigned row, unsigned col)
{
    3796:	df 93       	push	r29
    3798:	cf 93       	push	r28
    379a:	00 d0       	rcall	.+0      	; 0x379c <_ZN6MatrixclEjj+0x6>
    379c:	00 d0       	rcall	.+0      	; 0x379e <_ZN6MatrixclEjj+0x8>
    379e:	00 d0       	rcall	.+0      	; 0x37a0 <_ZN6MatrixclEjj+0xa>
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
    37a4:	9a 83       	std	Y+2, r25	; 0x02
    37a6:	89 83       	std	Y+1, r24	; 0x01
    37a8:	7c 83       	std	Y+4, r23	; 0x04
    37aa:	6b 83       	std	Y+3, r22	; 0x03
    37ac:	5e 83       	std	Y+6, r21	; 0x06
    37ae:	4d 83       	std	Y+5, r20	; 0x05
	return this->mat[row][col];
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	9a 81       	ldd	r25, Y+2	; 0x02
    37b4:	fc 01       	movw	r30, r24
    37b6:	24 81       	ldd	r18, Z+4	; 0x04
    37b8:	35 81       	ldd	r19, Z+5	; 0x05
    37ba:	8b 81       	ldd	r24, Y+3	; 0x03
    37bc:	9c 81       	ldd	r25, Y+4	; 0x04
    37be:	88 0f       	add	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	82 0f       	add	r24, r18
    37c4:	93 1f       	adc	r25, r19
    37c6:	fc 01       	movw	r30, r24
    37c8:	20 81       	ld	r18, Z
    37ca:	31 81       	ldd	r19, Z+1	; 0x01
    37cc:	8d 81       	ldd	r24, Y+5	; 0x05
    37ce:	9e 81       	ldd	r25, Y+6	; 0x06
    37d0:	88 0f       	add	r24, r24
    37d2:	99 1f       	adc	r25, r25
    37d4:	88 0f       	add	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	82 0f       	add	r24, r18
    37da:	93 1f       	adc	r25, r19
}
    37dc:	26 96       	adiw	r28, 0x06	; 6
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	f8 94       	cli
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	cd bf       	out	0x3d, r28	; 61
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	08 95       	ret

000037ee <_ZN6Matrix10invert_3x3Ev>:
// Functions


// Returns the inverse of a 3x3 matrix
Matrix Matrix::invert_3x3 ()
{
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	df 93       	push	r29
    3800:	cf 93       	push	r28
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	2c 97       	sbiw	r28, 0x0c	; 12
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	8c 01       	movw	r16, r24
    3814:	7c 87       	std	Y+12, r23	; 0x0c
    3816:	6b 87       	std	Y+11, r22	; 0x0b
	
	Matrix C (3,3);	
    3818:	c8 01       	movw	r24, r16
    381a:	63 e0       	ldi	r22, 0x03	; 3
    381c:	70 e0       	ldi	r23, 0x00	; 0
    381e:	43 e0       	ldi	r20, 0x03	; 3
    3820:	50 e0       	ldi	r21, 0x00	; 0
    3822:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6MatrixC1Eii>
	float det=	this->mat[0][0]*this->mat[1][1]*this->mat[2][2]
    3826:	8b 85       	ldd	r24, Y+11	; 0x0b
    3828:	9c 85       	ldd	r25, Y+12	; 0x0c
    382a:	fc 01       	movw	r30, r24
    382c:	84 81       	ldd	r24, Z+4	; 0x04
    382e:	95 81       	ldd	r25, Z+5	; 0x05
    3830:	fc 01       	movw	r30, r24
    3832:	80 81       	ld	r24, Z
    3834:	91 81       	ldd	r25, Z+1	; 0x01
    3836:	fc 01       	movw	r30, r24
    3838:	80 81       	ld	r24, Z
    383a:	91 81       	ldd	r25, Z+1	; 0x01
    383c:	a2 81       	ldd	r26, Z+2	; 0x02
    383e:	b3 81       	ldd	r27, Z+3	; 0x03
    3840:	2b 85       	ldd	r18, Y+11	; 0x0b
    3842:	3c 85       	ldd	r19, Y+12	; 0x0c
    3844:	f9 01       	movw	r30, r18
    3846:	24 81       	ldd	r18, Z+4	; 0x04
    3848:	35 81       	ldd	r19, Z+5	; 0x05
    384a:	2e 5f       	subi	r18, 0xFE	; 254
    384c:	3f 4f       	sbci	r19, 0xFF	; 255
    384e:	f9 01       	movw	r30, r18
    3850:	20 81       	ld	r18, Z
    3852:	31 81       	ldd	r19, Z+1	; 0x01
    3854:	2c 5f       	subi	r18, 0xFC	; 252
    3856:	3f 4f       	sbci	r19, 0xFF	; 255
    3858:	f9 01       	movw	r30, r18
    385a:	20 81       	ld	r18, Z
    385c:	31 81       	ldd	r19, Z+1	; 0x01
    385e:	42 81       	ldd	r20, Z+2	; 0x02
    3860:	53 81       	ldd	r21, Z+3	; 0x03
				+ this->mat[0][1]*this->mat[1][2]*this->mat[2][0]
				+ this->mat[0][2]*this->mat[1][0]*this->mat[2][1]
				- this->mat[0][2]*this->mat[1][1]*this->mat[2][0]
				- this->mat[1][2]*this->mat[2][1]*this->mat[0][0]
				- this->mat[2][2]*this->mat[0][1]*this->mat[1][0];
    3862:	bc 01       	movw	r22, r24
    3864:	cd 01       	movw	r24, r26
    3866:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
// Returns the inverse of a 3x3 matrix
Matrix Matrix::invert_3x3 ()
{
	
	Matrix C (3,3);	
	float det=	this->mat[0][0]*this->mat[1][1]*this->mat[2][2]
    386e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3870:	3c 85       	ldd	r19, Y+12	; 0x0c
    3872:	f9 01       	movw	r30, r18
    3874:	24 81       	ldd	r18, Z+4	; 0x04
    3876:	35 81       	ldd	r19, Z+5	; 0x05
    3878:	2c 5f       	subi	r18, 0xFC	; 252
    387a:	3f 4f       	sbci	r19, 0xFF	; 255
    387c:	f9 01       	movw	r30, r18
    387e:	20 81       	ld	r18, Z
    3880:	31 81       	ldd	r19, Z+1	; 0x01
    3882:	28 5f       	subi	r18, 0xF8	; 248
    3884:	3f 4f       	sbci	r19, 0xFF	; 255
    3886:	f9 01       	movw	r30, r18
    3888:	20 81       	ld	r18, Z
    388a:	31 81       	ldd	r19, Z+1	; 0x01
    388c:	42 81       	ldd	r20, Z+2	; 0x02
    388e:	53 81       	ldd	r21, Z+3	; 0x03
				+ this->mat[0][1]*this->mat[1][2]*this->mat[2][0]
				+ this->mat[0][2]*this->mat[1][0]*this->mat[2][1]
				- this->mat[0][2]*this->mat[1][1]*this->mat[2][0]
				- this->mat[1][2]*this->mat[2][1]*this->mat[0][0]
				- this->mat[2][2]*this->mat[0][1]*this->mat[1][0];
    3890:	bc 01       	movw	r22, r24
    3892:	cd 01       	movw	r24, r26
    3894:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	6c 01       	movw	r12, r24
    389e:	7d 01       	movw	r14, r26
Matrix Matrix::invert_3x3 ()
{
	
	Matrix C (3,3);	
	float det=	this->mat[0][0]*this->mat[1][1]*this->mat[2][2]
				+ this->mat[0][1]*this->mat[1][2]*this->mat[2][0]
    38a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    38a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    38a4:	fc 01       	movw	r30, r24
    38a6:	84 81       	ldd	r24, Z+4	; 0x04
    38a8:	95 81       	ldd	r25, Z+5	; 0x05
    38aa:	fc 01       	movw	r30, r24
    38ac:	80 81       	ld	r24, Z
    38ae:	91 81       	ldd	r25, Z+1	; 0x01
    38b0:	04 96       	adiw	r24, 0x04	; 4
    38b2:	fc 01       	movw	r30, r24
    38b4:	80 81       	ld	r24, Z
    38b6:	91 81       	ldd	r25, Z+1	; 0x01
    38b8:	a2 81       	ldd	r26, Z+2	; 0x02
    38ba:	b3 81       	ldd	r27, Z+3	; 0x03
    38bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    38be:	3c 85       	ldd	r19, Y+12	; 0x0c
    38c0:	f9 01       	movw	r30, r18
    38c2:	24 81       	ldd	r18, Z+4	; 0x04
    38c4:	35 81       	ldd	r19, Z+5	; 0x05
    38c6:	2e 5f       	subi	r18, 0xFE	; 254
    38c8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ca:	f9 01       	movw	r30, r18
    38cc:	20 81       	ld	r18, Z
    38ce:	31 81       	ldd	r19, Z+1	; 0x01
    38d0:	28 5f       	subi	r18, 0xF8	; 248
    38d2:	3f 4f       	sbci	r19, 0xFF	; 255
    38d4:	f9 01       	movw	r30, r18
    38d6:	20 81       	ld	r18, Z
    38d8:	31 81       	ldd	r19, Z+1	; 0x01
    38da:	42 81       	ldd	r20, Z+2	; 0x02
    38dc:	53 81       	ldd	r21, Z+3	; 0x03
				+ this->mat[0][2]*this->mat[1][0]*this->mat[2][1]
				- this->mat[0][2]*this->mat[1][1]*this->mat[2][0]
				- this->mat[1][2]*this->mat[2][1]*this->mat[0][0]
				- this->mat[2][2]*this->mat[0][1]*this->mat[1][0];
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
Matrix Matrix::invert_3x3 ()
{
	
	Matrix C (3,3);	
	float det=	this->mat[0][0]*this->mat[1][1]*this->mat[2][2]
				+ this->mat[0][1]*this->mat[1][2]*this->mat[2][0]
    38ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    38ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    38ee:	f9 01       	movw	r30, r18
    38f0:	24 81       	ldd	r18, Z+4	; 0x04
    38f2:	35 81       	ldd	r19, Z+5	; 0x05
    38f4:	2c 5f       	subi	r18, 0xFC	; 252
    38f6:	3f 4f       	sbci	r19, 0xFF	; 255
    38f8:	f9 01       	movw	r30, r18
    38fa:	20 81       	ld	r18, Z
    38fc:	31 81       	ldd	r19, Z+1	; 0x01
    38fe:	f9 01       	movw	r30, r18
    3900:	20 81       	ld	r18, Z
    3902:	31 81       	ldd	r19, Z+1	; 0x01
    3904:	42 81       	ldd	r20, Z+2	; 0x02
    3906:	53 81       	ldd	r21, Z+3	; 0x03
				+ this->mat[0][2]*this->mat[1][0]*this->mat[2][1]
				- this->mat[0][2]*this->mat[1][1]*this->mat[2][0]
				- this->mat[1][2]*this->mat[2][1]*this->mat[0][0]
				- this->mat[2][2]*this->mat[0][1]*this->mat[1][0];
    3908:	bc 01       	movw	r22, r24
    390a:	cd 01       	movw	r24, r26
    390c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	9c 01       	movw	r18, r24
    3916:	ad 01       	movw	r20, r26
    3918:	c7 01       	movw	r24, r14
    391a:	b6 01       	movw	r22, r12
    391c:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	6c 01       	movw	r12, r24
    3926:	7d 01       	movw	r14, r26
{
	
	Matrix C (3,3);	
	float det=	this->mat[0][0]*this->mat[1][1]*this->mat[2][2]
				+ this->mat[0][1]*this->mat[1][2]*this->mat[2][0]
				+ this->mat[0][2]*this->mat[1][0]*this->mat[2][1]
    3928:	8b 85       	ldd	r24, Y+11	; 0x0b
    392a:	9c 85       	ldd	r25, Y+12	; 0x0c
    392c:	fc 01       	movw	r30, r24
    392e:	84 81       	ldd	r24, Z+4	; 0x04
    3930:	95 81       	ldd	r25, Z+5	; 0x05
    3932:	fc 01       	movw	r30, r24
    3934:	80 81       	ld	r24, Z
    3936:	91 81       	ldd	r25, Z+1	; 0x01
    3938:	08 96       	adiw	r24, 0x08	; 8
    393a:	fc 01       	movw	r30, r24
    393c:	80 81       	ld	r24, Z
    393e:	91 81       	ldd	r25, Z+1	; 0x01
    3940:	a2 81       	ldd	r26, Z+2	; 0x02
    3942:	b3 81       	ldd	r27, Z+3	; 0x03
    3944:	2b 85       	ldd	r18, Y+11	; 0x0b
    3946:	3c 85       	ldd	r19, Y+12	; 0x0c
    3948:	f9 01       	movw	r30, r18
    394a:	24 81       	ldd	r18, Z+4	; 0x04
    394c:	35 81       	ldd	r19, Z+5	; 0x05
    394e:	2e 5f       	subi	r18, 0xFE	; 254
    3950:	3f 4f       	sbci	r19, 0xFF	; 255
    3952:	f9 01       	movw	r30, r18
    3954:	20 81       	ld	r18, Z
    3956:	31 81       	ldd	r19, Z+1	; 0x01
    3958:	f9 01       	movw	r30, r18
    395a:	20 81       	ld	r18, Z
    395c:	31 81       	ldd	r19, Z+1	; 0x01
    395e:	42 81       	ldd	r20, Z+2	; 0x02
    3960:	53 81       	ldd	r21, Z+3	; 0x03
				- this->mat[0][2]*this->mat[1][1]*this->mat[2][0]
				- this->mat[1][2]*this->mat[2][1]*this->mat[0][0]
				- this->mat[2][2]*this->mat[0][1]*this->mat[1][0];
    3962:	bc 01       	movw	r22, r24
    3964:	cd 01       	movw	r24, r26
    3966:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
{
	
	Matrix C (3,3);	
	float det=	this->mat[0][0]*this->mat[1][1]*this->mat[2][2]
				+ this->mat[0][1]*this->mat[1][2]*this->mat[2][0]
				+ this->mat[0][2]*this->mat[1][0]*this->mat[2][1]
    396e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3970:	3c 85       	ldd	r19, Y+12	; 0x0c
    3972:	f9 01       	movw	r30, r18
    3974:	24 81       	ldd	r18, Z+4	; 0x04
    3976:	35 81       	ldd	r19, Z+5	; 0x05
    3978:	2c 5f       	subi	r18, 0xFC	; 252
    397a:	3f 4f       	sbci	r19, 0xFF	; 255
    397c:	f9 01       	movw	r30, r18
    397e:	20 81       	ld	r18, Z
    3980:	31 81       	ldd	r19, Z+1	; 0x01
    3982:	2c 5f       	subi	r18, 0xFC	; 252
    3984:	3f 4f       	sbci	r19, 0xFF	; 255
    3986:	f9 01       	movw	r30, r18
    3988:	20 81       	ld	r18, Z
    398a:	31 81       	ldd	r19, Z+1	; 0x01
    398c:	42 81       	ldd	r20, Z+2	; 0x02
    398e:	53 81       	ldd	r21, Z+3	; 0x03
				- this->mat[0][2]*this->mat[1][1]*this->mat[2][0]
				- this->mat[1][2]*this->mat[2][1]*this->mat[0][0]
				- this->mat[2][2]*this->mat[0][1]*this->mat[1][0];
    3990:	bc 01       	movw	r22, r24
    3992:	cd 01       	movw	r24, r26
    3994:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	9c 01       	movw	r18, r24
    399e:	ad 01       	movw	r20, r26
    39a0:	c7 01       	movw	r24, r14
    39a2:	b6 01       	movw	r22, r12
    39a4:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	6c 01       	movw	r12, r24
    39ae:	7d 01       	movw	r14, r26
	
	Matrix C (3,3);	
	float det=	this->mat[0][0]*this->mat[1][1]*this->mat[2][2]
				+ this->mat[0][1]*this->mat[1][2]*this->mat[2][0]
				+ this->mat[0][2]*this->mat[1][0]*this->mat[2][1]
				- this->mat[0][2]*this->mat[1][1]*this->mat[2][0]
    39b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    39b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    39b4:	fc 01       	movw	r30, r24
    39b6:	84 81       	ldd	r24, Z+4	; 0x04
    39b8:	95 81       	ldd	r25, Z+5	; 0x05
    39ba:	fc 01       	movw	r30, r24
    39bc:	80 81       	ld	r24, Z
    39be:	91 81       	ldd	r25, Z+1	; 0x01
    39c0:	08 96       	adiw	r24, 0x08	; 8
    39c2:	fc 01       	movw	r30, r24
    39c4:	80 81       	ld	r24, Z
    39c6:	91 81       	ldd	r25, Z+1	; 0x01
    39c8:	a2 81       	ldd	r26, Z+2	; 0x02
    39ca:	b3 81       	ldd	r27, Z+3	; 0x03
    39cc:	2b 85       	ldd	r18, Y+11	; 0x0b
    39ce:	3c 85       	ldd	r19, Y+12	; 0x0c
    39d0:	f9 01       	movw	r30, r18
    39d2:	24 81       	ldd	r18, Z+4	; 0x04
    39d4:	35 81       	ldd	r19, Z+5	; 0x05
    39d6:	2e 5f       	subi	r18, 0xFE	; 254
    39d8:	3f 4f       	sbci	r19, 0xFF	; 255
    39da:	f9 01       	movw	r30, r18
    39dc:	20 81       	ld	r18, Z
    39de:	31 81       	ldd	r19, Z+1	; 0x01
    39e0:	2c 5f       	subi	r18, 0xFC	; 252
    39e2:	3f 4f       	sbci	r19, 0xFF	; 255
    39e4:	f9 01       	movw	r30, r18
    39e6:	20 81       	ld	r18, Z
    39e8:	31 81       	ldd	r19, Z+1	; 0x01
    39ea:	42 81       	ldd	r20, Z+2	; 0x02
    39ec:	53 81       	ldd	r21, Z+3	; 0x03
				- this->mat[1][2]*this->mat[2][1]*this->mat[0][0]
				- this->mat[2][2]*this->mat[0][1]*this->mat[1][0];
    39ee:	bc 01       	movw	r22, r24
    39f0:	cd 01       	movw	r24, r26
    39f2:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
	
	Matrix C (3,3);	
	float det=	this->mat[0][0]*this->mat[1][1]*this->mat[2][2]
				+ this->mat[0][1]*this->mat[1][2]*this->mat[2][0]
				+ this->mat[0][2]*this->mat[1][0]*this->mat[2][1]
				- this->mat[0][2]*this->mat[1][1]*this->mat[2][0]
    39fa:	2b 85       	ldd	r18, Y+11	; 0x0b
    39fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    39fe:	f9 01       	movw	r30, r18
    3a00:	24 81       	ldd	r18, Z+4	; 0x04
    3a02:	35 81       	ldd	r19, Z+5	; 0x05
    3a04:	2c 5f       	subi	r18, 0xFC	; 252
    3a06:	3f 4f       	sbci	r19, 0xFF	; 255
    3a08:	f9 01       	movw	r30, r18
    3a0a:	20 81       	ld	r18, Z
    3a0c:	31 81       	ldd	r19, Z+1	; 0x01
    3a0e:	f9 01       	movw	r30, r18
    3a10:	20 81       	ld	r18, Z
    3a12:	31 81       	ldd	r19, Z+1	; 0x01
    3a14:	42 81       	ldd	r20, Z+2	; 0x02
    3a16:	53 81       	ldd	r21, Z+3	; 0x03
				- this->mat[1][2]*this->mat[2][1]*this->mat[0][0]
				- this->mat[2][2]*this->mat[0][1]*this->mat[1][0];
    3a18:	bc 01       	movw	r22, r24
    3a1a:	cd 01       	movw	r24, r26
    3a1c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	9c 01       	movw	r18, r24
    3a26:	ad 01       	movw	r20, r26
    3a28:	c7 01       	movw	r24, r14
    3a2a:	b6 01       	movw	r22, r12
    3a2c:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	6c 01       	movw	r12, r24
    3a36:	7d 01       	movw	r14, r26
	Matrix C (3,3);	
	float det=	this->mat[0][0]*this->mat[1][1]*this->mat[2][2]
				+ this->mat[0][1]*this->mat[1][2]*this->mat[2][0]
				+ this->mat[0][2]*this->mat[1][0]*this->mat[2][1]
				- this->mat[0][2]*this->mat[1][1]*this->mat[2][0]
				- this->mat[1][2]*this->mat[2][1]*this->mat[0][0]
    3a38:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	84 81       	ldd	r24, Z+4	; 0x04
    3a40:	95 81       	ldd	r25, Z+5	; 0x05
    3a42:	02 96       	adiw	r24, 0x02	; 2
    3a44:	fc 01       	movw	r30, r24
    3a46:	80 81       	ld	r24, Z
    3a48:	91 81       	ldd	r25, Z+1	; 0x01
    3a4a:	08 96       	adiw	r24, 0x08	; 8
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	80 81       	ld	r24, Z
    3a50:	91 81       	ldd	r25, Z+1	; 0x01
    3a52:	a2 81       	ldd	r26, Z+2	; 0x02
    3a54:	b3 81       	ldd	r27, Z+3	; 0x03
    3a56:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a58:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a5a:	f9 01       	movw	r30, r18
    3a5c:	24 81       	ldd	r18, Z+4	; 0x04
    3a5e:	35 81       	ldd	r19, Z+5	; 0x05
    3a60:	2c 5f       	subi	r18, 0xFC	; 252
    3a62:	3f 4f       	sbci	r19, 0xFF	; 255
    3a64:	f9 01       	movw	r30, r18
    3a66:	20 81       	ld	r18, Z
    3a68:	31 81       	ldd	r19, Z+1	; 0x01
    3a6a:	2c 5f       	subi	r18, 0xFC	; 252
    3a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a6e:	f9 01       	movw	r30, r18
    3a70:	20 81       	ld	r18, Z
    3a72:	31 81       	ldd	r19, Z+1	; 0x01
    3a74:	42 81       	ldd	r20, Z+2	; 0x02
    3a76:	53 81       	ldd	r21, Z+3	; 0x03
				- this->mat[2][2]*this->mat[0][1]*this->mat[1][0];
    3a78:	bc 01       	movw	r22, r24
    3a7a:	cd 01       	movw	r24, r26
    3a7c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
	Matrix C (3,3);	
	float det=	this->mat[0][0]*this->mat[1][1]*this->mat[2][2]
				+ this->mat[0][1]*this->mat[1][2]*this->mat[2][0]
				+ this->mat[0][2]*this->mat[1][0]*this->mat[2][1]
				- this->mat[0][2]*this->mat[1][1]*this->mat[2][0]
				- this->mat[1][2]*this->mat[2][1]*this->mat[0][0]
    3a84:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a86:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a88:	f9 01       	movw	r30, r18
    3a8a:	24 81       	ldd	r18, Z+4	; 0x04
    3a8c:	35 81       	ldd	r19, Z+5	; 0x05
    3a8e:	f9 01       	movw	r30, r18
    3a90:	20 81       	ld	r18, Z
    3a92:	31 81       	ldd	r19, Z+1	; 0x01
    3a94:	f9 01       	movw	r30, r18
    3a96:	20 81       	ld	r18, Z
    3a98:	31 81       	ldd	r19, Z+1	; 0x01
    3a9a:	42 81       	ldd	r20, Z+2	; 0x02
    3a9c:	53 81       	ldd	r21, Z+3	; 0x03
				- this->mat[2][2]*this->mat[0][1]*this->mat[1][0];
    3a9e:	bc 01       	movw	r22, r24
    3aa0:	cd 01       	movw	r24, r26
    3aa2:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	9c 01       	movw	r18, r24
    3aac:	ad 01       	movw	r20, r26
    3aae:	c7 01       	movw	r24, r14
    3ab0:	b6 01       	movw	r22, r12
    3ab2:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	6c 01       	movw	r12, r24
    3abc:	7d 01       	movw	r14, r26
    3abe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ac0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	84 81       	ldd	r24, Z+4	; 0x04
    3ac6:	95 81       	ldd	r25, Z+5	; 0x05
    3ac8:	04 96       	adiw	r24, 0x04	; 4
    3aca:	fc 01       	movw	r30, r24
    3acc:	80 81       	ld	r24, Z
    3ace:	91 81       	ldd	r25, Z+1	; 0x01
    3ad0:	08 96       	adiw	r24, 0x08	; 8
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	80 81       	ld	r24, Z
    3ad6:	91 81       	ldd	r25, Z+1	; 0x01
    3ad8:	a2 81       	ldd	r26, Z+2	; 0x02
    3ada:	b3 81       	ldd	r27, Z+3	; 0x03
    3adc:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ade:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ae0:	f9 01       	movw	r30, r18
    3ae2:	24 81       	ldd	r18, Z+4	; 0x04
    3ae4:	35 81       	ldd	r19, Z+5	; 0x05
    3ae6:	f9 01       	movw	r30, r18
    3ae8:	20 81       	ld	r18, Z
    3aea:	31 81       	ldd	r19, Z+1	; 0x01
    3aec:	2c 5f       	subi	r18, 0xFC	; 252
    3aee:	3f 4f       	sbci	r19, 0xFF	; 255
    3af0:	f9 01       	movw	r30, r18
    3af2:	20 81       	ld	r18, Z
    3af4:	31 81       	ldd	r19, Z+1	; 0x01
    3af6:	42 81       	ldd	r20, Z+2	; 0x02
    3af8:	53 81       	ldd	r21, Z+3	; 0x03
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	2b 85       	ldd	r18, Y+11	; 0x0b
    3b08:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b0a:	f9 01       	movw	r30, r18
    3b0c:	24 81       	ldd	r18, Z+4	; 0x04
    3b0e:	35 81       	ldd	r19, Z+5	; 0x05
    3b10:	2e 5f       	subi	r18, 0xFE	; 254
    3b12:	3f 4f       	sbci	r19, 0xFF	; 255
    3b14:	f9 01       	movw	r30, r18
    3b16:	20 81       	ld	r18, Z
    3b18:	31 81       	ldd	r19, Z+1	; 0x01
    3b1a:	f9 01       	movw	r30, r18
    3b1c:	20 81       	ld	r18, Z
    3b1e:	31 81       	ldd	r19, Z+1	; 0x01
    3b20:	42 81       	ldd	r20, Z+2	; 0x02
    3b22:	53 81       	ldd	r21, Z+3	; 0x03
    3b24:	bc 01       	movw	r22, r24
    3b26:	cd 01       	movw	r24, r26
    3b28:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	9c 01       	movw	r18, r24
    3b32:	ad 01       	movw	r20, r26
    3b34:	c7 01       	movw	r24, r14
    3b36:	b6 01       	movw	r22, r12
    3b38:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	89 83       	std	Y+1, r24	; 0x01
    3b42:	9a 83       	std	Y+2, r25	; 0x02
    3b44:	ab 83       	std	Y+3, r26	; 0x03
    3b46:	bc 83       	std	Y+4, r27	; 0x04
				
	
				
	C.mat[0][0]=(this->mat[1][1]*this->mat[2][2] - this->mat[1][2]*this->mat[2][1])/det;
    3b48:	c8 01       	movw	r24, r16
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	84 81       	ldd	r24, Z+4	; 0x04
    3b4e:	95 81       	ldd	r25, Z+5	; 0x05
    3b50:	fc 01       	movw	r30, r24
    3b52:	a0 80       	ld	r10, Z
    3b54:	b1 80       	ldd	r11, Z+1	; 0x01
    3b56:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b58:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b5a:	fc 01       	movw	r30, r24
    3b5c:	84 81       	ldd	r24, Z+4	; 0x04
    3b5e:	95 81       	ldd	r25, Z+5	; 0x05
    3b60:	02 96       	adiw	r24, 0x02	; 2
    3b62:	fc 01       	movw	r30, r24
    3b64:	80 81       	ld	r24, Z
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	04 96       	adiw	r24, 0x04	; 4
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	a2 81       	ldd	r26, Z+2	; 0x02
    3b72:	b3 81       	ldd	r27, Z+3	; 0x03
    3b74:	2b 85       	ldd	r18, Y+11	; 0x0b
    3b76:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b78:	f9 01       	movw	r30, r18
    3b7a:	24 81       	ldd	r18, Z+4	; 0x04
    3b7c:	35 81       	ldd	r19, Z+5	; 0x05
    3b7e:	2c 5f       	subi	r18, 0xFC	; 252
    3b80:	3f 4f       	sbci	r19, 0xFF	; 255
    3b82:	f9 01       	movw	r30, r18
    3b84:	20 81       	ld	r18, Z
    3b86:	31 81       	ldd	r19, Z+1	; 0x01
    3b88:	28 5f       	subi	r18, 0xF8	; 248
    3b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8c:	f9 01       	movw	r30, r18
    3b8e:	20 81       	ld	r18, Z
    3b90:	31 81       	ldd	r19, Z+1	; 0x01
    3b92:	42 81       	ldd	r20, Z+2	; 0x02
    3b94:	53 81       	ldd	r21, Z+3	; 0x03
    3b96:	bc 01       	movw	r22, r24
    3b98:	cd 01       	movw	r24, r26
    3b9a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	6c 01       	movw	r12, r24
    3ba4:	7d 01       	movw	r14, r26
    3ba6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ba8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3baa:	fc 01       	movw	r30, r24
    3bac:	84 81       	ldd	r24, Z+4	; 0x04
    3bae:	95 81       	ldd	r25, Z+5	; 0x05
    3bb0:	02 96       	adiw	r24, 0x02	; 2
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	80 81       	ld	r24, Z
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	08 96       	adiw	r24, 0x08	; 8
    3bba:	fc 01       	movw	r30, r24
    3bbc:	80 81       	ld	r24, Z
    3bbe:	91 81       	ldd	r25, Z+1	; 0x01
    3bc0:	a2 81       	ldd	r26, Z+2	; 0x02
    3bc2:	b3 81       	ldd	r27, Z+3	; 0x03
    3bc4:	2b 85       	ldd	r18, Y+11	; 0x0b
    3bc6:	3c 85       	ldd	r19, Y+12	; 0x0c
    3bc8:	f9 01       	movw	r30, r18
    3bca:	24 81       	ldd	r18, Z+4	; 0x04
    3bcc:	35 81       	ldd	r19, Z+5	; 0x05
    3bce:	2c 5f       	subi	r18, 0xFC	; 252
    3bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd2:	f9 01       	movw	r30, r18
    3bd4:	20 81       	ld	r18, Z
    3bd6:	31 81       	ldd	r19, Z+1	; 0x01
    3bd8:	2c 5f       	subi	r18, 0xFC	; 252
    3bda:	3f 4f       	sbci	r19, 0xFF	; 255
    3bdc:	f9 01       	movw	r30, r18
    3bde:	20 81       	ld	r18, Z
    3be0:	31 81       	ldd	r19, Z+1	; 0x01
    3be2:	42 81       	ldd	r20, Z+2	; 0x02
    3be4:	53 81       	ldd	r21, Z+3	; 0x03
    3be6:	bc 01       	movw	r22, r24
    3be8:	cd 01       	movw	r24, r26
    3bea:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	9c 01       	movw	r18, r24
    3bf4:	ad 01       	movw	r20, r26
    3bf6:	c7 01       	movw	r24, r14
    3bf8:	b6 01       	movw	r22, r12
    3bfa:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	bc 01       	movw	r22, r24
    3c04:	cd 01       	movw	r24, r26
    3c06:	29 81       	ldd	r18, Y+1	; 0x01
    3c08:	3a 81       	ldd	r19, Y+2	; 0x02
    3c0a:	4b 81       	ldd	r20, Y+3	; 0x03
    3c0c:	5c 81       	ldd	r21, Y+4	; 0x04
    3c0e:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	f5 01       	movw	r30, r10
    3c18:	80 83       	st	Z, r24
    3c1a:	91 83       	std	Z+1, r25	; 0x01
    3c1c:	a2 83       	std	Z+2, r26	; 0x02
    3c1e:	b3 83       	std	Z+3, r27	; 0x03
	C.mat[0][1]=(this->mat[0][2]*this->mat[2][1] - this->mat[0][1]*this->mat[2][2])/det;
    3c20:	c8 01       	movw	r24, r16
    3c22:	fc 01       	movw	r30, r24
    3c24:	84 81       	ldd	r24, Z+4	; 0x04
    3c26:	95 81       	ldd	r25, Z+5	; 0x05
    3c28:	fc 01       	movw	r30, r24
    3c2a:	80 81       	ld	r24, Z
    3c2c:	91 81       	ldd	r25, Z+1	; 0x01
    3c2e:	aa 24       	eor	r10, r10
    3c30:	bb 24       	eor	r11, r11
    3c32:	68 94       	set
    3c34:	a2 f8       	bld	r10, 2
    3c36:	a8 0e       	add	r10, r24
    3c38:	b9 1e       	adc	r11, r25
    3c3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c3e:	fc 01       	movw	r30, r24
    3c40:	84 81       	ldd	r24, Z+4	; 0x04
    3c42:	95 81       	ldd	r25, Z+5	; 0x05
    3c44:	fc 01       	movw	r30, r24
    3c46:	80 81       	ld	r24, Z
    3c48:	91 81       	ldd	r25, Z+1	; 0x01
    3c4a:	08 96       	adiw	r24, 0x08	; 8
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	80 81       	ld	r24, Z
    3c50:	91 81       	ldd	r25, Z+1	; 0x01
    3c52:	a2 81       	ldd	r26, Z+2	; 0x02
    3c54:	b3 81       	ldd	r27, Z+3	; 0x03
    3c56:	2b 85       	ldd	r18, Y+11	; 0x0b
    3c58:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c5a:	f9 01       	movw	r30, r18
    3c5c:	24 81       	ldd	r18, Z+4	; 0x04
    3c5e:	35 81       	ldd	r19, Z+5	; 0x05
    3c60:	2c 5f       	subi	r18, 0xFC	; 252
    3c62:	3f 4f       	sbci	r19, 0xFF	; 255
    3c64:	f9 01       	movw	r30, r18
    3c66:	20 81       	ld	r18, Z
    3c68:	31 81       	ldd	r19, Z+1	; 0x01
    3c6a:	2c 5f       	subi	r18, 0xFC	; 252
    3c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6e:	f9 01       	movw	r30, r18
    3c70:	20 81       	ld	r18, Z
    3c72:	31 81       	ldd	r19, Z+1	; 0x01
    3c74:	42 81       	ldd	r20, Z+2	; 0x02
    3c76:	53 81       	ldd	r21, Z+3	; 0x03
    3c78:	bc 01       	movw	r22, r24
    3c7a:	cd 01       	movw	r24, r26
    3c7c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	6c 01       	movw	r12, r24
    3c86:	7d 01       	movw	r14, r26
    3c88:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	84 81       	ldd	r24, Z+4	; 0x04
    3c90:	95 81       	ldd	r25, Z+5	; 0x05
    3c92:	fc 01       	movw	r30, r24
    3c94:	80 81       	ld	r24, Z
    3c96:	91 81       	ldd	r25, Z+1	; 0x01
    3c98:	04 96       	adiw	r24, 0x04	; 4
    3c9a:	fc 01       	movw	r30, r24
    3c9c:	80 81       	ld	r24, Z
    3c9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ca0:	a2 81       	ldd	r26, Z+2	; 0x02
    3ca2:	b3 81       	ldd	r27, Z+3	; 0x03
    3ca4:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ca6:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ca8:	f9 01       	movw	r30, r18
    3caa:	24 81       	ldd	r18, Z+4	; 0x04
    3cac:	35 81       	ldd	r19, Z+5	; 0x05
    3cae:	2c 5f       	subi	r18, 0xFC	; 252
    3cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb2:	f9 01       	movw	r30, r18
    3cb4:	20 81       	ld	r18, Z
    3cb6:	31 81       	ldd	r19, Z+1	; 0x01
    3cb8:	28 5f       	subi	r18, 0xF8	; 248
    3cba:	3f 4f       	sbci	r19, 0xFF	; 255
    3cbc:	f9 01       	movw	r30, r18
    3cbe:	20 81       	ld	r18, Z
    3cc0:	31 81       	ldd	r19, Z+1	; 0x01
    3cc2:	42 81       	ldd	r20, Z+2	; 0x02
    3cc4:	53 81       	ldd	r21, Z+3	; 0x03
    3cc6:	bc 01       	movw	r22, r24
    3cc8:	cd 01       	movw	r24, r26
    3cca:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	9c 01       	movw	r18, r24
    3cd4:	ad 01       	movw	r20, r26
    3cd6:	c7 01       	movw	r24, r14
    3cd8:	b6 01       	movw	r22, r12
    3cda:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    3cde:	dc 01       	movw	r26, r24
    3ce0:	cb 01       	movw	r24, r22
    3ce2:	bc 01       	movw	r22, r24
    3ce4:	cd 01       	movw	r24, r26
    3ce6:	29 81       	ldd	r18, Y+1	; 0x01
    3ce8:	3a 81       	ldd	r19, Y+2	; 0x02
    3cea:	4b 81       	ldd	r20, Y+3	; 0x03
    3cec:	5c 81       	ldd	r21, Y+4	; 0x04
    3cee:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	f5 01       	movw	r30, r10
    3cf8:	80 83       	st	Z, r24
    3cfa:	91 83       	std	Z+1, r25	; 0x01
    3cfc:	a2 83       	std	Z+2, r26	; 0x02
    3cfe:	b3 83       	std	Z+3, r27	; 0x03
	C.mat[0][2]=(this->mat[0][1]*this->mat[2][1] - this->mat[1][1]*this->mat[2][0])/det;
    3d00:	c8 01       	movw	r24, r16
    3d02:	fc 01       	movw	r30, r24
    3d04:	84 81       	ldd	r24, Z+4	; 0x04
    3d06:	95 81       	ldd	r25, Z+5	; 0x05
    3d08:	fc 01       	movw	r30, r24
    3d0a:	80 81       	ld	r24, Z
    3d0c:	91 81       	ldd	r25, Z+1	; 0x01
    3d0e:	aa 24       	eor	r10, r10
    3d10:	bb 24       	eor	r11, r11
    3d12:	68 94       	set
    3d14:	a3 f8       	bld	r10, 3
    3d16:	a8 0e       	add	r10, r24
    3d18:	b9 1e       	adc	r11, r25
    3d1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d1e:	fc 01       	movw	r30, r24
    3d20:	84 81       	ldd	r24, Z+4	; 0x04
    3d22:	95 81       	ldd	r25, Z+5	; 0x05
    3d24:	fc 01       	movw	r30, r24
    3d26:	80 81       	ld	r24, Z
    3d28:	91 81       	ldd	r25, Z+1	; 0x01
    3d2a:	04 96       	adiw	r24, 0x04	; 4
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	80 81       	ld	r24, Z
    3d30:	91 81       	ldd	r25, Z+1	; 0x01
    3d32:	a2 81       	ldd	r26, Z+2	; 0x02
    3d34:	b3 81       	ldd	r27, Z+3	; 0x03
    3d36:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d38:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d3a:	f9 01       	movw	r30, r18
    3d3c:	24 81       	ldd	r18, Z+4	; 0x04
    3d3e:	35 81       	ldd	r19, Z+5	; 0x05
    3d40:	2c 5f       	subi	r18, 0xFC	; 252
    3d42:	3f 4f       	sbci	r19, 0xFF	; 255
    3d44:	f9 01       	movw	r30, r18
    3d46:	20 81       	ld	r18, Z
    3d48:	31 81       	ldd	r19, Z+1	; 0x01
    3d4a:	2c 5f       	subi	r18, 0xFC	; 252
    3d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4e:	f9 01       	movw	r30, r18
    3d50:	20 81       	ld	r18, Z
    3d52:	31 81       	ldd	r19, Z+1	; 0x01
    3d54:	42 81       	ldd	r20, Z+2	; 0x02
    3d56:	53 81       	ldd	r21, Z+3	; 0x03
    3d58:	bc 01       	movw	r22, r24
    3d5a:	cd 01       	movw	r24, r26
    3d5c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	6c 01       	movw	r12, r24
    3d66:	7d 01       	movw	r14, r26
    3d68:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	84 81       	ldd	r24, Z+4	; 0x04
    3d70:	95 81       	ldd	r25, Z+5	; 0x05
    3d72:	02 96       	adiw	r24, 0x02	; 2
    3d74:	fc 01       	movw	r30, r24
    3d76:	80 81       	ld	r24, Z
    3d78:	91 81       	ldd	r25, Z+1	; 0x01
    3d7a:	04 96       	adiw	r24, 0x04	; 4
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	80 81       	ld	r24, Z
    3d80:	91 81       	ldd	r25, Z+1	; 0x01
    3d82:	a2 81       	ldd	r26, Z+2	; 0x02
    3d84:	b3 81       	ldd	r27, Z+3	; 0x03
    3d86:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d88:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d8a:	f9 01       	movw	r30, r18
    3d8c:	24 81       	ldd	r18, Z+4	; 0x04
    3d8e:	35 81       	ldd	r19, Z+5	; 0x05
    3d90:	2c 5f       	subi	r18, 0xFC	; 252
    3d92:	3f 4f       	sbci	r19, 0xFF	; 255
    3d94:	f9 01       	movw	r30, r18
    3d96:	20 81       	ld	r18, Z
    3d98:	31 81       	ldd	r19, Z+1	; 0x01
    3d9a:	f9 01       	movw	r30, r18
    3d9c:	20 81       	ld	r18, Z
    3d9e:	31 81       	ldd	r19, Z+1	; 0x01
    3da0:	42 81       	ldd	r20, Z+2	; 0x02
    3da2:	53 81       	ldd	r21, Z+3	; 0x03
    3da4:	bc 01       	movw	r22, r24
    3da6:	cd 01       	movw	r24, r26
    3da8:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	9c 01       	movw	r18, r24
    3db2:	ad 01       	movw	r20, r26
    3db4:	c7 01       	movw	r24, r14
    3db6:	b6 01       	movw	r22, r12
    3db8:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	bc 01       	movw	r22, r24
    3dc2:	cd 01       	movw	r24, r26
    3dc4:	29 81       	ldd	r18, Y+1	; 0x01
    3dc6:	3a 81       	ldd	r19, Y+2	; 0x02
    3dc8:	4b 81       	ldd	r20, Y+3	; 0x03
    3dca:	5c 81       	ldd	r21, Y+4	; 0x04
    3dcc:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	f5 01       	movw	r30, r10
    3dd6:	80 83       	st	Z, r24
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	a2 83       	std	Z+2, r26	; 0x02
    3ddc:	b3 83       	std	Z+3, r27	; 0x03
	
	C.mat[1][0]=(this->mat[1][2]*this->mat[2][0] - this->mat[1][0]*this->mat[2][2])/det;
    3dde:	c8 01       	movw	r24, r16
    3de0:	fc 01       	movw	r30, r24
    3de2:	84 81       	ldd	r24, Z+4	; 0x04
    3de4:	95 81       	ldd	r25, Z+5	; 0x05
    3de6:	02 96       	adiw	r24, 0x02	; 2
    3de8:	fc 01       	movw	r30, r24
    3dea:	a0 80       	ld	r10, Z
    3dec:	b1 80       	ldd	r11, Z+1	; 0x01
    3dee:	8b 85       	ldd	r24, Y+11	; 0x0b
    3df0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3df2:	fc 01       	movw	r30, r24
    3df4:	84 81       	ldd	r24, Z+4	; 0x04
    3df6:	95 81       	ldd	r25, Z+5	; 0x05
    3df8:	02 96       	adiw	r24, 0x02	; 2
    3dfa:	fc 01       	movw	r30, r24
    3dfc:	80 81       	ld	r24, Z
    3dfe:	91 81       	ldd	r25, Z+1	; 0x01
    3e00:	08 96       	adiw	r24, 0x08	; 8
    3e02:	fc 01       	movw	r30, r24
    3e04:	80 81       	ld	r24, Z
    3e06:	91 81       	ldd	r25, Z+1	; 0x01
    3e08:	a2 81       	ldd	r26, Z+2	; 0x02
    3e0a:	b3 81       	ldd	r27, Z+3	; 0x03
    3e0c:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e0e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e10:	f9 01       	movw	r30, r18
    3e12:	24 81       	ldd	r18, Z+4	; 0x04
    3e14:	35 81       	ldd	r19, Z+5	; 0x05
    3e16:	2c 5f       	subi	r18, 0xFC	; 252
    3e18:	3f 4f       	sbci	r19, 0xFF	; 255
    3e1a:	f9 01       	movw	r30, r18
    3e1c:	20 81       	ld	r18, Z
    3e1e:	31 81       	ldd	r19, Z+1	; 0x01
    3e20:	f9 01       	movw	r30, r18
    3e22:	20 81       	ld	r18, Z
    3e24:	31 81       	ldd	r19, Z+1	; 0x01
    3e26:	42 81       	ldd	r20, Z+2	; 0x02
    3e28:	53 81       	ldd	r21, Z+3	; 0x03
    3e2a:	bc 01       	movw	r22, r24
    3e2c:	cd 01       	movw	r24, r26
    3e2e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	6c 01       	movw	r12, r24
    3e38:	7d 01       	movw	r14, r26
    3e3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e3e:	fc 01       	movw	r30, r24
    3e40:	84 81       	ldd	r24, Z+4	; 0x04
    3e42:	95 81       	ldd	r25, Z+5	; 0x05
    3e44:	02 96       	adiw	r24, 0x02	; 2
    3e46:	fc 01       	movw	r30, r24
    3e48:	80 81       	ld	r24, Z
    3e4a:	91 81       	ldd	r25, Z+1	; 0x01
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	80 81       	ld	r24, Z
    3e50:	91 81       	ldd	r25, Z+1	; 0x01
    3e52:	a2 81       	ldd	r26, Z+2	; 0x02
    3e54:	b3 81       	ldd	r27, Z+3	; 0x03
    3e56:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e58:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e5a:	f9 01       	movw	r30, r18
    3e5c:	24 81       	ldd	r18, Z+4	; 0x04
    3e5e:	35 81       	ldd	r19, Z+5	; 0x05
    3e60:	2c 5f       	subi	r18, 0xFC	; 252
    3e62:	3f 4f       	sbci	r19, 0xFF	; 255
    3e64:	f9 01       	movw	r30, r18
    3e66:	20 81       	ld	r18, Z
    3e68:	31 81       	ldd	r19, Z+1	; 0x01
    3e6a:	28 5f       	subi	r18, 0xF8	; 248
    3e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6e:	f9 01       	movw	r30, r18
    3e70:	20 81       	ld	r18, Z
    3e72:	31 81       	ldd	r19, Z+1	; 0x01
    3e74:	42 81       	ldd	r20, Z+2	; 0x02
    3e76:	53 81       	ldd	r21, Z+3	; 0x03
    3e78:	bc 01       	movw	r22, r24
    3e7a:	cd 01       	movw	r24, r26
    3e7c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3e80:	dc 01       	movw	r26, r24
    3e82:	cb 01       	movw	r24, r22
    3e84:	9c 01       	movw	r18, r24
    3e86:	ad 01       	movw	r20, r26
    3e88:	c7 01       	movw	r24, r14
    3e8a:	b6 01       	movw	r22, r12
    3e8c:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	bc 01       	movw	r22, r24
    3e96:	cd 01       	movw	r24, r26
    3e98:	29 81       	ldd	r18, Y+1	; 0x01
    3e9a:	3a 81       	ldd	r19, Y+2	; 0x02
    3e9c:	4b 81       	ldd	r20, Y+3	; 0x03
    3e9e:	5c 81       	ldd	r21, Y+4	; 0x04
    3ea0:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	f5 01       	movw	r30, r10
    3eaa:	80 83       	st	Z, r24
    3eac:	91 83       	std	Z+1, r25	; 0x01
    3eae:	a2 83       	std	Z+2, r26	; 0x02
    3eb0:	b3 83       	std	Z+3, r27	; 0x03
	C.mat[1][1]=(this->mat[0][0]*this->mat[2][2] - this->mat[0][2]*this->mat[2][0])/det;
    3eb2:	c8 01       	movw	r24, r16
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	84 81       	ldd	r24, Z+4	; 0x04
    3eb8:	95 81       	ldd	r25, Z+5	; 0x05
    3eba:	02 96       	adiw	r24, 0x02	; 2
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	80 81       	ld	r24, Z
    3ec0:	91 81       	ldd	r25, Z+1	; 0x01
    3ec2:	aa 24       	eor	r10, r10
    3ec4:	bb 24       	eor	r11, r11
    3ec6:	68 94       	set
    3ec8:	a2 f8       	bld	r10, 2
    3eca:	a8 0e       	add	r10, r24
    3ecc:	b9 1e       	adc	r11, r25
    3ece:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ed0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	84 81       	ldd	r24, Z+4	; 0x04
    3ed6:	95 81       	ldd	r25, Z+5	; 0x05
    3ed8:	fc 01       	movw	r30, r24
    3eda:	80 81       	ld	r24, Z
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	fc 01       	movw	r30, r24
    3ee0:	80 81       	ld	r24, Z
    3ee2:	91 81       	ldd	r25, Z+1	; 0x01
    3ee4:	a2 81       	ldd	r26, Z+2	; 0x02
    3ee6:	b3 81       	ldd	r27, Z+3	; 0x03
    3ee8:	2b 85       	ldd	r18, Y+11	; 0x0b
    3eea:	3c 85       	ldd	r19, Y+12	; 0x0c
    3eec:	f9 01       	movw	r30, r18
    3eee:	24 81       	ldd	r18, Z+4	; 0x04
    3ef0:	35 81       	ldd	r19, Z+5	; 0x05
    3ef2:	2c 5f       	subi	r18, 0xFC	; 252
    3ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef6:	f9 01       	movw	r30, r18
    3ef8:	20 81       	ld	r18, Z
    3efa:	31 81       	ldd	r19, Z+1	; 0x01
    3efc:	28 5f       	subi	r18, 0xF8	; 248
    3efe:	3f 4f       	sbci	r19, 0xFF	; 255
    3f00:	f9 01       	movw	r30, r18
    3f02:	20 81       	ld	r18, Z
    3f04:	31 81       	ldd	r19, Z+1	; 0x01
    3f06:	42 81       	ldd	r20, Z+2	; 0x02
    3f08:	53 81       	ldd	r21, Z+3	; 0x03
    3f0a:	bc 01       	movw	r22, r24
    3f0c:	cd 01       	movw	r24, r26
    3f0e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	6c 01       	movw	r12, r24
    3f18:	7d 01       	movw	r14, r26
    3f1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f1e:	fc 01       	movw	r30, r24
    3f20:	84 81       	ldd	r24, Z+4	; 0x04
    3f22:	95 81       	ldd	r25, Z+5	; 0x05
    3f24:	fc 01       	movw	r30, r24
    3f26:	80 81       	ld	r24, Z
    3f28:	91 81       	ldd	r25, Z+1	; 0x01
    3f2a:	08 96       	adiw	r24, 0x08	; 8
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	80 81       	ld	r24, Z
    3f30:	91 81       	ldd	r25, Z+1	; 0x01
    3f32:	a2 81       	ldd	r26, Z+2	; 0x02
    3f34:	b3 81       	ldd	r27, Z+3	; 0x03
    3f36:	2b 85       	ldd	r18, Y+11	; 0x0b
    3f38:	3c 85       	ldd	r19, Y+12	; 0x0c
    3f3a:	f9 01       	movw	r30, r18
    3f3c:	24 81       	ldd	r18, Z+4	; 0x04
    3f3e:	35 81       	ldd	r19, Z+5	; 0x05
    3f40:	2c 5f       	subi	r18, 0xFC	; 252
    3f42:	3f 4f       	sbci	r19, 0xFF	; 255
    3f44:	f9 01       	movw	r30, r18
    3f46:	20 81       	ld	r18, Z
    3f48:	31 81       	ldd	r19, Z+1	; 0x01
    3f4a:	f9 01       	movw	r30, r18
    3f4c:	20 81       	ld	r18, Z
    3f4e:	31 81       	ldd	r19, Z+1	; 0x01
    3f50:	42 81       	ldd	r20, Z+2	; 0x02
    3f52:	53 81       	ldd	r21, Z+3	; 0x03
    3f54:	bc 01       	movw	r22, r24
    3f56:	cd 01       	movw	r24, r26
    3f58:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	9c 01       	movw	r18, r24
    3f62:	ad 01       	movw	r20, r26
    3f64:	c7 01       	movw	r24, r14
    3f66:	b6 01       	movw	r22, r12
    3f68:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    3f6c:	dc 01       	movw	r26, r24
    3f6e:	cb 01       	movw	r24, r22
    3f70:	bc 01       	movw	r22, r24
    3f72:	cd 01       	movw	r24, r26
    3f74:	29 81       	ldd	r18, Y+1	; 0x01
    3f76:	3a 81       	ldd	r19, Y+2	; 0x02
    3f78:	4b 81       	ldd	r20, Y+3	; 0x03
    3f7a:	5c 81       	ldd	r21, Y+4	; 0x04
    3f7c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	f5 01       	movw	r30, r10
    3f86:	80 83       	st	Z, r24
    3f88:	91 83       	std	Z+1, r25	; 0x01
    3f8a:	a2 83       	std	Z+2, r26	; 0x02
    3f8c:	b3 83       	std	Z+3, r27	; 0x03
	C.mat[1][2]=(this->mat[0][2]*this->mat[1][0] - this->mat[0][0]*this->mat[1][2])/det;
    3f8e:	c8 01       	movw	r24, r16
    3f90:	fc 01       	movw	r30, r24
    3f92:	84 81       	ldd	r24, Z+4	; 0x04
    3f94:	95 81       	ldd	r25, Z+5	; 0x05
    3f96:	02 96       	adiw	r24, 0x02	; 2
    3f98:	fc 01       	movw	r30, r24
    3f9a:	80 81       	ld	r24, Z
    3f9c:	91 81       	ldd	r25, Z+1	; 0x01
    3f9e:	aa 24       	eor	r10, r10
    3fa0:	bb 24       	eor	r11, r11
    3fa2:	68 94       	set
    3fa4:	a3 f8       	bld	r10, 3
    3fa6:	a8 0e       	add	r10, r24
    3fa8:	b9 1e       	adc	r11, r25
    3faa:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fac:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fae:	fc 01       	movw	r30, r24
    3fb0:	84 81       	ldd	r24, Z+4	; 0x04
    3fb2:	95 81       	ldd	r25, Z+5	; 0x05
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	80 81       	ld	r24, Z
    3fb8:	91 81       	ldd	r25, Z+1	; 0x01
    3fba:	08 96       	adiw	r24, 0x08	; 8
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	80 81       	ld	r24, Z
    3fc0:	91 81       	ldd	r25, Z+1	; 0x01
    3fc2:	a2 81       	ldd	r26, Z+2	; 0x02
    3fc4:	b3 81       	ldd	r27, Z+3	; 0x03
    3fc6:	2b 85       	ldd	r18, Y+11	; 0x0b
    3fc8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3fca:	f9 01       	movw	r30, r18
    3fcc:	24 81       	ldd	r18, Z+4	; 0x04
    3fce:	35 81       	ldd	r19, Z+5	; 0x05
    3fd0:	2e 5f       	subi	r18, 0xFE	; 254
    3fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd4:	f9 01       	movw	r30, r18
    3fd6:	20 81       	ld	r18, Z
    3fd8:	31 81       	ldd	r19, Z+1	; 0x01
    3fda:	f9 01       	movw	r30, r18
    3fdc:	20 81       	ld	r18, Z
    3fde:	31 81       	ldd	r19, Z+1	; 0x01
    3fe0:	42 81       	ldd	r20, Z+2	; 0x02
    3fe2:	53 81       	ldd	r21, Z+3	; 0x03
    3fe4:	bc 01       	movw	r22, r24
    3fe6:	cd 01       	movw	r24, r26
    3fe8:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	6c 01       	movw	r12, r24
    3ff2:	7d 01       	movw	r14, r26
    3ff4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ff6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	84 81       	ldd	r24, Z+4	; 0x04
    3ffc:	95 81       	ldd	r25, Z+5	; 0x05
    3ffe:	fc 01       	movw	r30, r24
    4000:	80 81       	ld	r24, Z
    4002:	91 81       	ldd	r25, Z+1	; 0x01
    4004:	fc 01       	movw	r30, r24
    4006:	80 81       	ld	r24, Z
    4008:	91 81       	ldd	r25, Z+1	; 0x01
    400a:	a2 81       	ldd	r26, Z+2	; 0x02
    400c:	b3 81       	ldd	r27, Z+3	; 0x03
    400e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4010:	3c 85       	ldd	r19, Y+12	; 0x0c
    4012:	f9 01       	movw	r30, r18
    4014:	24 81       	ldd	r18, Z+4	; 0x04
    4016:	35 81       	ldd	r19, Z+5	; 0x05
    4018:	2e 5f       	subi	r18, 0xFE	; 254
    401a:	3f 4f       	sbci	r19, 0xFF	; 255
    401c:	f9 01       	movw	r30, r18
    401e:	20 81       	ld	r18, Z
    4020:	31 81       	ldd	r19, Z+1	; 0x01
    4022:	28 5f       	subi	r18, 0xF8	; 248
    4024:	3f 4f       	sbci	r19, 0xFF	; 255
    4026:	f9 01       	movw	r30, r18
    4028:	20 81       	ld	r18, Z
    402a:	31 81       	ldd	r19, Z+1	; 0x01
    402c:	42 81       	ldd	r20, Z+2	; 0x02
    402e:	53 81       	ldd	r21, Z+3	; 0x03
    4030:	bc 01       	movw	r22, r24
    4032:	cd 01       	movw	r24, r26
    4034:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	9c 01       	movw	r18, r24
    403e:	ad 01       	movw	r20, r26
    4040:	c7 01       	movw	r24, r14
    4042:	b6 01       	movw	r22, r12
    4044:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	bc 01       	movw	r22, r24
    404e:	cd 01       	movw	r24, r26
    4050:	29 81       	ldd	r18, Y+1	; 0x01
    4052:	3a 81       	ldd	r19, Y+2	; 0x02
    4054:	4b 81       	ldd	r20, Y+3	; 0x03
    4056:	5c 81       	ldd	r21, Y+4	; 0x04
    4058:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	f5 01       	movw	r30, r10
    4062:	80 83       	st	Z, r24
    4064:	91 83       	std	Z+1, r25	; 0x01
    4066:	a2 83       	std	Z+2, r26	; 0x02
    4068:	b3 83       	std	Z+3, r27	; 0x03
	
	C.mat[2][0]=(this->mat[1][0]*this->mat[2][1] - this->mat[1][1]*this->mat[2][0])/det;
    406a:	c8 01       	movw	r24, r16
    406c:	fc 01       	movw	r30, r24
    406e:	84 81       	ldd	r24, Z+4	; 0x04
    4070:	95 81       	ldd	r25, Z+5	; 0x05
    4072:	04 96       	adiw	r24, 0x04	; 4
    4074:	fc 01       	movw	r30, r24
    4076:	a0 80       	ld	r10, Z
    4078:	b1 80       	ldd	r11, Z+1	; 0x01
    407a:	8b 85       	ldd	r24, Y+11	; 0x0b
    407c:	9c 85       	ldd	r25, Y+12	; 0x0c
    407e:	fc 01       	movw	r30, r24
    4080:	84 81       	ldd	r24, Z+4	; 0x04
    4082:	95 81       	ldd	r25, Z+5	; 0x05
    4084:	02 96       	adiw	r24, 0x02	; 2
    4086:	fc 01       	movw	r30, r24
    4088:	80 81       	ld	r24, Z
    408a:	91 81       	ldd	r25, Z+1	; 0x01
    408c:	fc 01       	movw	r30, r24
    408e:	80 81       	ld	r24, Z
    4090:	91 81       	ldd	r25, Z+1	; 0x01
    4092:	a2 81       	ldd	r26, Z+2	; 0x02
    4094:	b3 81       	ldd	r27, Z+3	; 0x03
    4096:	2b 85       	ldd	r18, Y+11	; 0x0b
    4098:	3c 85       	ldd	r19, Y+12	; 0x0c
    409a:	f9 01       	movw	r30, r18
    409c:	24 81       	ldd	r18, Z+4	; 0x04
    409e:	35 81       	ldd	r19, Z+5	; 0x05
    40a0:	2c 5f       	subi	r18, 0xFC	; 252
    40a2:	3f 4f       	sbci	r19, 0xFF	; 255
    40a4:	f9 01       	movw	r30, r18
    40a6:	20 81       	ld	r18, Z
    40a8:	31 81       	ldd	r19, Z+1	; 0x01
    40aa:	2c 5f       	subi	r18, 0xFC	; 252
    40ac:	3f 4f       	sbci	r19, 0xFF	; 255
    40ae:	f9 01       	movw	r30, r18
    40b0:	20 81       	ld	r18, Z
    40b2:	31 81       	ldd	r19, Z+1	; 0x01
    40b4:	42 81       	ldd	r20, Z+2	; 0x02
    40b6:	53 81       	ldd	r21, Z+3	; 0x03
    40b8:	bc 01       	movw	r22, r24
    40ba:	cd 01       	movw	r24, r26
    40bc:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    40c0:	dc 01       	movw	r26, r24
    40c2:	cb 01       	movw	r24, r22
    40c4:	6c 01       	movw	r12, r24
    40c6:	7d 01       	movw	r14, r26
    40c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    40ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    40cc:	fc 01       	movw	r30, r24
    40ce:	84 81       	ldd	r24, Z+4	; 0x04
    40d0:	95 81       	ldd	r25, Z+5	; 0x05
    40d2:	02 96       	adiw	r24, 0x02	; 2
    40d4:	fc 01       	movw	r30, r24
    40d6:	80 81       	ld	r24, Z
    40d8:	91 81       	ldd	r25, Z+1	; 0x01
    40da:	04 96       	adiw	r24, 0x04	; 4
    40dc:	fc 01       	movw	r30, r24
    40de:	80 81       	ld	r24, Z
    40e0:	91 81       	ldd	r25, Z+1	; 0x01
    40e2:	a2 81       	ldd	r26, Z+2	; 0x02
    40e4:	b3 81       	ldd	r27, Z+3	; 0x03
    40e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    40e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    40ea:	f9 01       	movw	r30, r18
    40ec:	24 81       	ldd	r18, Z+4	; 0x04
    40ee:	35 81       	ldd	r19, Z+5	; 0x05
    40f0:	2c 5f       	subi	r18, 0xFC	; 252
    40f2:	3f 4f       	sbci	r19, 0xFF	; 255
    40f4:	f9 01       	movw	r30, r18
    40f6:	20 81       	ld	r18, Z
    40f8:	31 81       	ldd	r19, Z+1	; 0x01
    40fa:	f9 01       	movw	r30, r18
    40fc:	20 81       	ld	r18, Z
    40fe:	31 81       	ldd	r19, Z+1	; 0x01
    4100:	42 81       	ldd	r20, Z+2	; 0x02
    4102:	53 81       	ldd	r21, Z+3	; 0x03
    4104:	bc 01       	movw	r22, r24
    4106:	cd 01       	movw	r24, r26
    4108:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    410c:	dc 01       	movw	r26, r24
    410e:	cb 01       	movw	r24, r22
    4110:	9c 01       	movw	r18, r24
    4112:	ad 01       	movw	r20, r26
    4114:	c7 01       	movw	r24, r14
    4116:	b6 01       	movw	r22, r12
    4118:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	bc 01       	movw	r22, r24
    4122:	cd 01       	movw	r24, r26
    4124:	29 81       	ldd	r18, Y+1	; 0x01
    4126:	3a 81       	ldd	r19, Y+2	; 0x02
    4128:	4b 81       	ldd	r20, Y+3	; 0x03
    412a:	5c 81       	ldd	r21, Y+4	; 0x04
    412c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	f5 01       	movw	r30, r10
    4136:	80 83       	st	Z, r24
    4138:	91 83       	std	Z+1, r25	; 0x01
    413a:	a2 83       	std	Z+2, r26	; 0x02
    413c:	b3 83       	std	Z+3, r27	; 0x03
	C.mat[2][1]=(this->mat[0][1]*this->mat[2][0] - this->mat[0][0]*this->mat[2][1])/det;
    413e:	c8 01       	movw	r24, r16
    4140:	fc 01       	movw	r30, r24
    4142:	84 81       	ldd	r24, Z+4	; 0x04
    4144:	95 81       	ldd	r25, Z+5	; 0x05
    4146:	04 96       	adiw	r24, 0x04	; 4
    4148:	fc 01       	movw	r30, r24
    414a:	80 81       	ld	r24, Z
    414c:	91 81       	ldd	r25, Z+1	; 0x01
    414e:	aa 24       	eor	r10, r10
    4150:	bb 24       	eor	r11, r11
    4152:	68 94       	set
    4154:	a2 f8       	bld	r10, 2
    4156:	a8 0e       	add	r10, r24
    4158:	b9 1e       	adc	r11, r25
    415a:	8b 85       	ldd	r24, Y+11	; 0x0b
    415c:	9c 85       	ldd	r25, Y+12	; 0x0c
    415e:	fc 01       	movw	r30, r24
    4160:	84 81       	ldd	r24, Z+4	; 0x04
    4162:	95 81       	ldd	r25, Z+5	; 0x05
    4164:	fc 01       	movw	r30, r24
    4166:	80 81       	ld	r24, Z
    4168:	91 81       	ldd	r25, Z+1	; 0x01
    416a:	04 96       	adiw	r24, 0x04	; 4
    416c:	fc 01       	movw	r30, r24
    416e:	80 81       	ld	r24, Z
    4170:	91 81       	ldd	r25, Z+1	; 0x01
    4172:	a2 81       	ldd	r26, Z+2	; 0x02
    4174:	b3 81       	ldd	r27, Z+3	; 0x03
    4176:	2b 85       	ldd	r18, Y+11	; 0x0b
    4178:	3c 85       	ldd	r19, Y+12	; 0x0c
    417a:	f9 01       	movw	r30, r18
    417c:	24 81       	ldd	r18, Z+4	; 0x04
    417e:	35 81       	ldd	r19, Z+5	; 0x05
    4180:	2c 5f       	subi	r18, 0xFC	; 252
    4182:	3f 4f       	sbci	r19, 0xFF	; 255
    4184:	f9 01       	movw	r30, r18
    4186:	20 81       	ld	r18, Z
    4188:	31 81       	ldd	r19, Z+1	; 0x01
    418a:	f9 01       	movw	r30, r18
    418c:	20 81       	ld	r18, Z
    418e:	31 81       	ldd	r19, Z+1	; 0x01
    4190:	42 81       	ldd	r20, Z+2	; 0x02
    4192:	53 81       	ldd	r21, Z+3	; 0x03
    4194:	bc 01       	movw	r22, r24
    4196:	cd 01       	movw	r24, r26
    4198:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    419c:	dc 01       	movw	r26, r24
    419e:	cb 01       	movw	r24, r22
    41a0:	6c 01       	movw	r12, r24
    41a2:	7d 01       	movw	r14, r26
    41a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    41a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    41a8:	fc 01       	movw	r30, r24
    41aa:	84 81       	ldd	r24, Z+4	; 0x04
    41ac:	95 81       	ldd	r25, Z+5	; 0x05
    41ae:	fc 01       	movw	r30, r24
    41b0:	80 81       	ld	r24, Z
    41b2:	91 81       	ldd	r25, Z+1	; 0x01
    41b4:	fc 01       	movw	r30, r24
    41b6:	80 81       	ld	r24, Z
    41b8:	91 81       	ldd	r25, Z+1	; 0x01
    41ba:	a2 81       	ldd	r26, Z+2	; 0x02
    41bc:	b3 81       	ldd	r27, Z+3	; 0x03
    41be:	2b 85       	ldd	r18, Y+11	; 0x0b
    41c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    41c2:	f9 01       	movw	r30, r18
    41c4:	24 81       	ldd	r18, Z+4	; 0x04
    41c6:	35 81       	ldd	r19, Z+5	; 0x05
    41c8:	2c 5f       	subi	r18, 0xFC	; 252
    41ca:	3f 4f       	sbci	r19, 0xFF	; 255
    41cc:	f9 01       	movw	r30, r18
    41ce:	20 81       	ld	r18, Z
    41d0:	31 81       	ldd	r19, Z+1	; 0x01
    41d2:	2c 5f       	subi	r18, 0xFC	; 252
    41d4:	3f 4f       	sbci	r19, 0xFF	; 255
    41d6:	f9 01       	movw	r30, r18
    41d8:	20 81       	ld	r18, Z
    41da:	31 81       	ldd	r19, Z+1	; 0x01
    41dc:	42 81       	ldd	r20, Z+2	; 0x02
    41de:	53 81       	ldd	r21, Z+3	; 0x03
    41e0:	bc 01       	movw	r22, r24
    41e2:	cd 01       	movw	r24, r26
    41e4:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	9c 01       	movw	r18, r24
    41ee:	ad 01       	movw	r20, r26
    41f0:	c7 01       	movw	r24, r14
    41f2:	b6 01       	movw	r22, r12
    41f4:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	bc 01       	movw	r22, r24
    41fe:	cd 01       	movw	r24, r26
    4200:	29 81       	ldd	r18, Y+1	; 0x01
    4202:	3a 81       	ldd	r19, Y+2	; 0x02
    4204:	4b 81       	ldd	r20, Y+3	; 0x03
    4206:	5c 81       	ldd	r21, Y+4	; 0x04
    4208:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	f5 01       	movw	r30, r10
    4212:	80 83       	st	Z, r24
    4214:	91 83       	std	Z+1, r25	; 0x01
    4216:	a2 83       	std	Z+2, r26	; 0x02
    4218:	b3 83       	std	Z+3, r27	; 0x03
	C.mat[2][2]=(this->mat[0][0]*this->mat[1][1] - this->mat[0][1]*this->mat[1][0])/det;	
    421a:	c8 01       	movw	r24, r16
    421c:	fc 01       	movw	r30, r24
    421e:	84 81       	ldd	r24, Z+4	; 0x04
    4220:	95 81       	ldd	r25, Z+5	; 0x05
    4222:	04 96       	adiw	r24, 0x04	; 4
    4224:	fc 01       	movw	r30, r24
    4226:	80 81       	ld	r24, Z
    4228:	91 81       	ldd	r25, Z+1	; 0x01
    422a:	aa 24       	eor	r10, r10
    422c:	bb 24       	eor	r11, r11
    422e:	68 94       	set
    4230:	a3 f8       	bld	r10, 3
    4232:	a8 0e       	add	r10, r24
    4234:	b9 1e       	adc	r11, r25
    4236:	8b 85       	ldd	r24, Y+11	; 0x0b
    4238:	9c 85       	ldd	r25, Y+12	; 0x0c
    423a:	fc 01       	movw	r30, r24
    423c:	84 81       	ldd	r24, Z+4	; 0x04
    423e:	95 81       	ldd	r25, Z+5	; 0x05
    4240:	fc 01       	movw	r30, r24
    4242:	80 81       	ld	r24, Z
    4244:	91 81       	ldd	r25, Z+1	; 0x01
    4246:	fc 01       	movw	r30, r24
    4248:	80 81       	ld	r24, Z
    424a:	91 81       	ldd	r25, Z+1	; 0x01
    424c:	a2 81       	ldd	r26, Z+2	; 0x02
    424e:	b3 81       	ldd	r27, Z+3	; 0x03
    4250:	2b 85       	ldd	r18, Y+11	; 0x0b
    4252:	3c 85       	ldd	r19, Y+12	; 0x0c
    4254:	f9 01       	movw	r30, r18
    4256:	24 81       	ldd	r18, Z+4	; 0x04
    4258:	35 81       	ldd	r19, Z+5	; 0x05
    425a:	2e 5f       	subi	r18, 0xFE	; 254
    425c:	3f 4f       	sbci	r19, 0xFF	; 255
    425e:	f9 01       	movw	r30, r18
    4260:	20 81       	ld	r18, Z
    4262:	31 81       	ldd	r19, Z+1	; 0x01
    4264:	2c 5f       	subi	r18, 0xFC	; 252
    4266:	3f 4f       	sbci	r19, 0xFF	; 255
    4268:	f9 01       	movw	r30, r18
    426a:	20 81       	ld	r18, Z
    426c:	31 81       	ldd	r19, Z+1	; 0x01
    426e:	42 81       	ldd	r20, Z+2	; 0x02
    4270:	53 81       	ldd	r21, Z+3	; 0x03
    4272:	bc 01       	movw	r22, r24
    4274:	cd 01       	movw	r24, r26
    4276:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    427a:	dc 01       	movw	r26, r24
    427c:	cb 01       	movw	r24, r22
    427e:	6c 01       	movw	r12, r24
    4280:	7d 01       	movw	r14, r26
    4282:	8b 85       	ldd	r24, Y+11	; 0x0b
    4284:	9c 85       	ldd	r25, Y+12	; 0x0c
    4286:	fc 01       	movw	r30, r24
    4288:	84 81       	ldd	r24, Z+4	; 0x04
    428a:	95 81       	ldd	r25, Z+5	; 0x05
    428c:	fc 01       	movw	r30, r24
    428e:	80 81       	ld	r24, Z
    4290:	91 81       	ldd	r25, Z+1	; 0x01
    4292:	04 96       	adiw	r24, 0x04	; 4
    4294:	fc 01       	movw	r30, r24
    4296:	80 81       	ld	r24, Z
    4298:	91 81       	ldd	r25, Z+1	; 0x01
    429a:	a2 81       	ldd	r26, Z+2	; 0x02
    429c:	b3 81       	ldd	r27, Z+3	; 0x03
    429e:	2b 85       	ldd	r18, Y+11	; 0x0b
    42a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    42a2:	f9 01       	movw	r30, r18
    42a4:	24 81       	ldd	r18, Z+4	; 0x04
    42a6:	35 81       	ldd	r19, Z+5	; 0x05
    42a8:	2e 5f       	subi	r18, 0xFE	; 254
    42aa:	3f 4f       	sbci	r19, 0xFF	; 255
    42ac:	f9 01       	movw	r30, r18
    42ae:	20 81       	ld	r18, Z
    42b0:	31 81       	ldd	r19, Z+1	; 0x01
    42b2:	f9 01       	movw	r30, r18
    42b4:	20 81       	ld	r18, Z
    42b6:	31 81       	ldd	r19, Z+1	; 0x01
    42b8:	42 81       	ldd	r20, Z+2	; 0x02
    42ba:	53 81       	ldd	r21, Z+3	; 0x03
    42bc:	bc 01       	movw	r22, r24
    42be:	cd 01       	movw	r24, r26
    42c0:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    42c4:	dc 01       	movw	r26, r24
    42c6:	cb 01       	movw	r24, r22
    42c8:	9c 01       	movw	r18, r24
    42ca:	ad 01       	movw	r20, r26
    42cc:	c7 01       	movw	r24, r14
    42ce:	b6 01       	movw	r22, r12
    42d0:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	bc 01       	movw	r22, r24
    42da:	cd 01       	movw	r24, r26
    42dc:	29 81       	ldd	r18, Y+1	; 0x01
    42de:	3a 81       	ldd	r19, Y+2	; 0x02
    42e0:	4b 81       	ldd	r20, Y+3	; 0x03
    42e2:	5c 81       	ldd	r21, Y+4	; 0x04
    42e4:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	f5 01       	movw	r30, r10
    42ee:	80 83       	st	Z, r24
    42f0:	91 83       	std	Z+1, r25	; 0x01
    42f2:	a2 83       	std	Z+2, r26	; 0x02
    42f4:	b3 83       	std	Z+3, r27	; 0x03
		
		
	return C;
}
    42f6:	c8 01       	movw	r24, r16
    42f8:	c8 01       	movw	r24, r16
    42fa:	2c 96       	adiw	r28, 0x0c	; 12
    42fc:	0f b6       	in	r0, 0x3f	; 63
    42fe:	f8 94       	cli
    4300:	de bf       	out	0x3e, r29	; 62
    4302:	0f be       	out	0x3f, r0	; 63
    4304:	cd bf       	out	0x3d, r28	; 61
    4306:	cf 91       	pop	r28
    4308:	df 91       	pop	r29
    430a:	1f 91       	pop	r17
    430c:	0f 91       	pop	r16
    430e:	ff 90       	pop	r15
    4310:	ef 90       	pop	r14
    4312:	df 90       	pop	r13
    4314:	cf 90       	pop	r12
    4316:	bf 90       	pop	r11
    4318:	af 90       	pop	r10
    431a:	08 95       	ret

0000431c <_ZN6Matrix17usart_Send_matrixEv>:



// Prints on serial the matrix
void Matrix::usart_Send_matrix (void)
{
    431c:	df 93       	push	r29
    431e:	cf 93       	push	r28
    4320:	00 d0       	rcall	.+0      	; 0x4322 <_ZN6Matrix17usart_Send_matrixEv+0x6>
    4322:	00 d0       	rcall	.+0      	; 0x4324 <_ZN6Matrix17usart_Send_matrixEv+0x8>
    4324:	00 d0       	rcall	.+0      	; 0x4326 <_ZN6Matrix17usart_Send_matrixEv+0xa>
    4326:	cd b7       	in	r28, 0x3d	; 61
    4328:	de b7       	in	r29, 0x3e	; 62
    432a:	9e 83       	std	Y+6, r25	; 0x06
    432c:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	
	USART_Send_string("\n"); 
    432e:	8f e4       	ldi	r24, 0x4F	; 79
    4330:	91 e0       	ldi	r25, 0x01	; 1
    4332:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		
	for (i=0; i<this->row; i++)
    4336:	1a 82       	std	Y+2, r1	; 0x02
    4338:	19 82       	std	Y+1, r1	; 0x01
    433a:	4c c0       	rjmp	.+152    	; 0x43d4 <_ZN6Matrix17usart_Send_matrixEv+0xb8>
	{
		USART_Send_string("(  ");
    433c:	81 e5       	ldi	r24, 0x51	; 81
    433e:	91 e0       	ldi	r25, 0x01	; 1
    4340:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		for (j=0; j<this->col; j++)
    4344:	1c 82       	std	Y+4, r1	; 0x04
    4346:	1b 82       	std	Y+3, r1	; 0x03
    4348:	2a c0       	rjmp	.+84     	; 0x439e <_ZN6Matrix17usart_Send_matrixEv+0x82>
		{		
			print_double(this->mat[i][j]);
    434a:	8d 81       	ldd	r24, Y+5	; 0x05
    434c:	9e 81       	ldd	r25, Y+6	; 0x06
    434e:	fc 01       	movw	r30, r24
    4350:	24 81       	ldd	r18, Z+4	; 0x04
    4352:	35 81       	ldd	r19, Z+5	; 0x05
    4354:	89 81       	ldd	r24, Y+1	; 0x01
    4356:	9a 81       	ldd	r25, Y+2	; 0x02
    4358:	88 0f       	add	r24, r24
    435a:	99 1f       	adc	r25, r25
    435c:	82 0f       	add	r24, r18
    435e:	93 1f       	adc	r25, r19
    4360:	fc 01       	movw	r30, r24
    4362:	20 81       	ld	r18, Z
    4364:	31 81       	ldd	r19, Z+1	; 0x01
    4366:	8b 81       	ldd	r24, Y+3	; 0x03
    4368:	9c 81       	ldd	r25, Y+4	; 0x04
    436a:	88 0f       	add	r24, r24
    436c:	99 1f       	adc	r25, r25
    436e:	88 0f       	add	r24, r24
    4370:	99 1f       	adc	r25, r25
    4372:	82 0f       	add	r24, r18
    4374:	93 1f       	adc	r25, r19
    4376:	fc 01       	movw	r30, r24
    4378:	80 81       	ld	r24, Z
    437a:	91 81       	ldd	r25, Z+1	; 0x01
    437c:	a2 81       	ldd	r26, Z+2	; 0x02
    437e:	b3 81       	ldd	r27, Z+3	; 0x03
    4380:	bc 01       	movw	r22, r24
    4382:	cd 01       	movw	r24, r26
    4384:	42 e0       	ldi	r20, 0x02	; 2
    4386:	50 e0       	ldi	r21, 0x00	; 0
    4388:	0e 94 18 29 	call	0x5230	; 0x5230 <_Z12print_doubledi>
			USART_Send_string("  ");			
    438c:	85 e5       	ldi	r24, 0x55	; 85
    438e:	91 e0       	ldi	r25, 0x01	; 1
    4390:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	USART_Send_string("\n"); 
		
	for (i=0; i<this->row; i++)
	{
		USART_Send_string("(  ");
		for (j=0; j<this->col; j++)
    4394:	8b 81       	ldd	r24, Y+3	; 0x03
    4396:	9c 81       	ldd	r25, Y+4	; 0x04
    4398:	01 96       	adiw	r24, 0x01	; 1
    439a:	9c 83       	std	Y+4, r25	; 0x04
    439c:	8b 83       	std	Y+3, r24	; 0x03
    439e:	8d 81       	ldd	r24, Y+5	; 0x05
    43a0:	9e 81       	ldd	r25, Y+6	; 0x06
    43a2:	fc 01       	movw	r30, r24
    43a4:	22 81       	ldd	r18, Z+2	; 0x02
    43a6:	33 81       	ldd	r19, Z+3	; 0x03
    43a8:	41 e0       	ldi	r20, 0x01	; 1
    43aa:	8b 81       	ldd	r24, Y+3	; 0x03
    43ac:	9c 81       	ldd	r25, Y+4	; 0x04
    43ae:	82 17       	cp	r24, r18
    43b0:	93 07       	cpc	r25, r19
    43b2:	0c f0       	brlt	.+2      	; 0x43b6 <_ZN6Matrix17usart_Send_matrixEv+0x9a>
    43b4:	40 e0       	ldi	r20, 0x00	; 0
    43b6:	44 23       	and	r20, r20
    43b8:	41 f6       	brne	.-112    	; 0x434a <_ZN6Matrix17usart_Send_matrixEv+0x2e>
		{		
			print_double(this->mat[i][j]);
			USART_Send_string("  ");			
		}
		USART_Send_string(")");
    43ba:	88 e5       	ldi	r24, 0x58	; 88
    43bc:	91 e0       	ldi	r25, 0x01	; 1
    43be:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		USART_Send_string("\n");
    43c2:	8f e4       	ldi	r24, 0x4F	; 79
    43c4:	91 e0       	ldi	r25, 0x01	; 1
    43c6:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
{
	int i,j;
	
	USART_Send_string("\n"); 
		
	for (i=0; i<this->row; i++)
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
    43cc:	9a 81       	ldd	r25, Y+2	; 0x02
    43ce:	01 96       	adiw	r24, 0x01	; 1
    43d0:	9a 83       	std	Y+2, r25	; 0x02
    43d2:	89 83       	std	Y+1, r24	; 0x01
    43d4:	8d 81       	ldd	r24, Y+5	; 0x05
    43d6:	9e 81       	ldd	r25, Y+6	; 0x06
    43d8:	fc 01       	movw	r30, r24
    43da:	20 81       	ld	r18, Z
    43dc:	31 81       	ldd	r19, Z+1	; 0x01
    43de:	41 e0       	ldi	r20, 0x01	; 1
    43e0:	89 81       	ldd	r24, Y+1	; 0x01
    43e2:	9a 81       	ldd	r25, Y+2	; 0x02
    43e4:	82 17       	cp	r24, r18
    43e6:	93 07       	cpc	r25, r19
    43e8:	0c f0       	brlt	.+2      	; 0x43ec <_ZN6Matrix17usart_Send_matrixEv+0xd0>
    43ea:	40 e0       	ldi	r20, 0x00	; 0
    43ec:	44 23       	and	r20, r20
    43ee:	09 f0       	breq	.+2      	; 0x43f2 <_ZN6Matrix17usart_Send_matrixEv+0xd6>
    43f0:	a5 cf       	rjmp	.-182    	; 0x433c <_ZN6Matrix17usart_Send_matrixEv+0x20>
			USART_Send_string("  ");			
		}
		USART_Send_string(")");
		USART_Send_string("\n");
	}
    43f2:	26 96       	adiw	r28, 0x06	; 6
    43f4:	0f b6       	in	r0, 0x3f	; 63
    43f6:	f8 94       	cli
    43f8:	de bf       	out	0x3e, r29	; 62
    43fa:	0f be       	out	0x3f, r0	; 63
    43fc:	cd bf       	out	0x3d, r28	; 61
    43fe:	cf 91       	pop	r28
    4400:	df 91       	pop	r29
    4402:	08 95       	ret

00004404 <_Z14compass_configv>:
vector m_min = {-492, -503, -549};
vector m_max = {579, 494, 322};


void compass_config(void)
{
    4404:	df 93       	push	r29
    4406:	cf 93       	push	r28
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
	
//CPU Configuration - I2C Configuration
	
 	DDRC = 0;								// all inputs
    440c:	87 e2       	ldi	r24, 0x27	; 39
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	fc 01       	movw	r30, r24
    4412:	10 82       	st	Z, r1
	PORTC = (1 << PORTC4) | (1 << PORTC5);	// enable pull-ups on SDA and SCL, respectively
    4414:	88 e2       	ldi	r24, 0x28	; 40
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	20 e3       	ldi	r18, 0x30	; 48
    441a:	fc 01       	movw	r30, r24
    441c:	20 83       	st	Z, r18

	//Prescalar value. TWSR=0 => Prescalar =1
	TWSR = 0;								
    441e:	89 eb       	ldi	r24, 0xB9	; 185
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	fc 01       	movw	r30, r24
    4424:	10 82       	st	Z, r1
	
	// For the Atmega328p, TWBR = ((CPUfreq/SCLfreq) -16)/(2.PRESCALARvalue)
	//Default Prescalar =1
	
	TWBR = 12;								// produces an SCL frequency of 400 kHz with a 16 MHz CPU clock speed
    4426:	88 eb       	ldi	r24, 0xB8	; 184
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	2c e0       	ldi	r18, 0x0C	; 12
    442c:	fc 01       	movw	r30, r24
    442e:	20 83       	st	Z, r18

//Compass configuration

	//enable accelerometer
	i2c_start(); 
    4430:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0x30); // write acc
    4434:	80 e3       	ldi	r24, 0x30	; 48
    4436:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0x20); // CTRL_REG1_A
    443a:	80 e2       	ldi	r24, 0x20	; 32
    443c:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0x27); // normal power mode, 50 Hz data rate, all axes enabled
    4440:	87 e2       	ldi	r24, 0x27	; 39
    4442:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_stop();
    4446:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z8i2c_stopv>
	
	// Configures scale
	i2c_start(); 
    444a:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0x30); // write acc
    444e:	80 e3       	ldi	r24, 0x30	; 48
    4450:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0x23); // CTRL_REG4_A
    4454:	83 e2       	ldi	r24, 0x23	; 35
    4456:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	//Next value is 0x00 for +-2g, 0x10 for +-4g, 0x30 for +-8g
	i2c_write_byte(0x00); 
    445a:	80 e0       	ldi	r24, 0x00	; 0
    445c:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_stop();
    4460:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z8i2c_stopv>

	//enable magnetometer
	i2c_start(); 
    4464:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0x3C); // write mag
    4468:	8c e3       	ldi	r24, 0x3C	; 60
    446a:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0x02); // MR_REG_M
    446e:	82 e0       	ldi	r24, 0x02	; 2
    4470:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0x00); // continuous conversion mode
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_stop();
    447a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z8i2c_stopv>
}
    447e:	cf 91       	pop	r28
    4480:	df 91       	pop	r29
    4482:	08 95       	ret

00004484 <_Z17compass_read_dataP6vectorS0_>:



// Returns a set of acceleration and raw magnetic readings from the compass.
void compass_read_data(vector *a, vector *m)
{
    4484:	df 93       	push	r29
    4486:	cf 93       	push	r28
    4488:	cd b7       	in	r28, 0x3d	; 61
    448a:	de b7       	in	r29, 0x3e	; 62
    448c:	60 97       	sbiw	r28, 0x10	; 16
    448e:	0f b6       	in	r0, 0x3f	; 63
    4490:	f8 94       	cli
    4492:	de bf       	out	0x3e, r29	; 62
    4494:	0f be       	out	0x3f, r0	; 63
    4496:	cd bf       	out	0x3d, r28	; 61
    4498:	9e 87       	std	Y+14, r25	; 0x0e
    449a:	8d 87       	std	Y+13, r24	; 0x0d
    449c:	78 8b       	std	Y+16, r23	; 0x10
    449e:	6f 87       	std	Y+15, r22	; 0x0f
	// read accelerometer values
	i2c_start();
    44a0:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0x30); // write acc
    44a4:	80 e3       	ldi	r24, 0x30	; 48
    44a6:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0xa8); // OUT_X_L_A, MSB set to enable auto-increment
    44aa:	88 ea       	ldi	r24, 0xA8	; 168
    44ac:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_start();		  // repeated start
    44b0:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0x31); // read acc
    44b4:	81 e3       	ldi	r24, 0x31	; 49
    44b6:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	unsigned char axl = i2c_read_byte();
    44ba:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    44be:	89 83       	std	Y+1, r24	; 0x01
	unsigned char axh = i2c_read_byte();
    44c0:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    44c4:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char ayl = i2c_read_byte();
    44c6:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    44ca:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ayh = i2c_read_byte();
    44cc:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    44d0:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char azl = i2c_read_byte();
    44d2:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    44d6:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char azh = i2c_read_last_byte();
    44d8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z18i2c_read_last_bytev>
    44dc:	8e 83       	std	Y+6, r24	; 0x06
	i2c_stop();
    44de:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z8i2c_stopv>

	// read magnetometer values
	i2c_start(); 
    44e2:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0x3C); // write mag
    44e6:	8c e3       	ldi	r24, 0x3C	; 60
    44e8:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0x03); // OUTXH_M, MSB set to enable auto-increment
    44ec:	83 e0       	ldi	r24, 0x03	; 3
    44ee:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_start();		  // repeated start
    44f2:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0x3D); // read mag
    44f6:	8d e3       	ldi	r24, 0x3D	; 61
    44f8:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	unsigned char mxh = i2c_read_byte();
    44fc:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    4500:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char mxl = i2c_read_byte();
    4502:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    4506:	88 87       	std	Y+8, r24	; 0x08
	unsigned char myh = i2c_read_byte();
    4508:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    450c:	89 87       	std	Y+9, r24	; 0x09
	unsigned char myl = i2c_read_byte();
    450e:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    4512:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char mzh = i2c_read_byte();
    4514:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    4518:	8b 87       	std	Y+11, r24	; 0x0b
	unsigned char mzl = i2c_read_last_byte();
    451a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z18i2c_read_last_bytev>
    451e:	8c 87       	std	Y+12, r24	; 0x0c
	i2c_stop();
    4520:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z8i2c_stopv>

	a->x = axh << 8 | axl;
    4524:	8a 81       	ldd	r24, Y+2	; 0x02
    4526:	88 2f       	mov	r24, r24
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	38 2f       	mov	r19, r24
    452c:	22 27       	eor	r18, r18
    452e:	89 81       	ldd	r24, Y+1	; 0x01
    4530:	88 2f       	mov	r24, r24
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	82 2b       	or	r24, r18
    4536:	93 2b       	or	r25, r19
    4538:	aa 27       	eor	r26, r26
    453a:	97 fd       	sbrc	r25, 7
    453c:	a0 95       	com	r26
    453e:	ba 2f       	mov	r27, r26
    4540:	bc 01       	movw	r22, r24
    4542:	cd 01       	movw	r24, r26
    4544:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	2d 85       	ldd	r18, Y+13	; 0x0d
    454e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4550:	f9 01       	movw	r30, r18
    4552:	80 83       	st	Z, r24
    4554:	91 83       	std	Z+1, r25	; 0x01
    4556:	a2 83       	std	Z+2, r26	; 0x02
    4558:	b3 83       	std	Z+3, r27	; 0x03
	a->y = ayh << 8 | ayl;
    455a:	8c 81       	ldd	r24, Y+4	; 0x04
    455c:	88 2f       	mov	r24, r24
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	38 2f       	mov	r19, r24
    4562:	22 27       	eor	r18, r18
    4564:	8b 81       	ldd	r24, Y+3	; 0x03
    4566:	88 2f       	mov	r24, r24
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	82 2b       	or	r24, r18
    456c:	93 2b       	or	r25, r19
    456e:	aa 27       	eor	r26, r26
    4570:	97 fd       	sbrc	r25, 7
    4572:	a0 95       	com	r26
    4574:	ba 2f       	mov	r27, r26
    4576:	bc 01       	movw	r22, r24
    4578:	cd 01       	movw	r24, r26
    457a:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	2d 85       	ldd	r18, Y+13	; 0x0d
    4584:	3e 85       	ldd	r19, Y+14	; 0x0e
    4586:	f9 01       	movw	r30, r18
    4588:	84 83       	std	Z+4, r24	; 0x04
    458a:	95 83       	std	Z+5, r25	; 0x05
    458c:	a6 83       	std	Z+6, r26	; 0x06
    458e:	b7 83       	std	Z+7, r27	; 0x07
	a->z = azh << 8 | azl;
    4590:	8e 81       	ldd	r24, Y+6	; 0x06
    4592:	88 2f       	mov	r24, r24
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	38 2f       	mov	r19, r24
    4598:	22 27       	eor	r18, r18
    459a:	8d 81       	ldd	r24, Y+5	; 0x05
    459c:	88 2f       	mov	r24, r24
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	82 2b       	or	r24, r18
    45a2:	93 2b       	or	r25, r19
    45a4:	aa 27       	eor	r26, r26
    45a6:	97 fd       	sbrc	r25, 7
    45a8:	a0 95       	com	r26
    45aa:	ba 2f       	mov	r27, r26
    45ac:	bc 01       	movw	r22, r24
    45ae:	cd 01       	movw	r24, r26
    45b0:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
    45b4:	dc 01       	movw	r26, r24
    45b6:	cb 01       	movw	r24, r22
    45b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    45ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    45bc:	f9 01       	movw	r30, r18
    45be:	80 87       	std	Z+8, r24	; 0x08
    45c0:	91 87       	std	Z+9, r25	; 0x09
    45c2:	a2 87       	std	Z+10, r26	; 0x0a
    45c4:	b3 87       	std	Z+11, r27	; 0x0b
	m->x = mxh << 8 | mxl;
    45c6:	8f 81       	ldd	r24, Y+7	; 0x07
    45c8:	88 2f       	mov	r24, r24
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	38 2f       	mov	r19, r24
    45ce:	22 27       	eor	r18, r18
    45d0:	88 85       	ldd	r24, Y+8	; 0x08
    45d2:	88 2f       	mov	r24, r24
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	82 2b       	or	r24, r18
    45d8:	93 2b       	or	r25, r19
    45da:	aa 27       	eor	r26, r26
    45dc:	97 fd       	sbrc	r25, 7
    45de:	a0 95       	com	r26
    45e0:	ba 2f       	mov	r27, r26
    45e2:	bc 01       	movw	r22, r24
    45e4:	cd 01       	movw	r24, r26
    45e6:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
    45ea:	dc 01       	movw	r26, r24
    45ec:	cb 01       	movw	r24, r22
    45ee:	2f 85       	ldd	r18, Y+15	; 0x0f
    45f0:	38 89       	ldd	r19, Y+16	; 0x10
    45f2:	f9 01       	movw	r30, r18
    45f4:	80 83       	st	Z, r24
    45f6:	91 83       	std	Z+1, r25	; 0x01
    45f8:	a2 83       	std	Z+2, r26	; 0x02
    45fa:	b3 83       	std	Z+3, r27	; 0x03
	m->y = myh << 8 | myl;
    45fc:	89 85       	ldd	r24, Y+9	; 0x09
    45fe:	88 2f       	mov	r24, r24
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	38 2f       	mov	r19, r24
    4604:	22 27       	eor	r18, r18
    4606:	8a 85       	ldd	r24, Y+10	; 0x0a
    4608:	88 2f       	mov	r24, r24
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	82 2b       	or	r24, r18
    460e:	93 2b       	or	r25, r19
    4610:	aa 27       	eor	r26, r26
    4612:	97 fd       	sbrc	r25, 7
    4614:	a0 95       	com	r26
    4616:	ba 2f       	mov	r27, r26
    4618:	bc 01       	movw	r22, r24
    461a:	cd 01       	movw	r24, r26
    461c:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
    4620:	dc 01       	movw	r26, r24
    4622:	cb 01       	movw	r24, r22
    4624:	2f 85       	ldd	r18, Y+15	; 0x0f
    4626:	38 89       	ldd	r19, Y+16	; 0x10
    4628:	f9 01       	movw	r30, r18
    462a:	84 83       	std	Z+4, r24	; 0x04
    462c:	95 83       	std	Z+5, r25	; 0x05
    462e:	a6 83       	std	Z+6, r26	; 0x06
    4630:	b7 83       	std	Z+7, r27	; 0x07
	m->z = mzh << 8 | mzl;
    4632:	8b 85       	ldd	r24, Y+11	; 0x0b
    4634:	88 2f       	mov	r24, r24
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	38 2f       	mov	r19, r24
    463a:	22 27       	eor	r18, r18
    463c:	8c 85       	ldd	r24, Y+12	; 0x0c
    463e:	88 2f       	mov	r24, r24
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	82 2b       	or	r24, r18
    4644:	93 2b       	or	r25, r19
    4646:	aa 27       	eor	r26, r26
    4648:	97 fd       	sbrc	r25, 7
    464a:	a0 95       	com	r26
    464c:	ba 2f       	mov	r27, r26
    464e:	bc 01       	movw	r22, r24
    4650:	cd 01       	movw	r24, r26
    4652:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	2f 85       	ldd	r18, Y+15	; 0x0f
    465c:	38 89       	ldd	r19, Y+16	; 0x10
    465e:	f9 01       	movw	r30, r18
    4660:	80 87       	std	Z+8, r24	; 0x08
    4662:	91 87       	std	Z+9, r25	; 0x09
    4664:	a2 87       	std	Z+10, r26	; 0x0a
    4666:	b3 87       	std	Z+11, r27	; 0x0b
}
    4668:	60 96       	adiw	r28, 0x10	; 16
    466a:	0f b6       	in	r0, 0x3f	; 63
    466c:	f8 94       	cli
    466e:	de bf       	out	0x3e, r29	; 62
    4670:	0f be       	out	0x3f, r0	; 63
    4672:	cd bf       	out	0x3d, r28	; 61
    4674:	cf 91       	pop	r28
    4676:	df 91       	pop	r29
    4678:	08 95       	ret

0000467a <_Z19compass_calibrationv>:



// This will print on the serial min and max values of the compass reading
void compass_calibration (void)
{
    467a:	1f 93       	push	r17
    467c:	df 93       	push	r29
    467e:	cf 93       	push	r28
    4680:	cd b7       	in	r28, 0x3d	; 61
    4682:	de b7       	in	r29, 0x3e	; 62
    4684:	e0 97       	sbiw	r28, 0x30	; 48
    4686:	0f b6       	in	r0, 0x3f	; 63
    4688:	f8 94       	cli
    468a:	de bf       	out	0x3e, r29	; 62
    468c:	0f be       	out	0x3f, r0	; 63
    468e:	cd bf       	out	0x3d, r28	; 61
	vector a={0,0,0};
    4690:	80 e0       	ldi	r24, 0x00	; 0
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	dc 01       	movw	r26, r24
    4696:	89 83       	std	Y+1, r24	; 0x01
    4698:	9a 83       	std	Y+2, r25	; 0x02
    469a:	ab 83       	std	Y+3, r26	; 0x03
    469c:	bc 83       	std	Y+4, r27	; 0x04
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	dc 01       	movw	r26, r24
    46a4:	8d 83       	std	Y+5, r24	; 0x05
    46a6:	9e 83       	std	Y+6, r25	; 0x06
    46a8:	af 83       	std	Y+7, r26	; 0x07
    46aa:	b8 87       	std	Y+8, r27	; 0x08
    46ac:	80 e0       	ldi	r24, 0x00	; 0
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	dc 01       	movw	r26, r24
    46b2:	89 87       	std	Y+9, r24	; 0x09
    46b4:	9a 87       	std	Y+10, r25	; 0x0a
    46b6:	ab 87       	std	Y+11, r26	; 0x0b
    46b8:	bc 87       	std	Y+12, r27	; 0x0c
	vector m={0,0,0};
    46ba:	80 e0       	ldi	r24, 0x00	; 0
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	dc 01       	movw	r26, r24
    46c0:	8d 87       	std	Y+13, r24	; 0x0d
    46c2:	9e 87       	std	Y+14, r25	; 0x0e
    46c4:	af 87       	std	Y+15, r26	; 0x0f
    46c6:	b8 8b       	std	Y+16, r27	; 0x10
    46c8:	80 e0       	ldi	r24, 0x00	; 0
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	dc 01       	movw	r26, r24
    46ce:	89 8b       	std	Y+17, r24	; 0x11
    46d0:	9a 8b       	std	Y+18, r25	; 0x12
    46d2:	ab 8b       	std	Y+19, r26	; 0x13
    46d4:	bc 8b       	std	Y+20, r27	; 0x14
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	dc 01       	movw	r26, r24
    46dc:	8d 8b       	std	Y+21, r24	; 0x15
    46de:	9e 8b       	std	Y+22, r25	; 0x16
    46e0:	af 8b       	std	Y+23, r26	; 0x17
    46e2:	b8 8f       	std	Y+24, r27	; 0x18
		
	vector mmin={0,0,0};
    46e4:	80 e0       	ldi	r24, 0x00	; 0
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	dc 01       	movw	r26, r24
    46ea:	89 8f       	std	Y+25, r24	; 0x19
    46ec:	9a 8f       	std	Y+26, r25	; 0x1a
    46ee:	ab 8f       	std	Y+27, r26	; 0x1b
    46f0:	bc 8f       	std	Y+28, r27	; 0x1c
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	dc 01       	movw	r26, r24
    46f8:	8d 8f       	std	Y+29, r24	; 0x1d
    46fa:	9e 8f       	std	Y+30, r25	; 0x1e
    46fc:	af 8f       	std	Y+31, r26	; 0x1f
    46fe:	b8 a3       	std	Y+32, r27	; 0x20
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	dc 01       	movw	r26, r24
    4706:	89 a3       	std	Y+33, r24	; 0x21
    4708:	9a a3       	std	Y+34, r25	; 0x22
    470a:	ab a3       	std	Y+35, r26	; 0x23
    470c:	bc a3       	std	Y+36, r27	; 0x24
	vector mmax={0,0,0};
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	dc 01       	movw	r26, r24
    4714:	8d a3       	std	Y+37, r24	; 0x25
    4716:	9e a3       	std	Y+38, r25	; 0x26
    4718:	af a3       	std	Y+39, r26	; 0x27
    471a:	b8 a7       	std	Y+40, r27	; 0x28
    471c:	80 e0       	ldi	r24, 0x00	; 0
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	dc 01       	movw	r26, r24
    4722:	89 a7       	std	Y+41, r24	; 0x29
    4724:	9a a7       	std	Y+42, r25	; 0x2a
    4726:	ab a7       	std	Y+43, r26	; 0x2b
    4728:	bc a7       	std	Y+44, r27	; 0x2c
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	dc 01       	movw	r26, r24
    4730:	8d a7       	std	Y+45, r24	; 0x2d
    4732:	9e a7       	std	Y+46, r25	; 0x2e
    4734:	af a7       	std	Y+47, r26	; 0x2f
    4736:	b8 ab       	std	Y+48, r27	; 0x30

		
	while(1)
	{
		
		compass_read_data(&a,&m);
    4738:	9e 01       	movw	r18, r28
    473a:	23 5f       	subi	r18, 0xF3	; 243
    473c:	3f 4f       	sbci	r19, 0xFF	; 255
    473e:	ce 01       	movw	r24, r28
    4740:	01 96       	adiw	r24, 0x01	; 1
    4742:	b9 01       	movw	r22, r18
    4744:	0e 94 42 22 	call	0x4484	; 0x4484 <_Z17compass_read_dataP6vectorS0_>
		
		
// Mmin handler		
		if(m.x  <  mmin.x)
    4748:	8d 85       	ldd	r24, Y+13	; 0x0d
    474a:	9e 85       	ldd	r25, Y+14	; 0x0e
    474c:	af 85       	ldd	r26, Y+15	; 0x0f
    474e:	b8 89       	ldd	r27, Y+16	; 0x10
    4750:	29 8d       	ldd	r18, Y+25	; 0x19
    4752:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4754:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4756:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4758:	11 e0       	ldi	r17, 0x01	; 1
    475a:	bc 01       	movw	r22, r24
    475c:	cd 01       	movw	r24, r26
    475e:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    4762:	88 23       	and	r24, r24
    4764:	0c f0       	brlt	.+2      	; 0x4768 <_Z19compass_calibrationv+0xee>
    4766:	10 e0       	ldi	r17, 0x00	; 0
    4768:	11 23       	and	r17, r17
    476a:	41 f0       	breq	.+16     	; 0x477c <_Z19compass_calibrationv+0x102>
		mmin.x  =  m.x;
    476c:	8d 85       	ldd	r24, Y+13	; 0x0d
    476e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4770:	af 85       	ldd	r26, Y+15	; 0x0f
    4772:	b8 89       	ldd	r27, Y+16	; 0x10
    4774:	89 8f       	std	Y+25, r24	; 0x19
    4776:	9a 8f       	std	Y+26, r25	; 0x1a
    4778:	ab 8f       	std	Y+27, r26	; 0x1b
    477a:	bc 8f       	std	Y+28, r27	; 0x1c
		
		if(m.y  <  mmin.y)
    477c:	89 89       	ldd	r24, Y+17	; 0x11
    477e:	9a 89       	ldd	r25, Y+18	; 0x12
    4780:	ab 89       	ldd	r26, Y+19	; 0x13
    4782:	bc 89       	ldd	r27, Y+20	; 0x14
    4784:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4786:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4788:	4f 8d       	ldd	r20, Y+31	; 0x1f
    478a:	58 a1       	ldd	r21, Y+32	; 0x20
    478c:	11 e0       	ldi	r17, 0x01	; 1
    478e:	bc 01       	movw	r22, r24
    4790:	cd 01       	movw	r24, r26
    4792:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    4796:	88 23       	and	r24, r24
    4798:	0c f0       	brlt	.+2      	; 0x479c <_Z19compass_calibrationv+0x122>
    479a:	10 e0       	ldi	r17, 0x00	; 0
    479c:	11 23       	and	r17, r17
    479e:	41 f0       	breq	.+16     	; 0x47b0 <_Z19compass_calibrationv+0x136>
		mmin.y  =  m.y;
    47a0:	89 89       	ldd	r24, Y+17	; 0x11
    47a2:	9a 89       	ldd	r25, Y+18	; 0x12
    47a4:	ab 89       	ldd	r26, Y+19	; 0x13
    47a6:	bc 89       	ldd	r27, Y+20	; 0x14
    47a8:	8d 8f       	std	Y+29, r24	; 0x1d
    47aa:	9e 8f       	std	Y+30, r25	; 0x1e
    47ac:	af 8f       	std	Y+31, r26	; 0x1f
    47ae:	b8 a3       	std	Y+32, r27	; 0x20
		
		if(m.z  <  mmin.z)
    47b0:	8d 89       	ldd	r24, Y+21	; 0x15
    47b2:	9e 89       	ldd	r25, Y+22	; 0x16
    47b4:	af 89       	ldd	r26, Y+23	; 0x17
    47b6:	b8 8d       	ldd	r27, Y+24	; 0x18
    47b8:	29 a1       	ldd	r18, Y+33	; 0x21
    47ba:	3a a1       	ldd	r19, Y+34	; 0x22
    47bc:	4b a1       	ldd	r20, Y+35	; 0x23
    47be:	5c a1       	ldd	r21, Y+36	; 0x24
    47c0:	11 e0       	ldi	r17, 0x01	; 1
    47c2:	bc 01       	movw	r22, r24
    47c4:	cd 01       	movw	r24, r26
    47c6:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    47ca:	88 23       	and	r24, r24
    47cc:	0c f0       	brlt	.+2      	; 0x47d0 <_Z19compass_calibrationv+0x156>
    47ce:	10 e0       	ldi	r17, 0x00	; 0
    47d0:	11 23       	and	r17, r17
    47d2:	41 f0       	breq	.+16     	; 0x47e4 <_Z19compass_calibrationv+0x16a>
		mmin.z  =  m.z;
    47d4:	8d 89       	ldd	r24, Y+21	; 0x15
    47d6:	9e 89       	ldd	r25, Y+22	; 0x16
    47d8:	af 89       	ldd	r26, Y+23	; 0x17
    47da:	b8 8d       	ldd	r27, Y+24	; 0x18
    47dc:	89 a3       	std	Y+33, r24	; 0x21
    47de:	9a a3       	std	Y+34, r25	; 0x22
    47e0:	ab a3       	std	Y+35, r26	; 0x23
    47e2:	bc a3       	std	Y+36, r27	; 0x24
		
// Mmax handler
		if(m.x  >  mmax.x)
    47e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e8:	af 85       	ldd	r26, Y+15	; 0x0f
    47ea:	b8 89       	ldd	r27, Y+16	; 0x10
    47ec:	2d a1       	ldd	r18, Y+37	; 0x25
    47ee:	3e a1       	ldd	r19, Y+38	; 0x26
    47f0:	4f a1       	ldd	r20, Y+39	; 0x27
    47f2:	58 a5       	ldd	r21, Y+40	; 0x28
    47f4:	11 e0       	ldi	r17, 0x01	; 1
    47f6:	bc 01       	movw	r22, r24
    47f8:	cd 01       	movw	r24, r26
    47fa:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    47fe:	18 16       	cp	r1, r24
    4800:	0c f0       	brlt	.+2      	; 0x4804 <_Z19compass_calibrationv+0x18a>
    4802:	10 e0       	ldi	r17, 0x00	; 0
    4804:	11 23       	and	r17, r17
    4806:	41 f0       	breq	.+16     	; 0x4818 <_Z19compass_calibrationv+0x19e>
		mmax.x  =  m.x;
    4808:	8d 85       	ldd	r24, Y+13	; 0x0d
    480a:	9e 85       	ldd	r25, Y+14	; 0x0e
    480c:	af 85       	ldd	r26, Y+15	; 0x0f
    480e:	b8 89       	ldd	r27, Y+16	; 0x10
    4810:	8d a3       	std	Y+37, r24	; 0x25
    4812:	9e a3       	std	Y+38, r25	; 0x26
    4814:	af a3       	std	Y+39, r26	; 0x27
    4816:	b8 a7       	std	Y+40, r27	; 0x28
		
		if(m.y  >  mmax.y)
    4818:	89 89       	ldd	r24, Y+17	; 0x11
    481a:	9a 89       	ldd	r25, Y+18	; 0x12
    481c:	ab 89       	ldd	r26, Y+19	; 0x13
    481e:	bc 89       	ldd	r27, Y+20	; 0x14
    4820:	29 a5       	ldd	r18, Y+41	; 0x29
    4822:	3a a5       	ldd	r19, Y+42	; 0x2a
    4824:	4b a5       	ldd	r20, Y+43	; 0x2b
    4826:	5c a5       	ldd	r21, Y+44	; 0x2c
    4828:	11 e0       	ldi	r17, 0x01	; 1
    482a:	bc 01       	movw	r22, r24
    482c:	cd 01       	movw	r24, r26
    482e:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    4832:	18 16       	cp	r1, r24
    4834:	0c f0       	brlt	.+2      	; 0x4838 <_Z19compass_calibrationv+0x1be>
    4836:	10 e0       	ldi	r17, 0x00	; 0
    4838:	11 23       	and	r17, r17
    483a:	41 f0       	breq	.+16     	; 0x484c <_Z19compass_calibrationv+0x1d2>
		mmax.y  =  m.y;
    483c:	89 89       	ldd	r24, Y+17	; 0x11
    483e:	9a 89       	ldd	r25, Y+18	; 0x12
    4840:	ab 89       	ldd	r26, Y+19	; 0x13
    4842:	bc 89       	ldd	r27, Y+20	; 0x14
    4844:	89 a7       	std	Y+41, r24	; 0x29
    4846:	9a a7       	std	Y+42, r25	; 0x2a
    4848:	ab a7       	std	Y+43, r26	; 0x2b
    484a:	bc a7       	std	Y+44, r27	; 0x2c
		
		if(m.z  >  mmax.z)
    484c:	8d 89       	ldd	r24, Y+21	; 0x15
    484e:	9e 89       	ldd	r25, Y+22	; 0x16
    4850:	af 89       	ldd	r26, Y+23	; 0x17
    4852:	b8 8d       	ldd	r27, Y+24	; 0x18
    4854:	2d a5       	ldd	r18, Y+45	; 0x2d
    4856:	3e a5       	ldd	r19, Y+46	; 0x2e
    4858:	4f a5       	ldd	r20, Y+47	; 0x2f
    485a:	58 a9       	ldd	r21, Y+48	; 0x30
    485c:	11 e0       	ldi	r17, 0x01	; 1
    485e:	bc 01       	movw	r22, r24
    4860:	cd 01       	movw	r24, r26
    4862:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    4866:	18 16       	cp	r1, r24
    4868:	0c f0       	brlt	.+2      	; 0x486c <_Z19compass_calibrationv+0x1f2>
    486a:	10 e0       	ldi	r17, 0x00	; 0
    486c:	11 23       	and	r17, r17
    486e:	41 f0       	breq	.+16     	; 0x4880 <_Z19compass_calibrationv+0x206>
		mmax.z  =  m.z;	
    4870:	8d 89       	ldd	r24, Y+21	; 0x15
    4872:	9e 89       	ldd	r25, Y+22	; 0x16
    4874:	af 89       	ldd	r26, Y+23	; 0x17
    4876:	b8 8d       	ldd	r27, Y+24	; 0x18
    4878:	8d a7       	std	Y+45, r24	; 0x2d
    487a:	9e a7       	std	Y+46, r25	; 0x2e
    487c:	af a7       	std	Y+47, r26	; 0x2f
    487e:	b8 ab       	std	Y+48, r27	; 0x30
		
		//Send Mmin values
		USART_Send_string(" MMIN ");  
    4880:	82 e7       	ldi	r24, 0x72	; 114
    4882:	91 e0       	ldi	r25, 0x01	; 1
    4884:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		USART_Send_string("X: ");
    4888:	89 e7       	ldi	r24, 0x79	; 121
    488a:	91 e0       	ldi	r25, 0x01	; 1
    488c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		USART_Send_int((int)mmin.x);
    4890:	89 8d       	ldd	r24, Y+25	; 0x19
    4892:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4894:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4896:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4898:	bc 01       	movw	r22, r24
    489a:	cd 01       	movw	r24, r26
    489c:	0e 94 10 2c 	call	0x5820	; 0x5820 <__fixsfsi>
    48a0:	dc 01       	movw	r26, r24
    48a2:	cb 01       	movw	r24, r22
    48a4:	0e 94 75 27 	call	0x4eea	; 0x4eea <_Z14USART_Send_inti>
		USART_Send_string(" Y: ");
    48a8:	8d e7       	ldi	r24, 0x7D	; 125
    48aa:	91 e0       	ldi	r25, 0x01	; 1
    48ac:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		USART_Send_int((int)mmin.y);
    48b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48b4:	af 8d       	ldd	r26, Y+31	; 0x1f
    48b6:	b8 a1       	ldd	r27, Y+32	; 0x20
    48b8:	bc 01       	movw	r22, r24
    48ba:	cd 01       	movw	r24, r26
    48bc:	0e 94 10 2c 	call	0x5820	; 0x5820 <__fixsfsi>
    48c0:	dc 01       	movw	r26, r24
    48c2:	cb 01       	movw	r24, r22
    48c4:	0e 94 75 27 	call	0x4eea	; 0x4eea <_Z14USART_Send_inti>
		USART_Send_string(" Z: ");
    48c8:	82 e8       	ldi	r24, 0x82	; 130
    48ca:	91 e0       	ldi	r25, 0x01	; 1
    48cc:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		USART_Send_int((int)mmin.z);
    48d0:	89 a1       	ldd	r24, Y+33	; 0x21
    48d2:	9a a1       	ldd	r25, Y+34	; 0x22
    48d4:	ab a1       	ldd	r26, Y+35	; 0x23
    48d6:	bc a1       	ldd	r27, Y+36	; 0x24
    48d8:	bc 01       	movw	r22, r24
    48da:	cd 01       	movw	r24, r26
    48dc:	0e 94 10 2c 	call	0x5820	; 0x5820 <__fixsfsi>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	0e 94 75 27 	call	0x4eea	; 0x4eea <_Z14USART_Send_inti>
		USART_Send_string("    ");
    48e8:	87 e8       	ldi	r24, 0x87	; 135
    48ea:	91 e0       	ldi	r25, 0x01	; 1
    48ec:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		//Send Mmax values
		USART_Send_string(" MMAX ");  
    48f0:	8c e8       	ldi	r24, 0x8C	; 140
    48f2:	91 e0       	ldi	r25, 0x01	; 1
    48f4:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		USART_Send_string("X: ");
    48f8:	89 e7       	ldi	r24, 0x79	; 121
    48fa:	91 e0       	ldi	r25, 0x01	; 1
    48fc:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		USART_Send_int((int)mmax.x);
    4900:	8d a1       	ldd	r24, Y+37	; 0x25
    4902:	9e a1       	ldd	r25, Y+38	; 0x26
    4904:	af a1       	ldd	r26, Y+39	; 0x27
    4906:	b8 a5       	ldd	r27, Y+40	; 0x28
    4908:	bc 01       	movw	r22, r24
    490a:	cd 01       	movw	r24, r26
    490c:	0e 94 10 2c 	call	0x5820	; 0x5820 <__fixsfsi>
    4910:	dc 01       	movw	r26, r24
    4912:	cb 01       	movw	r24, r22
    4914:	0e 94 75 27 	call	0x4eea	; 0x4eea <_Z14USART_Send_inti>
		USART_Send_string(" Y: ");
    4918:	8d e7       	ldi	r24, 0x7D	; 125
    491a:	91 e0       	ldi	r25, 0x01	; 1
    491c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		USART_Send_int((int)mmax.y);
    4920:	89 a5       	ldd	r24, Y+41	; 0x29
    4922:	9a a5       	ldd	r25, Y+42	; 0x2a
    4924:	ab a5       	ldd	r26, Y+43	; 0x2b
    4926:	bc a5       	ldd	r27, Y+44	; 0x2c
    4928:	bc 01       	movw	r22, r24
    492a:	cd 01       	movw	r24, r26
    492c:	0e 94 10 2c 	call	0x5820	; 0x5820 <__fixsfsi>
    4930:	dc 01       	movw	r26, r24
    4932:	cb 01       	movw	r24, r22
    4934:	0e 94 75 27 	call	0x4eea	; 0x4eea <_Z14USART_Send_inti>
		USART_Send_string(" Z: ");
    4938:	82 e8       	ldi	r24, 0x82	; 130
    493a:	91 e0       	ldi	r25, 0x01	; 1
    493c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		USART_Send_int((int)mmax.z);
    4940:	8d a5       	ldd	r24, Y+45	; 0x2d
    4942:	9e a5       	ldd	r25, Y+46	; 0x2e
    4944:	af a5       	ldd	r26, Y+47	; 0x2f
    4946:	b8 a9       	ldd	r27, Y+48	; 0x30
    4948:	bc 01       	movw	r22, r24
    494a:	cd 01       	movw	r24, r26
    494c:	0e 94 10 2c 	call	0x5820	; 0x5820 <__fixsfsi>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	0e 94 75 27 	call	0x4eea	; 0x4eea <_Z14USART_Send_inti>
		USART_Send_string(" \n");
    4958:	83 e9       	ldi	r24, 0x93	; 147
    495a:	91 e0       	ldi	r25, 0x01	; 1
    495c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
		
	vector mmin={0,0,0};
	vector mmax={0,0,0};

		
	while(1)
    4960:	eb ce       	rjmp	.-554    	; 0x4738 <_Z19compass_calibrationv+0xbe>

00004962 <_Z11get_headingP6vectorS0_S0_>:

}

// Returns a heading (in degrees) given an acceleration vector a due to gravity, a magnetic vector m, and a facing vector p.
float get_heading(vector *a, vector *m, vector *p)
{
    4962:	ef 92       	push	r14
    4964:	ff 92       	push	r15
    4966:	0f 93       	push	r16
    4968:	1f 93       	push	r17
    496a:	df 93       	push	r29
    496c:	cf 93       	push	r28
    496e:	cd b7       	in	r28, 0x3d	; 61
    4970:	de b7       	in	r29, 0x3e	; 62
    4972:	a2 97       	sbiw	r28, 0x22	; 34
    4974:	0f b6       	in	r0, 0x3f	; 63
    4976:	f8 94       	cli
    4978:	de bf       	out	0x3e, r29	; 62
    497a:	0f be       	out	0x3f, r0	; 63
    497c:	cd bf       	out	0x3d, r28	; 61
    497e:	9e 8f       	std	Y+30, r25	; 0x1e
    4980:	8d 8f       	std	Y+29, r24	; 0x1d
    4982:	78 a3       	std	Y+32, r23	; 0x20
    4984:	6f 8f       	std	Y+31, r22	; 0x1f
    4986:	5a a3       	std	Y+34, r21	; 0x22
    4988:	49 a3       	std	Y+33, r20	; 0x21
	
	// shift and scale
	m->x = (m->x - m_min.x) / (m_max.x - m_min.x) * 2 - 1.0;
    498a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    498c:	98 a1       	ldd	r25, Y+32	; 0x20
    498e:	fc 01       	movw	r30, r24
    4990:	80 81       	ld	r24, Z
    4992:	91 81       	ldd	r25, Z+1	; 0x01
    4994:	a2 81       	ldd	r26, Z+2	; 0x02
    4996:	b3 81       	ldd	r27, Z+3	; 0x03
    4998:	20 91 5a 01 	lds	r18, 0x015A
    499c:	30 91 5b 01 	lds	r19, 0x015B
    49a0:	40 91 5c 01 	lds	r20, 0x015C
    49a4:	50 91 5d 01 	lds	r21, 0x015D
    49a8:	bc 01       	movw	r22, r24
    49aa:	cd 01       	movw	r24, r26
    49ac:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    49b0:	dc 01       	movw	r26, r24
    49b2:	cb 01       	movw	r24, r22
    49b4:	7c 01       	movw	r14, r24
    49b6:	8d 01       	movw	r16, r26
    49b8:	80 91 66 01 	lds	r24, 0x0166
    49bc:	90 91 67 01 	lds	r25, 0x0167
    49c0:	a0 91 68 01 	lds	r26, 0x0168
    49c4:	b0 91 69 01 	lds	r27, 0x0169
    49c8:	20 91 5a 01 	lds	r18, 0x015A
    49cc:	30 91 5b 01 	lds	r19, 0x015B
    49d0:	40 91 5c 01 	lds	r20, 0x015C
    49d4:	50 91 5d 01 	lds	r21, 0x015D
    49d8:	bc 01       	movw	r22, r24
    49da:	cd 01       	movw	r24, r26
    49dc:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    49e0:	dc 01       	movw	r26, r24
    49e2:	cb 01       	movw	r24, r22
    49e4:	9c 01       	movw	r18, r24
    49e6:	ad 01       	movw	r20, r26
    49e8:	c8 01       	movw	r24, r16
    49ea:	b7 01       	movw	r22, r14
    49ec:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	9c 01       	movw	r18, r24
    49f6:	ad 01       	movw	r20, r26
    49f8:	ca 01       	movw	r24, r20
    49fa:	b9 01       	movw	r22, r18
    49fc:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    4a00:	dc 01       	movw	r26, r24
    4a02:	cb 01       	movw	r24, r22
    4a04:	bc 01       	movw	r22, r24
    4a06:	cd 01       	movw	r24, r26
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	40 e8       	ldi	r20, 0x80	; 128
    4a0e:	5f e3       	ldi	r21, 0x3F	; 63
    4a10:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4a1a:	38 a1       	ldd	r19, Y+32	; 0x20
    4a1c:	f9 01       	movw	r30, r18
    4a1e:	80 83       	st	Z, r24
    4a20:	91 83       	std	Z+1, r25	; 0x01
    4a22:	a2 83       	std	Z+2, r26	; 0x02
    4a24:	b3 83       	std	Z+3, r27	; 0x03
	m->y = (m->y - m_min.y) / (m_max.y - m_min.y) * 2 - 1.0;
    4a26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a28:	98 a1       	ldd	r25, Y+32	; 0x20
    4a2a:	fc 01       	movw	r30, r24
    4a2c:	84 81       	ldd	r24, Z+4	; 0x04
    4a2e:	95 81       	ldd	r25, Z+5	; 0x05
    4a30:	a6 81       	ldd	r26, Z+6	; 0x06
    4a32:	b7 81       	ldd	r27, Z+7	; 0x07
    4a34:	20 91 5e 01 	lds	r18, 0x015E
    4a38:	30 91 5f 01 	lds	r19, 0x015F
    4a3c:	40 91 60 01 	lds	r20, 0x0160
    4a40:	50 91 61 01 	lds	r21, 0x0161
    4a44:	bc 01       	movw	r22, r24
    4a46:	cd 01       	movw	r24, r26
    4a48:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    4a4c:	dc 01       	movw	r26, r24
    4a4e:	cb 01       	movw	r24, r22
    4a50:	7c 01       	movw	r14, r24
    4a52:	8d 01       	movw	r16, r26
    4a54:	80 91 6a 01 	lds	r24, 0x016A
    4a58:	90 91 6b 01 	lds	r25, 0x016B
    4a5c:	a0 91 6c 01 	lds	r26, 0x016C
    4a60:	b0 91 6d 01 	lds	r27, 0x016D
    4a64:	20 91 5e 01 	lds	r18, 0x015E
    4a68:	30 91 5f 01 	lds	r19, 0x015F
    4a6c:	40 91 60 01 	lds	r20, 0x0160
    4a70:	50 91 61 01 	lds	r21, 0x0161
    4a74:	bc 01       	movw	r22, r24
    4a76:	cd 01       	movw	r24, r26
    4a78:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	9c 01       	movw	r18, r24
    4a82:	ad 01       	movw	r20, r26
    4a84:	c8 01       	movw	r24, r16
    4a86:	b7 01       	movw	r22, r14
    4a88:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    4a8c:	dc 01       	movw	r26, r24
    4a8e:	cb 01       	movw	r24, r22
    4a90:	9c 01       	movw	r18, r24
    4a92:	ad 01       	movw	r20, r26
    4a94:	ca 01       	movw	r24, r20
    4a96:	b9 01       	movw	r22, r18
    4a98:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    4a9c:	dc 01       	movw	r26, r24
    4a9e:	cb 01       	movw	r24, r22
    4aa0:	bc 01       	movw	r22, r24
    4aa2:	cd 01       	movw	r24, r26
    4aa4:	20 e0       	ldi	r18, 0x00	; 0
    4aa6:	30 e0       	ldi	r19, 0x00	; 0
    4aa8:	40 e8       	ldi	r20, 0x80	; 128
    4aaa:	5f e3       	ldi	r21, 0x3F	; 63
    4aac:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    4ab0:	dc 01       	movw	r26, r24
    4ab2:	cb 01       	movw	r24, r22
    4ab4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4ab6:	38 a1       	ldd	r19, Y+32	; 0x20
    4ab8:	f9 01       	movw	r30, r18
    4aba:	84 83       	std	Z+4, r24	; 0x04
    4abc:	95 83       	std	Z+5, r25	; 0x05
    4abe:	a6 83       	std	Z+6, r26	; 0x06
    4ac0:	b7 83       	std	Z+7, r27	; 0x07
	m->z = (m->z - m_min.z) / (m_max.z - m_min.z) * 2 - 1.0;
    4ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    4ac6:	fc 01       	movw	r30, r24
    4ac8:	80 85       	ldd	r24, Z+8	; 0x08
    4aca:	91 85       	ldd	r25, Z+9	; 0x09
    4acc:	a2 85       	ldd	r26, Z+10	; 0x0a
    4ace:	b3 85       	ldd	r27, Z+11	; 0x0b
    4ad0:	20 91 62 01 	lds	r18, 0x0162
    4ad4:	30 91 63 01 	lds	r19, 0x0163
    4ad8:	40 91 64 01 	lds	r20, 0x0164
    4adc:	50 91 65 01 	lds	r21, 0x0165
    4ae0:	bc 01       	movw	r22, r24
    4ae2:	cd 01       	movw	r24, r26
    4ae4:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    4ae8:	dc 01       	movw	r26, r24
    4aea:	cb 01       	movw	r24, r22
    4aec:	7c 01       	movw	r14, r24
    4aee:	8d 01       	movw	r16, r26
    4af0:	80 91 6e 01 	lds	r24, 0x016E
    4af4:	90 91 6f 01 	lds	r25, 0x016F
    4af8:	a0 91 70 01 	lds	r26, 0x0170
    4afc:	b0 91 71 01 	lds	r27, 0x0171
    4b00:	20 91 62 01 	lds	r18, 0x0162
    4b04:	30 91 63 01 	lds	r19, 0x0163
    4b08:	40 91 64 01 	lds	r20, 0x0164
    4b0c:	50 91 65 01 	lds	r21, 0x0165
    4b10:	bc 01       	movw	r22, r24
    4b12:	cd 01       	movw	r24, r26
    4b14:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    4b18:	dc 01       	movw	r26, r24
    4b1a:	cb 01       	movw	r24, r22
    4b1c:	9c 01       	movw	r18, r24
    4b1e:	ad 01       	movw	r20, r26
    4b20:	c8 01       	movw	r24, r16
    4b22:	b7 01       	movw	r22, r14
    4b24:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    4b28:	dc 01       	movw	r26, r24
    4b2a:	cb 01       	movw	r24, r22
    4b2c:	9c 01       	movw	r18, r24
    4b2e:	ad 01       	movw	r20, r26
    4b30:	ca 01       	movw	r24, r20
    4b32:	b9 01       	movw	r22, r18
    4b34:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    4b38:	dc 01       	movw	r26, r24
    4b3a:	cb 01       	movw	r24, r22
    4b3c:	bc 01       	movw	r22, r24
    4b3e:	cd 01       	movw	r24, r26
    4b40:	20 e0       	ldi	r18, 0x00	; 0
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	40 e8       	ldi	r20, 0x80	; 128
    4b46:	5f e3       	ldi	r21, 0x3F	; 63
    4b48:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    4b4c:	dc 01       	movw	r26, r24
    4b4e:	cb 01       	movw	r24, r22
    4b50:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4b52:	38 a1       	ldd	r19, Y+32	; 0x20
    4b54:	f9 01       	movw	r30, r18
    4b56:	80 87       	std	Z+8, r24	; 0x08
    4b58:	91 87       	std	Z+9, r25	; 0x09
    4b5a:	a2 87       	std	Z+10, r26	; 0x0a
    4b5c:	b3 87       	std	Z+11, r27	; 0x0b
	
	vector E;
	vector N;

	// cross magnetic vector (magnetic north + inclination) with "down" (acceleration vector) to produce "east"
	vector_cross(m, a, &E);
    4b5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b60:	98 a1       	ldd	r25, Y+32	; 0x20
    4b62:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4b64:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4b66:	9e 01       	movw	r18, r28
    4b68:	2b 5f       	subi	r18, 0xFB	; 251
    4b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b6c:	ba 01       	movw	r22, r20
    4b6e:	a9 01       	movw	r20, r18
    4b70:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_Z12vector_crossPK6vectorS1_PS_>
	vector_normalize(&E);
    4b74:	ce 01       	movw	r24, r28
    4b76:	05 96       	adiw	r24, 0x05	; 5
    4b78:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <_Z16vector_normalizeP6vector>

	// cross "down" with "east" to produce "north" (parallel to the ground)
	vector_cross(a, &E, &N);
    4b7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b80:	ae 01       	movw	r20, r28
    4b82:	4b 5f       	subi	r20, 0xFB	; 251
    4b84:	5f 4f       	sbci	r21, 0xFF	; 255
    4b86:	9e 01       	movw	r18, r28
    4b88:	2f 5e       	subi	r18, 0xEF	; 239
    4b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b8c:	ba 01       	movw	r22, r20
    4b8e:	a9 01       	movw	r20, r18
    4b90:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_Z12vector_crossPK6vectorS1_PS_>
	vector_normalize(&N);
    4b94:	ce 01       	movw	r24, r28
    4b96:	41 96       	adiw	r24, 0x11	; 17
    4b98:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <_Z16vector_normalizeP6vector>

	// compute heading
	float heading = round(atan2(vector_dot(&E, p), vector_dot(&N, p)) * 180 / M_PI);
    4b9c:	ce 01       	movw	r24, r28
    4b9e:	05 96       	adiw	r24, 0x05	; 5
    4ba0:	29 a1       	ldd	r18, Y+33	; 0x21
    4ba2:	3a a1       	ldd	r19, Y+34	; 0x22
    4ba4:	b9 01       	movw	r22, r18
    4ba6:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <_Z10vector_dotPK6vectorS1_>
    4baa:	7b 01       	movw	r14, r22
    4bac:	8c 01       	movw	r16, r24
    4bae:	ce 01       	movw	r24, r28
    4bb0:	41 96       	adiw	r24, 0x11	; 17
    4bb2:	29 a1       	ldd	r18, Y+33	; 0x21
    4bb4:	3a a1       	ldd	r19, Y+34	; 0x22
    4bb6:	b9 01       	movw	r22, r18
    4bb8:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <_Z10vector_dotPK6vectorS1_>
    4bbc:	9b 01       	movw	r18, r22
    4bbe:	ac 01       	movw	r20, r24
    4bc0:	c8 01       	movw	r24, r16
    4bc2:	b7 01       	movw	r22, r14
    4bc4:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <atan2>
    4bc8:	dc 01       	movw	r26, r24
    4bca:	cb 01       	movw	r24, r22
    4bcc:	bc 01       	movw	r22, r24
    4bce:	cd 01       	movw	r24, r26
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	44 e3       	ldi	r20, 0x34	; 52
    4bd6:	53 e4       	ldi	r21, 0x43	; 67
    4bd8:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	bc 01       	movw	r22, r24
    4be2:	cd 01       	movw	r24, r26
    4be4:	2b ed       	ldi	r18, 0xDB	; 219
    4be6:	3f e0       	ldi	r19, 0x0F	; 15
    4be8:	49 e4       	ldi	r20, 0x49	; 73
    4bea:	50 e4       	ldi	r21, 0x40	; 64
    4bec:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	cb 01       	movw	r24, r22
    4bf4:	bc 01       	movw	r22, r24
    4bf6:	cd 01       	movw	r24, r26
    4bf8:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <round>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	89 83       	std	Y+1, r24	; 0x01
    4c02:	9a 83       	std	Y+2, r25	; 0x02
    4c04:	ab 83       	std	Y+3, r26	; 0x03
    4c06:	bc 83       	std	Y+4, r27	; 0x04
	
	if (heading > 180)
    4c08:	11 e0       	ldi	r17, 0x01	; 1
    4c0a:	69 81       	ldd	r22, Y+1	; 0x01
    4c0c:	7a 81       	ldd	r23, Y+2	; 0x02
    4c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c10:	9c 81       	ldd	r25, Y+4	; 0x04
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	44 e3       	ldi	r20, 0x34	; 52
    4c18:	53 e4       	ldi	r21, 0x43	; 67
    4c1a:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    4c1e:	18 16       	cp	r1, r24
    4c20:	0c f0       	brlt	.+2      	; 0x4c24 <_Z11get_headingP6vectorS0_S0_+0x2c2>
    4c22:	10 e0       	ldi	r17, 0x00	; 0
    4c24:	11 23       	and	r17, r17
    4c26:	81 f0       	breq	.+32     	; 0x4c48 <_Z11get_headingP6vectorS0_S0_+0x2e6>
		heading -= 360;
    4c28:	69 81       	ldd	r22, Y+1	; 0x01
    4c2a:	7a 81       	ldd	r23, Y+2	; 0x02
    4c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	44 eb       	ldi	r20, 0xB4	; 180
    4c36:	53 e4       	ldi	r21, 0x43	; 67
    4c38:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	cb 01       	movw	r24, r22
    4c40:	89 83       	std	Y+1, r24	; 0x01
    4c42:	9a 83       	std	Y+2, r25	; 0x02
    4c44:	ab 83       	std	Y+3, r26	; 0x03
    4c46:	bc 83       	std	Y+4, r27	; 0x04
	if (heading < -180)
    4c48:	11 e0       	ldi	r17, 0x01	; 1
    4c4a:	69 81       	ldd	r22, Y+1	; 0x01
    4c4c:	7a 81       	ldd	r23, Y+2	; 0x02
    4c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c50:	9c 81       	ldd	r25, Y+4	; 0x04
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	44 e3       	ldi	r20, 0x34	; 52
    4c58:	53 ec       	ldi	r21, 0xC3	; 195
    4c5a:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    4c5e:	88 23       	and	r24, r24
    4c60:	0c f0       	brlt	.+2      	; 0x4c64 <_Z11get_headingP6vectorS0_S0_+0x302>
    4c62:	10 e0       	ldi	r17, 0x00	; 0
    4c64:	11 23       	and	r17, r17
    4c66:	81 f0       	breq	.+32     	; 0x4c88 <_Z11get_headingP6vectorS0_S0_+0x326>
		heading += 360;
    4c68:	69 81       	ldd	r22, Y+1	; 0x01
    4c6a:	7a 81       	ldd	r23, Y+2	; 0x02
    4c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	44 eb       	ldi	r20, 0xB4	; 180
    4c76:	53 e4       	ldi	r21, 0x43	; 67
    4c78:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    4c7c:	dc 01       	movw	r26, r24
    4c7e:	cb 01       	movw	r24, r22
    4c80:	89 83       	std	Y+1, r24	; 0x01
    4c82:	9a 83       	std	Y+2, r25	; 0x02
    4c84:	ab 83       	std	Y+3, r26	; 0x03
    4c86:	bc 83       	std	Y+4, r27	; 0x04
	return heading;
    4c88:	89 81       	ldd	r24, Y+1	; 0x01
    4c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8c:	ab 81       	ldd	r26, Y+3	; 0x03
    4c8e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4c90:	bc 01       	movw	r22, r24
    4c92:	cd 01       	movw	r24, r26
    4c94:	a2 96       	adiw	r28, 0x22	; 34
    4c96:	0f b6       	in	r0, 0x3f	; 63
    4c98:	f8 94       	cli
    4c9a:	de bf       	out	0x3e, r29	; 62
    4c9c:	0f be       	out	0x3f, r0	; 63
    4c9e:	cd bf       	out	0x3d, r28	; 61
    4ca0:	cf 91       	pop	r28
    4ca2:	df 91       	pop	r29
    4ca4:	1f 91       	pop	r17
    4ca6:	0f 91       	pop	r16
    4ca8:	ff 90       	pop	r15
    4caa:	ef 90       	pop	r14
    4cac:	08 95       	ret

00004cae <_Z11gyro_configv>:




void gyro_config(void)
{
    4cae:	df 93       	push	r29
    4cb0:	cf 93       	push	r28
    4cb2:	cd b7       	in	r28, 0x3d	; 61
    4cb4:	de b7       	in	r29, 0x3e	; 62
 	DDRC = 0;                              // all inputs
    4cb6:	87 e2       	ldi	r24, 0x27	; 39
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	fc 01       	movw	r30, r24
    4cbc:	10 82       	st	Z, r1
	PORTC = (1 << PORTC4) | (1 << PORTC5); // enable pull-ups on SDA and SCL, respectively
    4cbe:	88 e2       	ldi	r24, 0x28	; 40
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	20 e3       	ldi	r18, 0x30	; 48
    4cc4:	fc 01       	movw	r30, r24
    4cc6:	20 83       	st	Z, r18

	TWSR = 0;  // clear bit-rate prescale bits
    4cc8:	89 eb       	ldi	r24, 0xB9	; 185
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	fc 01       	movw	r30, r24
    4cce:	10 82       	st	Z, r1
	TWBR = 12; // produces an SCL frequency of 400 kHz with a 16 MHz CPU clock speed
    4cd0:	88 eb       	ldi	r24, 0xB8	; 184
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	2c e0       	ldi	r18, 0x0C	; 12
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	20 83       	st	Z, r18

	// clear();  

	//enable gyro
	i2c_start(); 
    4cda:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0xD2); // write gyro
    4cde:	82 ed       	ldi	r24, 0xD2	; 210
    4ce0:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0x20); // CTRL_REG1_A
    4ce4:	80 e2       	ldi	r24, 0x20	; 32
    4ce6:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0xBF); // normal power mode, 400 Hz data rate, cut-off 110
    4cea:	8f eb       	ldi	r24, 0xBF	; 191
    4cec:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_stop();
    4cf0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z8i2c_stopv>
	
	// Configures scale
	i2c_start(); 
    4cf4:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0xD2); // write gyro
    4cf8:	82 ed       	ldi	r24, 0xD2	; 210
    4cfa:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0x23); // CTRL_REG4_A
    4cfe:	83 e2       	ldi	r24, 0x23	; 35
    4d00:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	//Next value is 0x00 for 250dps, 0x10 for 500dps, 0x20 for 2000dps
	i2c_write_byte(0x10); 
    4d04:	80 e1       	ldi	r24, 0x10	; 16
    4d06:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_stop();
    4d0a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z8i2c_stopv>



}
    4d0e:	cf 91       	pop	r28
    4d10:	df 91       	pop	r29
    4d12:	08 95       	ret

00004d14 <_Z14gyro_read_dataP6vector>:


void gyro_read_data(vector *g)
{
    4d14:	df 93       	push	r29
    4d16:	cf 93       	push	r28
    4d18:	cd b7       	in	r28, 0x3d	; 61
    4d1a:	de b7       	in	r29, 0x3e	; 62
    4d1c:	28 97       	sbiw	r28, 0x08	; 8
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	cd bf       	out	0x3d, r28	; 61
    4d28:	98 87       	std	Y+8, r25	; 0x08
    4d2a:	8f 83       	std	Y+7, r24	; 0x07
	// read gyroscope values
	i2c_start();
    4d2c:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0xD2); // write acc
    4d30:	82 ed       	ldi	r24, 0xD2	; 210
    4d32:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_write_byte(0xa8); // OUT_X_L, MSB set to enable auto-increment
    4d36:	88 ea       	ldi	r24, 0xA8	; 168
    4d38:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	i2c_start();		  // repeated start
    4d3c:	0e 94 8b 00 	call	0x116	; 0x116 <_Z9i2c_startv>
	i2c_write_byte(0xD3); // read acc
    4d40:	83 ed       	ldi	r24, 0xD3	; 211
    4d42:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14i2c_write_bytec>
	unsigned char gxl = i2c_read_byte();
    4d46:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    4d4a:	89 83       	std	Y+1, r24	; 0x01
	unsigned char gxh = i2c_read_byte();
    4d4c:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    4d50:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char gyl = i2c_read_byte();
    4d52:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    4d56:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char gyh = i2c_read_byte();
    4d58:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    4d5c:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char gzl = i2c_read_byte();
    4d5e:	0e 94 c1 00 	call	0x182	; 0x182 <_Z13i2c_read_bytev>
    4d62:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char gzh = i2c_read_last_byte();
    4d64:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z18i2c_read_last_bytev>
    4d68:	8e 83       	std	Y+6, r24	; 0x06
	i2c_stop();
    4d6a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z8i2c_stopv>


	g->x = gxh << 8 | gxl;
    4d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d70:	88 2f       	mov	r24, r24
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	38 2f       	mov	r19, r24
    4d76:	22 27       	eor	r18, r18
    4d78:	89 81       	ldd	r24, Y+1	; 0x01
    4d7a:	88 2f       	mov	r24, r24
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	82 2b       	or	r24, r18
    4d80:	93 2b       	or	r25, r19
    4d82:	aa 27       	eor	r26, r26
    4d84:	97 fd       	sbrc	r25, 7
    4d86:	a0 95       	com	r26
    4d88:	ba 2f       	mov	r27, r26
    4d8a:	bc 01       	movw	r22, r24
    4d8c:	cd 01       	movw	r24, r26
    4d8e:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
    4d92:	dc 01       	movw	r26, r24
    4d94:	cb 01       	movw	r24, r22
    4d96:	2f 81       	ldd	r18, Y+7	; 0x07
    4d98:	38 85       	ldd	r19, Y+8	; 0x08
    4d9a:	f9 01       	movw	r30, r18
    4d9c:	80 83       	st	Z, r24
    4d9e:	91 83       	std	Z+1, r25	; 0x01
    4da0:	a2 83       	std	Z+2, r26	; 0x02
    4da2:	b3 83       	std	Z+3, r27	; 0x03
	g->y = gyh << 8 | gyl;
    4da4:	8c 81       	ldd	r24, Y+4	; 0x04
    4da6:	88 2f       	mov	r24, r24
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	38 2f       	mov	r19, r24
    4dac:	22 27       	eor	r18, r18
    4dae:	8b 81       	ldd	r24, Y+3	; 0x03
    4db0:	88 2f       	mov	r24, r24
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	82 2b       	or	r24, r18
    4db6:	93 2b       	or	r25, r19
    4db8:	aa 27       	eor	r26, r26
    4dba:	97 fd       	sbrc	r25, 7
    4dbc:	a0 95       	com	r26
    4dbe:	ba 2f       	mov	r27, r26
    4dc0:	bc 01       	movw	r22, r24
    4dc2:	cd 01       	movw	r24, r26
    4dc4:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
    4dc8:	dc 01       	movw	r26, r24
    4dca:	cb 01       	movw	r24, r22
    4dcc:	2f 81       	ldd	r18, Y+7	; 0x07
    4dce:	38 85       	ldd	r19, Y+8	; 0x08
    4dd0:	f9 01       	movw	r30, r18
    4dd2:	84 83       	std	Z+4, r24	; 0x04
    4dd4:	95 83       	std	Z+5, r25	; 0x05
    4dd6:	a6 83       	std	Z+6, r26	; 0x06
    4dd8:	b7 83       	std	Z+7, r27	; 0x07
	g->z = gzh << 8 | gzl;
    4dda:	8e 81       	ldd	r24, Y+6	; 0x06
    4ddc:	88 2f       	mov	r24, r24
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	38 2f       	mov	r19, r24
    4de2:	22 27       	eor	r18, r18
    4de4:	8d 81       	ldd	r24, Y+5	; 0x05
    4de6:	88 2f       	mov	r24, r24
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	82 2b       	or	r24, r18
    4dec:	93 2b       	or	r25, r19
    4dee:	aa 27       	eor	r26, r26
    4df0:	97 fd       	sbrc	r25, 7
    4df2:	a0 95       	com	r26
    4df4:	ba 2f       	mov	r27, r26
    4df6:	bc 01       	movw	r22, r24
    4df8:	cd 01       	movw	r24, r26
    4dfa:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
    4dfe:	dc 01       	movw	r26, r24
    4e00:	cb 01       	movw	r24, r22
    4e02:	2f 81       	ldd	r18, Y+7	; 0x07
    4e04:	38 85       	ldd	r19, Y+8	; 0x08
    4e06:	f9 01       	movw	r30, r18
    4e08:	80 87       	std	Z+8, r24	; 0x08
    4e0a:	91 87       	std	Z+9, r25	; 0x09
    4e0c:	a2 87       	std	Z+10, r26	; 0x0a
    4e0e:	b3 87       	std	Z+11, r27	; 0x0b

    4e10:	28 96       	adiw	r28, 0x08	; 8
    4e12:	0f b6       	in	r0, 0x3f	; 63
    4e14:	f8 94       	cli
    4e16:	de bf       	out	0x3e, r29	; 62
    4e18:	0f be       	out	0x3f, r0	; 63
    4e1a:	cd bf       	out	0x3d, r28	; 61
    4e1c:	cf 91       	pop	r28
    4e1e:	df 91       	pop	r29
    4e20:	08 95       	ret

00004e22 <_Z10USART_Initj>:
#include <stdio.h>			// Conversions
#include <inttypes.h>


void USART_Init( unsigned int ubrr)
{
    4e22:	df 93       	push	r29
    4e24:	cf 93       	push	r28
    4e26:	00 d0       	rcall	.+0      	; 0x4e28 <_Z10USART_Initj+0x6>
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
    4e2c:	9a 83       	std	Y+2, r25	; 0x02
    4e2e:	89 83       	std	Y+1, r24	; 0x01
/*Set baud rate */
UBRR0H = (unsigned char)(ubrr>>8);
    4e30:	85 ec       	ldi	r24, 0xC5	; 197
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	29 81       	ldd	r18, Y+1	; 0x01
    4e36:	3a 81       	ldd	r19, Y+2	; 0x02
    4e38:	23 2f       	mov	r18, r19
    4e3a:	33 27       	eor	r19, r19
    4e3c:	fc 01       	movw	r30, r24
    4e3e:	20 83       	st	Z, r18
UBRR0L = (unsigned char)ubrr;
    4e40:	84 ec       	ldi	r24, 0xC4	; 196
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	29 81       	ldd	r18, Y+1	; 0x01
    4e46:	fc 01       	movw	r30, r24
    4e48:	20 83       	st	Z, r18
//Enable receiver and transmitter */
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    4e4a:	81 ec       	ldi	r24, 0xC1	; 193
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	28 e1       	ldi	r18, 0x18	; 24
    4e50:	fc 01       	movw	r30, r24
    4e52:	20 83       	st	Z, r18
/* Set frame format: 8data, 2stop bit */
UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    4e54:	82 ec       	ldi	r24, 0xC2	; 194
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	2e e0       	ldi	r18, 0x0E	; 14
    4e5a:	fc 01       	movw	r30, r24
    4e5c:	20 83       	st	Z, r18
}
    4e5e:	0f 90       	pop	r0
    4e60:	0f 90       	pop	r0
    4e62:	cf 91       	pop	r28
    4e64:	df 91       	pop	r29
    4e66:	08 95       	ret

00004e68 <_Z14USART_Sendbyteh>:




void USART_Sendbyte( unsigned char data )
{
    4e68:	df 93       	push	r29
    4e6a:	cf 93       	push	r28
    4e6c:	0f 92       	push	r0
    4e6e:	cd b7       	in	r28, 0x3d	; 61
    4e70:	de b7       	in	r29, 0x3e	; 62
    4e72:	89 83       	std	Y+1, r24	; 0x01
/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) )
    4e74:	00 00       	nop
    4e76:	80 ec       	ldi	r24, 0xC0	; 192
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	fc 01       	movw	r30, r24
    4e7c:	80 81       	ld	r24, Z
    4e7e:	88 2f       	mov	r24, r24
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	80 72       	andi	r24, 0x20	; 32
    4e84:	90 70       	andi	r25, 0x00	; 0
    4e86:	21 e0       	ldi	r18, 0x01	; 1
    4e88:	00 97       	sbiw	r24, 0x00	; 0
    4e8a:	09 f0       	breq	.+2      	; 0x4e8e <_Z14USART_Sendbyteh+0x26>
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	22 23       	and	r18, r18
    4e90:	91 f7       	brne	.-28     	; 0x4e76 <_Z14USART_Sendbyteh+0xe>
;
/* Put data into buffer, sends the data */
UDR0 = char(data);
    4e92:	86 ec       	ldi	r24, 0xC6	; 198
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	29 81       	ldd	r18, Y+1	; 0x01
    4e98:	fc 01       	movw	r30, r24
    4e9a:	20 83       	st	Z, r18
}
    4e9c:	0f 90       	pop	r0
    4e9e:	cf 91       	pop	r28
    4ea0:	df 91       	pop	r29
    4ea2:	08 95       	ret

00004ea4 <_Z17USART_Send_stringPKc>:

void USART_Send_string(const char *str)
{
    4ea4:	df 93       	push	r29
    4ea6:	cf 93       	push	r28
    4ea8:	00 d0       	rcall	.+0      	; 0x4eaa <_Z17USART_Send_stringPKc+0x6>
    4eaa:	cd b7       	in	r28, 0x3d	; 61
    4eac:	de b7       	in	r29, 0x3e	; 62
    4eae:	9a 83       	std	Y+2, r25	; 0x02
    4eb0:	89 83       	std	Y+1, r24	; 0x01

	  while (*str) 
    4eb2:	0c c0       	rjmp	.+24     	; 0x4ecc <_Z17USART_Send_stringPKc+0x28>
      USART_Sendbyte(*str++);
    4eb4:	89 81       	ldd	r24, Y+1	; 0x01
    4eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb8:	fc 01       	movw	r30, r24
    4eba:	20 81       	ld	r18, Z
    4ebc:	89 81       	ldd	r24, Y+1	; 0x01
    4ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    4ec0:	01 96       	adiw	r24, 0x01	; 1
    4ec2:	9a 83       	std	Y+2, r25	; 0x02
    4ec4:	89 83       	std	Y+1, r24	; 0x01
    4ec6:	82 2f       	mov	r24, r18
    4ec8:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_Z14USART_Sendbyteh>
}

void USART_Send_string(const char *str)
{

	  while (*str) 
    4ecc:	89 81       	ldd	r24, Y+1	; 0x01
    4ece:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed0:	fc 01       	movw	r30, r24
    4ed2:	90 81       	ld	r25, Z
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	99 23       	and	r25, r25
    4ed8:	09 f4       	brne	.+2      	; 0x4edc <_Z17USART_Send_stringPKc+0x38>
    4eda:	80 e0       	ldi	r24, 0x00	; 0
    4edc:	88 23       	and	r24, r24
    4ede:	51 f7       	brne	.-44     	; 0x4eb4 <_Z17USART_Send_stringPKc+0x10>
      USART_Sendbyte(*str++);
	
}
    4ee0:	0f 90       	pop	r0
    4ee2:	0f 90       	pop	r0
    4ee4:	cf 91       	pop	r28
    4ee6:	df 91       	pop	r29
    4ee8:	08 95       	ret

00004eea <_Z14USART_Send_inti>:

void USART_Send_int(int d )
{
    4eea:	df 93       	push	r29
    4eec:	cf 93       	push	r28
    4eee:	cd b7       	in	r28, 0x3d	; 61
    4ef0:	de b7       	in	r29, 0x3e	; 62
    4ef2:	2c 97       	sbiw	r28, 0x0c	; 12
    4ef4:	0f b6       	in	r0, 0x3f	; 63
    4ef6:	f8 94       	cli
    4ef8:	de bf       	out	0x3e, r29	; 62
    4efa:	0f be       	out	0x3f, r0	; 63
    4efc:	cd bf       	out	0x3d, r28	; 61
    4efe:	9c 87       	std	Y+12, r25	; 0x0c
    4f00:	8b 87       	std	Y+11, r24	; 0x0b
	char str[10];
	sprintf(str,"%d",d);
    4f02:	00 d0       	rcall	.+0      	; 0x4f04 <_Z14USART_Send_inti+0x1a>
    4f04:	00 d0       	rcall	.+0      	; 0x4f06 <_Z14USART_Send_inti+0x1c>
    4f06:	00 d0       	rcall	.+0      	; 0x4f08 <_Z14USART_Send_inti+0x1e>
    4f08:	8d b7       	in	r24, 0x3d	; 61
    4f0a:	9e b7       	in	r25, 0x3e	; 62
    4f0c:	01 96       	adiw	r24, 0x01	; 1
    4f0e:	9e 01       	movw	r18, r28
    4f10:	2f 5f       	subi	r18, 0xFF	; 255
    4f12:	3f 4f       	sbci	r19, 0xFF	; 255
    4f14:	fc 01       	movw	r30, r24
    4f16:	31 83       	std	Z+1, r19	; 0x01
    4f18:	20 83       	st	Z, r18
    4f1a:	26 e9       	ldi	r18, 0x96	; 150
    4f1c:	31 e0       	ldi	r19, 0x01	; 1
    4f1e:	fc 01       	movw	r30, r24
    4f20:	33 83       	std	Z+3, r19	; 0x03
    4f22:	22 83       	std	Z+2, r18	; 0x02
    4f24:	2b 85       	ldd	r18, Y+11	; 0x0b
    4f26:	3c 85       	ldd	r19, Y+12	; 0x0c
    4f28:	fc 01       	movw	r30, r24
    4f2a:	35 83       	std	Z+5, r19	; 0x05
    4f2c:	24 83       	std	Z+4, r18	; 0x04
    4f2e:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <sprintf>
    4f32:	8d b7       	in	r24, 0x3d	; 61
    4f34:	9e b7       	in	r25, 0x3e	; 62
    4f36:	06 96       	adiw	r24, 0x06	; 6
    4f38:	0f b6       	in	r0, 0x3f	; 63
    4f3a:	f8 94       	cli
    4f3c:	9e bf       	out	0x3e, r25	; 62
    4f3e:	0f be       	out	0x3f, r0	; 63
    4f40:	8d bf       	out	0x3d, r24	; 61
	USART_Send_string(str);
    4f42:	ce 01       	movw	r24, r28
    4f44:	01 96       	adiw	r24, 0x01	; 1
    4f46:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z17USART_Send_stringPKc>
	
}
    4f4a:	2c 96       	adiw	r28, 0x0c	; 12
    4f4c:	0f b6       	in	r0, 0x3f	; 63
    4f4e:	f8 94       	cli
    4f50:	de bf       	out	0x3e, r29	; 62
    4f52:	0f be       	out	0x3f, r0	; 63
    4f54:	cd bf       	out	0x3d, r28	; 61
    4f56:	cf 91       	pop	r28
    4f58:	df 91       	pop	r29
    4f5a:	08 95       	ret

00004f5c <_Z13USART_Receivev>:

unsigned char USART_Receive( void )
{
    4f5c:	df 93       	push	r29
    4f5e:	cf 93       	push	r28
    4f60:	cd b7       	in	r28, 0x3d	; 61
    4f62:	de b7       	in	r29, 0x3e	; 62
/* Wait for data to be received */
while ( !(UCSR0A & (1<<RXC0)) )
    4f64:	00 00       	nop
    4f66:	80 ec       	ldi	r24, 0xC0	; 192
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	80 81       	ld	r24, Z
    4f6e:	80 95       	com	r24
    4f70:	88 1f       	adc	r24, r24
    4f72:	88 27       	eor	r24, r24
    4f74:	88 1f       	adc	r24, r24
    4f76:	88 23       	and	r24, r24
    4f78:	b1 f7       	brne	.-20     	; 0x4f66 <_Z13USART_Receivev+0xa>
;
/* Get and return received data from buffer */
return UDR0;
    4f7a:	86 ec       	ldi	r24, 0xC6	; 198
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	fc 01       	movw	r30, r24
    4f80:	80 81       	ld	r24, Z
}
    4f82:	cf 91       	pop	r28
    4f84:	df 91       	pop	r29
    4f86:	08 95       	ret

00004f88 <_Z5writeh>:


// FROM ARDUINO CORE

void write( unsigned char data )
{
    4f88:	df 93       	push	r29
    4f8a:	cf 93       	push	r28
    4f8c:	0f 92       	push	r0
    4f8e:	cd b7       	in	r28, 0x3d	; 61
    4f90:	de b7       	in	r29, 0x3e	; 62
    4f92:	89 83       	std	Y+1, r24	; 0x01
	USART_Sendbyte(data);
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_Z14USART_Sendbyteh>
}
    4f9a:	0f 90       	pop	r0
    4f9c:	cf 91       	pop	r28
    4f9e:	df 91       	pop	r29
    4fa0:	08 95       	ret

00004fa2 <_Z15write_constcharPKc>:



// default implementation: may be overridden
void write_constchar(const char *str)
{
    4fa2:	df 93       	push	r29
    4fa4:	cf 93       	push	r28
    4fa6:	00 d0       	rcall	.+0      	; 0x4fa8 <_Z15write_constcharPKc+0x6>
    4fa8:	cd b7       	in	r28, 0x3d	; 61
    4faa:	de b7       	in	r29, 0x3e	; 62
    4fac:	9a 83       	std	Y+2, r25	; 0x02
    4fae:	89 83       	std	Y+1, r24	; 0x01
  while (*str)
    4fb0:	0c c0       	rjmp	.+24     	; 0x4fca <_Z15write_constcharPKc+0x28>
    write(*str++);
    4fb2:	89 81       	ldd	r24, Y+1	; 0x01
    4fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb6:	fc 01       	movw	r30, r24
    4fb8:	20 81       	ld	r18, Z
    4fba:	89 81       	ldd	r24, Y+1	; 0x01
    4fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    4fbe:	01 96       	adiw	r24, 0x01	; 1
    4fc0:	9a 83       	std	Y+2, r25	; 0x02
    4fc2:	89 83       	std	Y+1, r24	; 0x01
    4fc4:	82 2f       	mov	r24, r18
    4fc6:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <_Z5writeh>


// default implementation: may be overridden
void write_constchar(const char *str)
{
  while (*str)
    4fca:	89 81       	ldd	r24, Y+1	; 0x01
    4fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    4fce:	fc 01       	movw	r30, r24
    4fd0:	90 81       	ld	r25, Z
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	99 23       	and	r25, r25
    4fd6:	09 f4       	brne	.+2      	; 0x4fda <_Z15write_constcharPKc+0x38>
    4fd8:	80 e0       	ldi	r24, 0x00	; 0
    4fda:	88 23       	and	r24, r24
    4fdc:	51 f7       	brne	.-44     	; 0x4fb2 <_Z15write_constcharPKc+0x10>
    write(*str++);
}
    4fde:	0f 90       	pop	r0
    4fe0:	0f 90       	pop	r0
    4fe2:	cf 91       	pop	r28
    4fe4:	df 91       	pop	r29
    4fe6:	08 95       	ret

00004fe8 <_Z15write_constuintPKhj>:

// default implementation: may be overridden 
void write_constuint(const uint8_t *buffer, size_t size)
{
    4fe8:	df 93       	push	r29
    4fea:	cf 93       	push	r28
    4fec:	00 d0       	rcall	.+0      	; 0x4fee <_Z15write_constuintPKhj+0x6>
    4fee:	00 d0       	rcall	.+0      	; 0x4ff0 <_Z15write_constuintPKhj+0x8>
    4ff0:	cd b7       	in	r28, 0x3d	; 61
    4ff2:	de b7       	in	r29, 0x3e	; 62
    4ff4:	9a 83       	std	Y+2, r25	; 0x02
    4ff6:	89 83       	std	Y+1, r24	; 0x01
    4ff8:	7c 83       	std	Y+4, r23	; 0x04
    4ffa:	6b 83       	std	Y+3, r22	; 0x03
  while (size--)
    4ffc:	0c c0       	rjmp	.+24     	; 0x5016 <_Z15write_constuintPKhj+0x2e>
    write(*buffer++);
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	9a 81       	ldd	r25, Y+2	; 0x02
    5002:	fc 01       	movw	r30, r24
    5004:	20 81       	ld	r18, Z
    5006:	89 81       	ldd	r24, Y+1	; 0x01
    5008:	9a 81       	ldd	r25, Y+2	; 0x02
    500a:	01 96       	adiw	r24, 0x01	; 1
    500c:	9a 83       	std	Y+2, r25	; 0x02
    500e:	89 83       	std	Y+1, r24	; 0x01
    5010:	82 2f       	mov	r24, r18
    5012:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <_Z5writeh>
}

// default implementation: may be overridden 
void write_constuint(const uint8_t *buffer, size_t size)
{
  while (size--)
    5016:	21 e0       	ldi	r18, 0x01	; 1
    5018:	8b 81       	ldd	r24, Y+3	; 0x03
    501a:	9c 81       	ldd	r25, Y+4	; 0x04
    501c:	00 97       	sbiw	r24, 0x00	; 0
    501e:	09 f4       	brne	.+2      	; 0x5022 <_Z15write_constuintPKhj+0x3a>
    5020:	20 e0       	ldi	r18, 0x00	; 0
    5022:	8b 81       	ldd	r24, Y+3	; 0x03
    5024:	9c 81       	ldd	r25, Y+4	; 0x04
    5026:	01 97       	sbiw	r24, 0x01	; 1
    5028:	9c 83       	std	Y+4, r25	; 0x04
    502a:	8b 83       	std	Y+3, r24	; 0x03
    502c:	22 23       	and	r18, r18
    502e:	39 f7       	brne	.-50     	; 0x4ffe <_Z15write_constuintPKhj+0x16>
    write(*buffer++);
}
    5030:	0f 90       	pop	r0
    5032:	0f 90       	pop	r0
    5034:	0f 90       	pop	r0
    5036:	0f 90       	pop	r0
    5038:	cf 91       	pop	r28
    503a:	df 91       	pop	r29
    503c:	08 95       	ret

0000503e <_Z15print_constcharPKc>:
//     write(s[i]);
//   }
// }

void print_constchar(const char str[])
{
    503e:	df 93       	push	r29
    5040:	cf 93       	push	r28
    5042:	00 d0       	rcall	.+0      	; 0x5044 <_Z15print_constcharPKc+0x6>
    5044:	cd b7       	in	r28, 0x3d	; 61
    5046:	de b7       	in	r29, 0x3e	; 62
    5048:	9a 83       	std	Y+2, r25	; 0x02
    504a:	89 83       	std	Y+1, r24	; 0x01
  write_constchar(str);
    504c:	89 81       	ldd	r24, Y+1	; 0x01
    504e:	9a 81       	ldd	r25, Y+2	; 0x02
    5050:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <_Z15write_constcharPKc>
}
    5054:	0f 90       	pop	r0
    5056:	0f 90       	pop	r0
    5058:	cf 91       	pop	r28
    505a:	df 91       	pop	r29
    505c:	08 95       	ret

0000505e <_Z10print_charci>:

void print_char(char c, int base)
{
    505e:	df 93       	push	r29
    5060:	cf 93       	push	r28
    5062:	00 d0       	rcall	.+0      	; 0x5064 <_Z10print_charci+0x6>
    5064:	0f 92       	push	r0
    5066:	cd b7       	in	r28, 0x3d	; 61
    5068:	de b7       	in	r29, 0x3e	; 62
    506a:	89 83       	std	Y+1, r24	; 0x01
    506c:	7b 83       	std	Y+3, r23	; 0x03
    506e:	6a 83       	std	Y+2, r22	; 0x02
  print_long((long) c, base);
    5070:	89 81       	ldd	r24, Y+1	; 0x01
    5072:	88 2f       	mov	r24, r24
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	a0 e0       	ldi	r26, 0x00	; 0
    5078:	b0 e0       	ldi	r27, 0x00	; 0
    507a:	2a 81       	ldd	r18, Y+2	; 0x02
    507c:	3b 81       	ldd	r19, Y+3	; 0x03
    507e:	bc 01       	movw	r22, r24
    5080:	cd 01       	movw	r24, r26
    5082:	a9 01       	movw	r20, r18
    5084:	0e 94 a0 28 	call	0x5140	; 0x5140 <_Z10print_longli>
}
    5088:	0f 90       	pop	r0
    508a:	0f 90       	pop	r0
    508c:	0f 90       	pop	r0
    508e:	cf 91       	pop	r28
    5090:	df 91       	pop	r29
    5092:	08 95       	ret

00005094 <_Z18print_unsignedcharhi>:

void print_unsignedchar(unsigned char b, int base)
{
    5094:	df 93       	push	r29
    5096:	cf 93       	push	r28
    5098:	00 d0       	rcall	.+0      	; 0x509a <_Z18print_unsignedcharhi+0x6>
    509a:	0f 92       	push	r0
    509c:	cd b7       	in	r28, 0x3d	; 61
    509e:	de b7       	in	r29, 0x3e	; 62
    50a0:	89 83       	std	Y+1, r24	; 0x01
    50a2:	7b 83       	std	Y+3, r23	; 0x03
    50a4:	6a 83       	std	Y+2, r22	; 0x02
  print_unsignedlong((unsigned long) b, base);
    50a6:	89 81       	ldd	r24, Y+1	; 0x01
    50a8:	88 2f       	mov	r24, r24
    50aa:	90 e0       	ldi	r25, 0x00	; 0
    50ac:	a0 e0       	ldi	r26, 0x00	; 0
    50ae:	b0 e0       	ldi	r27, 0x00	; 0
    50b0:	2a 81       	ldd	r18, Y+2	; 0x02
    50b2:	3b 81       	ldd	r19, Y+3	; 0x03
    50b4:	bc 01       	movw	r22, r24
    50b6:	cd 01       	movw	r24, r26
    50b8:	a9 01       	movw	r20, r18
    50ba:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <_Z18print_unsignedlongmi>
}
    50be:	0f 90       	pop	r0
    50c0:	0f 90       	pop	r0
    50c2:	0f 90       	pop	r0
    50c4:	cf 91       	pop	r28
    50c6:	df 91       	pop	r29
    50c8:	08 95       	ret

000050ca <_Z9print_intii>:

void print_int(int n, int base)
{
    50ca:	df 93       	push	r29
    50cc:	cf 93       	push	r28
    50ce:	00 d0       	rcall	.+0      	; 0x50d0 <_Z9print_intii+0x6>
    50d0:	00 d0       	rcall	.+0      	; 0x50d2 <_Z9print_intii+0x8>
    50d2:	cd b7       	in	r28, 0x3d	; 61
    50d4:	de b7       	in	r29, 0x3e	; 62
    50d6:	9a 83       	std	Y+2, r25	; 0x02
    50d8:	89 83       	std	Y+1, r24	; 0x01
    50da:	7c 83       	std	Y+4, r23	; 0x04
    50dc:	6b 83       	std	Y+3, r22	; 0x03
  print_long((long) n, base);
    50de:	89 81       	ldd	r24, Y+1	; 0x01
    50e0:	9a 81       	ldd	r25, Y+2	; 0x02
    50e2:	aa 27       	eor	r26, r26
    50e4:	97 fd       	sbrc	r25, 7
    50e6:	a0 95       	com	r26
    50e8:	ba 2f       	mov	r27, r26
    50ea:	2b 81       	ldd	r18, Y+3	; 0x03
    50ec:	3c 81       	ldd	r19, Y+4	; 0x04
    50ee:	bc 01       	movw	r22, r24
    50f0:	cd 01       	movw	r24, r26
    50f2:	a9 01       	movw	r20, r18
    50f4:	0e 94 a0 28 	call	0x5140	; 0x5140 <_Z10print_longli>
}
    50f8:	0f 90       	pop	r0
    50fa:	0f 90       	pop	r0
    50fc:	0f 90       	pop	r0
    50fe:	0f 90       	pop	r0
    5100:	cf 91       	pop	r28
    5102:	df 91       	pop	r29
    5104:	08 95       	ret

00005106 <_Z17print_unsignedintji>:

void print_unsignedint(unsigned int n, int base)
{
    5106:	df 93       	push	r29
    5108:	cf 93       	push	r28
    510a:	00 d0       	rcall	.+0      	; 0x510c <_Z17print_unsignedintji+0x6>
    510c:	00 d0       	rcall	.+0      	; 0x510e <_Z17print_unsignedintji+0x8>
    510e:	cd b7       	in	r28, 0x3d	; 61
    5110:	de b7       	in	r29, 0x3e	; 62
    5112:	9a 83       	std	Y+2, r25	; 0x02
    5114:	89 83       	std	Y+1, r24	; 0x01
    5116:	7c 83       	std	Y+4, r23	; 0x04
    5118:	6b 83       	std	Y+3, r22	; 0x03
  print_unsignedlong((unsigned long) n, base);
    511a:	89 81       	ldd	r24, Y+1	; 0x01
    511c:	9a 81       	ldd	r25, Y+2	; 0x02
    511e:	cc 01       	movw	r24, r24
    5120:	a0 e0       	ldi	r26, 0x00	; 0
    5122:	b0 e0       	ldi	r27, 0x00	; 0
    5124:	2b 81       	ldd	r18, Y+3	; 0x03
    5126:	3c 81       	ldd	r19, Y+4	; 0x04
    5128:	bc 01       	movw	r22, r24
    512a:	cd 01       	movw	r24, r26
    512c:	a9 01       	movw	r20, r18
    512e:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <_Z18print_unsignedlongmi>
}
    5132:	0f 90       	pop	r0
    5134:	0f 90       	pop	r0
    5136:	0f 90       	pop	r0
    5138:	0f 90       	pop	r0
    513a:	cf 91       	pop	r28
    513c:	df 91       	pop	r29
    513e:	08 95       	ret

00005140 <_Z10print_longli>:

void print_long(long n, int base)
{
    5140:	df 93       	push	r29
    5142:	cf 93       	push	r28
    5144:	00 d0       	rcall	.+0      	; 0x5146 <_Z10print_longli+0x6>
    5146:	00 d0       	rcall	.+0      	; 0x5148 <_Z10print_longli+0x8>
    5148:	00 d0       	rcall	.+0      	; 0x514a <_Z10print_longli+0xa>
    514a:	cd b7       	in	r28, 0x3d	; 61
    514c:	de b7       	in	r29, 0x3e	; 62
    514e:	69 83       	std	Y+1, r22	; 0x01
    5150:	7a 83       	std	Y+2, r23	; 0x02
    5152:	8b 83       	std	Y+3, r24	; 0x03
    5154:	9c 83       	std	Y+4, r25	; 0x04
    5156:	5e 83       	std	Y+6, r21	; 0x06
    5158:	4d 83       	std	Y+5, r20	; 0x05
  if (base == 0) {
    515a:	8d 81       	ldd	r24, Y+5	; 0x05
    515c:	9e 81       	ldd	r25, Y+6	; 0x06
    515e:	00 97       	sbiw	r24, 0x00	; 0
    5160:	21 f4       	brne	.+8      	; 0x516a <_Z10print_longli+0x2a>
    write(n);
    5162:	89 81       	ldd	r24, Y+1	; 0x01
    5164:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <_Z5writeh>
    5168:	32 c0       	rjmp	.+100    	; 0x51ce <_Z10print_longli+0x8e>
  } else if (base == 10) {
    516a:	8d 81       	ldd	r24, Y+5	; 0x05
    516c:	9e 81       	ldd	r25, Y+6	; 0x06
    516e:	8a 30       	cpi	r24, 0x0A	; 10
    5170:	91 05       	cpc	r25, r1
    5172:	19 f5       	brne	.+70     	; 0x51ba <_Z10print_longli+0x7a>
    if (n < 0) {
    5174:	89 81       	ldd	r24, Y+1	; 0x01
    5176:	9a 81       	ldd	r25, Y+2	; 0x02
    5178:	ab 81       	ldd	r26, Y+3	; 0x03
    517a:	bc 81       	ldd	r27, Y+4	; 0x04
    517c:	bb 23       	and	r27, r27
    517e:	9c f4       	brge	.+38     	; 0x51a6 <_Z10print_longli+0x66>
      print_constchar("-");
    5180:	89 e9       	ldi	r24, 0x99	; 153
    5182:	91 e0       	ldi	r25, 0x01	; 1
    5184:	0e 94 1f 28 	call	0x503e	; 0x503e <_Z15print_constcharPKc>
      n = -n;
    5188:	89 81       	ldd	r24, Y+1	; 0x01
    518a:	9a 81       	ldd	r25, Y+2	; 0x02
    518c:	ab 81       	ldd	r26, Y+3	; 0x03
    518e:	bc 81       	ldd	r27, Y+4	; 0x04
    5190:	b0 95       	com	r27
    5192:	a0 95       	com	r26
    5194:	90 95       	com	r25
    5196:	81 95       	neg	r24
    5198:	9f 4f       	sbci	r25, 0xFF	; 255
    519a:	af 4f       	sbci	r26, 0xFF	; 255
    519c:	bf 4f       	sbci	r27, 0xFF	; 255
    519e:	89 83       	std	Y+1, r24	; 0x01
    51a0:	9a 83       	std	Y+2, r25	; 0x02
    51a2:	ab 83       	std	Y+3, r26	; 0x03
    51a4:	bc 83       	std	Y+4, r27	; 0x04
    }
    printNumber(n, 10);
    51a6:	89 81       	ldd	r24, Y+1	; 0x01
    51a8:	9a 81       	ldd	r25, Y+2	; 0x02
    51aa:	ab 81       	ldd	r26, Y+3	; 0x03
    51ac:	bc 81       	ldd	r27, Y+4	; 0x04
    51ae:	bc 01       	movw	r22, r24
    51b0:	cd 01       	movw	r24, r26
    51b2:	4a e0       	ldi	r20, 0x0A	; 10
    51b4:	0e 94 38 29 	call	0x5270	; 0x5270 <_Z11printNumbermh>
    51b8:	0a c0       	rjmp	.+20     	; 0x51ce <_Z10print_longli+0x8e>
  } else {
    printNumber(n, base);
    51ba:	89 81       	ldd	r24, Y+1	; 0x01
    51bc:	9a 81       	ldd	r25, Y+2	; 0x02
    51be:	ab 81       	ldd	r26, Y+3	; 0x03
    51c0:	bc 81       	ldd	r27, Y+4	; 0x04
    51c2:	2d 81       	ldd	r18, Y+5	; 0x05
    51c4:	bc 01       	movw	r22, r24
    51c6:	cd 01       	movw	r24, r26
    51c8:	42 2f       	mov	r20, r18
    51ca:	0e 94 38 29 	call	0x5270	; 0x5270 <_Z11printNumbermh>
  }
}
    51ce:	26 96       	adiw	r28, 0x06	; 6
    51d0:	0f b6       	in	r0, 0x3f	; 63
    51d2:	f8 94       	cli
    51d4:	de bf       	out	0x3e, r29	; 62
    51d6:	0f be       	out	0x3f, r0	; 63
    51d8:	cd bf       	out	0x3d, r28	; 61
    51da:	cf 91       	pop	r28
    51dc:	df 91       	pop	r29
    51de:	08 95       	ret

000051e0 <_Z18print_unsignedlongmi>:

void print_unsignedlong(unsigned long n, int base)
{
    51e0:	df 93       	push	r29
    51e2:	cf 93       	push	r28
    51e4:	00 d0       	rcall	.+0      	; 0x51e6 <_Z18print_unsignedlongmi+0x6>
    51e6:	00 d0       	rcall	.+0      	; 0x51e8 <_Z18print_unsignedlongmi+0x8>
    51e8:	00 d0       	rcall	.+0      	; 0x51ea <_Z18print_unsignedlongmi+0xa>
    51ea:	cd b7       	in	r28, 0x3d	; 61
    51ec:	de b7       	in	r29, 0x3e	; 62
    51ee:	69 83       	std	Y+1, r22	; 0x01
    51f0:	7a 83       	std	Y+2, r23	; 0x02
    51f2:	8b 83       	std	Y+3, r24	; 0x03
    51f4:	9c 83       	std	Y+4, r25	; 0x04
    51f6:	5e 83       	std	Y+6, r21	; 0x06
    51f8:	4d 83       	std	Y+5, r20	; 0x05
  if (base == 0) write(n);
    51fa:	8d 81       	ldd	r24, Y+5	; 0x05
    51fc:	9e 81       	ldd	r25, Y+6	; 0x06
    51fe:	00 97       	sbiw	r24, 0x00	; 0
    5200:	21 f4       	brne	.+8      	; 0x520a <_Z18print_unsignedlongmi+0x2a>
    5202:	89 81       	ldd	r24, Y+1	; 0x01
    5204:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <_Z5writeh>
    5208:	0a c0       	rjmp	.+20     	; 0x521e <_Z18print_unsignedlongmi+0x3e>
  else printNumber(n, base);
    520a:	2d 81       	ldd	r18, Y+5	; 0x05
    520c:	89 81       	ldd	r24, Y+1	; 0x01
    520e:	9a 81       	ldd	r25, Y+2	; 0x02
    5210:	ab 81       	ldd	r26, Y+3	; 0x03
    5212:	bc 81       	ldd	r27, Y+4	; 0x04
    5214:	bc 01       	movw	r22, r24
    5216:	cd 01       	movw	r24, r26
    5218:	42 2f       	mov	r20, r18
    521a:	0e 94 38 29 	call	0x5270	; 0x5270 <_Z11printNumbermh>
}
    521e:	26 96       	adiw	r28, 0x06	; 6
    5220:	0f b6       	in	r0, 0x3f	; 63
    5222:	f8 94       	cli
    5224:	de bf       	out	0x3e, r29	; 62
    5226:	0f be       	out	0x3f, r0	; 63
    5228:	cd bf       	out	0x3d, r28	; 61
    522a:	cf 91       	pop	r28
    522c:	df 91       	pop	r29
    522e:	08 95       	ret

00005230 <_Z12print_doubledi>:

void print_double(double n, int digits)
{
    5230:	df 93       	push	r29
    5232:	cf 93       	push	r28
    5234:	00 d0       	rcall	.+0      	; 0x5236 <_Z12print_doubledi+0x6>
    5236:	00 d0       	rcall	.+0      	; 0x5238 <_Z12print_doubledi+0x8>
    5238:	00 d0       	rcall	.+0      	; 0x523a <_Z12print_doubledi+0xa>
    523a:	cd b7       	in	r28, 0x3d	; 61
    523c:	de b7       	in	r29, 0x3e	; 62
    523e:	69 83       	std	Y+1, r22	; 0x01
    5240:	7a 83       	std	Y+2, r23	; 0x02
    5242:	8b 83       	std	Y+3, r24	; 0x03
    5244:	9c 83       	std	Y+4, r25	; 0x04
    5246:	5e 83       	std	Y+6, r21	; 0x06
    5248:	4d 83       	std	Y+5, r20	; 0x05
  printFloat(n, digits);
    524a:	2d 81       	ldd	r18, Y+5	; 0x05
    524c:	89 81       	ldd	r24, Y+1	; 0x01
    524e:	9a 81       	ldd	r25, Y+2	; 0x02
    5250:	ab 81       	ldd	r26, Y+3	; 0x03
    5252:	bc 81       	ldd	r27, Y+4	; 0x04
    5254:	bc 01       	movw	r22, r24
    5256:	cd 01       	movw	r24, r26
    5258:	42 2f       	mov	r20, r18
    525a:	0e 94 ef 29 	call	0x53de	; 0x53de <_Z10printFloatdh>
}
    525e:	26 96       	adiw	r28, 0x06	; 6
    5260:	0f b6       	in	r0, 0x3f	; 63
    5262:	f8 94       	cli
    5264:	de bf       	out	0x3e, r29	; 62
    5266:	0f be       	out	0x3f, r0	; 63
    5268:	cd bf       	out	0x3d, r28	; 61
    526a:	cf 91       	pop	r28
    526c:	df 91       	pop	r29
    526e:	08 95       	ret

00005270 <_Z11printNumbermh>:


// Private Methods /////////////////////////////////////////////////////////////

void printNumber(unsigned long n, uint8_t base)
{
    5270:	df 93       	push	r29
    5272:	cf 93       	push	r28
    5274:	cd b7       	in	r28, 0x3d	; 61
    5276:	de b7       	in	r29, 0x3e	; 62
    5278:	a9 97       	sbiw	r28, 0x29	; 41
    527a:	0f b6       	in	r0, 0x3f	; 63
    527c:	f8 94       	cli
    527e:	de bf       	out	0x3e, r29	; 62
    5280:	0f be       	out	0x3f, r0	; 63
    5282:	cd bf       	out	0x3d, r28	; 61
    5284:	6d a3       	std	Y+37, r22	; 0x25
    5286:	7e a3       	std	Y+38, r23	; 0x26
    5288:	8f a3       	std	Y+39, r24	; 0x27
    528a:	98 a7       	std	Y+40, r25	; 0x28
    528c:	49 a7       	std	Y+41, r20	; 0x29
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;
    528e:	19 82       	std	Y+1, r1	; 0x01
    5290:	1a 82       	std	Y+2, r1	; 0x02
    5292:	1b 82       	std	Y+3, r1	; 0x03
    5294:	1c 82       	std	Y+4, r1	; 0x04

  if (n == 0) {
    5296:	8d a1       	ldd	r24, Y+37	; 0x25
    5298:	9e a1       	ldd	r25, Y+38	; 0x26
    529a:	af a1       	ldd	r26, Y+39	; 0x27
    529c:	b8 a5       	ldd	r27, Y+40	; 0x28
    529e:	00 97       	sbiw	r24, 0x00	; 0
    52a0:	a1 05       	cpc	r26, r1
    52a2:	b1 05       	cpc	r27, r1
    52a4:	d1 f5       	brne	.+116    	; 0x531a <_Z11printNumbermh+0xaa>
    print_constchar("0");
    52a6:	8b e9       	ldi	r24, 0x9B	; 155
    52a8:	91 e0       	ldi	r25, 0x01	; 1
    52aa:	0e 94 1f 28 	call	0x503e	; 0x503e <_Z15print_constcharPKc>
    return;
    52ae:	8e c0       	rjmp	.+284    	; 0x53cc <_Z11printNumbermh+0x15c>
  } 

  while (n > 0) {
    buf[i++] = n % base;
    52b0:	89 a5       	ldd	r24, Y+41	; 0x29
    52b2:	28 2f       	mov	r18, r24
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	40 e0       	ldi	r20, 0x00	; 0
    52b8:	50 e0       	ldi	r21, 0x00	; 0
    52ba:	8d a1       	ldd	r24, Y+37	; 0x25
    52bc:	9e a1       	ldd	r25, Y+38	; 0x26
    52be:	af a1       	ldd	r26, Y+39	; 0x27
    52c0:	b8 a5       	ldd	r27, Y+40	; 0x28
    52c2:	bc 01       	movw	r22, r24
    52c4:	cd 01       	movw	r24, r26
    52c6:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <__udivmodsi4>
    52ca:	dc 01       	movw	r26, r24
    52cc:	cb 01       	movw	r24, r22
    52ce:	48 2f       	mov	r20, r24
    52d0:	9e 01       	movw	r18, r28
    52d2:	2b 5f       	subi	r18, 0xFB	; 251
    52d4:	3f 4f       	sbci	r19, 0xFF	; 255
    52d6:	89 81       	ldd	r24, Y+1	; 0x01
    52d8:	9a 81       	ldd	r25, Y+2	; 0x02
    52da:	82 0f       	add	r24, r18
    52dc:	93 1f       	adc	r25, r19
    52de:	fc 01       	movw	r30, r24
    52e0:	40 83       	st	Z, r20
    52e2:	89 81       	ldd	r24, Y+1	; 0x01
    52e4:	9a 81       	ldd	r25, Y+2	; 0x02
    52e6:	ab 81       	ldd	r26, Y+3	; 0x03
    52e8:	bc 81       	ldd	r27, Y+4	; 0x04
    52ea:	01 96       	adiw	r24, 0x01	; 1
    52ec:	a1 1d       	adc	r26, r1
    52ee:	b1 1d       	adc	r27, r1
    52f0:	89 83       	std	Y+1, r24	; 0x01
    52f2:	9a 83       	std	Y+2, r25	; 0x02
    52f4:	ab 83       	std	Y+3, r26	; 0x03
    52f6:	bc 83       	std	Y+4, r27	; 0x04
    n /= base;
    52f8:	89 a5       	ldd	r24, Y+41	; 0x29
    52fa:	28 2f       	mov	r18, r24
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	40 e0       	ldi	r20, 0x00	; 0
    5300:	50 e0       	ldi	r21, 0x00	; 0
    5302:	8d a1       	ldd	r24, Y+37	; 0x25
    5304:	9e a1       	ldd	r25, Y+38	; 0x26
    5306:	af a1       	ldd	r26, Y+39	; 0x27
    5308:	b8 a5       	ldd	r27, Y+40	; 0x28
    530a:	bc 01       	movw	r22, r24
    530c:	cd 01       	movw	r24, r26
    530e:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <__udivmodsi4>
    5312:	2d a3       	std	Y+37, r18	; 0x25
    5314:	3e a3       	std	Y+38, r19	; 0x26
    5316:	4f a3       	std	Y+39, r20	; 0x27
    5318:	58 a7       	std	Y+40, r21	; 0x28
  if (n == 0) {
    print_constchar("0");
    return;
  } 

  while (n > 0) {
    531a:	21 e0       	ldi	r18, 0x01	; 1
    531c:	8d a1       	ldd	r24, Y+37	; 0x25
    531e:	9e a1       	ldd	r25, Y+38	; 0x26
    5320:	af a1       	ldd	r26, Y+39	; 0x27
    5322:	b8 a5       	ldd	r27, Y+40	; 0x28
    5324:	00 97       	sbiw	r24, 0x00	; 0
    5326:	a1 05       	cpc	r26, r1
    5328:	b1 05       	cpc	r27, r1
    532a:	09 f4       	brne	.+2      	; 0x532e <_Z11printNumbermh+0xbe>
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	22 23       	and	r18, r18
    5330:	09 f0       	breq	.+2      	; 0x5334 <_Z11printNumbermh+0xc4>
    5332:	be cf       	rjmp	.-132    	; 0x52b0 <_Z11printNumbermh+0x40>
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    5334:	3e c0       	rjmp	.+124    	; 0x53b2 <_Z11printNumbermh+0x142>
    print_char((char) (buf[i - 1] < 10 ?
    5336:	89 81       	ldd	r24, Y+1	; 0x01
    5338:	9a 81       	ldd	r25, Y+2	; 0x02
    533a:	ab 81       	ldd	r26, Y+3	; 0x03
    533c:	bc 81       	ldd	r27, Y+4	; 0x04
    533e:	01 97       	sbiw	r24, 0x01	; 1
    5340:	a1 09       	sbc	r26, r1
    5342:	b1 09       	sbc	r27, r1
    5344:	9e 01       	movw	r18, r28
    5346:	2b 5f       	subi	r18, 0xFB	; 251
    5348:	3f 4f       	sbci	r19, 0xFF	; 255
    534a:	82 0f       	add	r24, r18
    534c:	93 1f       	adc	r25, r19
    534e:	fc 01       	movw	r30, r24
    5350:	80 81       	ld	r24, Z
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    5352:	8a 30       	cpi	r24, 0x0A	; 10
    5354:	80 f4       	brcc	.+32     	; 0x5376 <_Z11printNumbermh+0x106>
    5356:	89 81       	ldd	r24, Y+1	; 0x01
    5358:	9a 81       	ldd	r25, Y+2	; 0x02
    535a:	ab 81       	ldd	r26, Y+3	; 0x03
    535c:	bc 81       	ldd	r27, Y+4	; 0x04
    535e:	01 97       	sbiw	r24, 0x01	; 1
    5360:	a1 09       	sbc	r26, r1
    5362:	b1 09       	sbc	r27, r1
    n /= base;
  }

  for (; i > 0; i--)
    print_char((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
    5364:	9e 01       	movw	r18, r28
    5366:	2b 5f       	subi	r18, 0xFB	; 251
    5368:	3f 4f       	sbci	r19, 0xFF	; 255
    536a:	82 0f       	add	r24, r18
    536c:	93 1f       	adc	r25, r19
    536e:	fc 01       	movw	r30, r24
    5370:	80 81       	ld	r24, Z
      'A' + buf[i - 1] - 10));
    5372:	80 5d       	subi	r24, 0xD0	; 208
    5374:	0f c0       	rjmp	.+30     	; 0x5394 <_Z11printNumbermh+0x124>
    5376:	89 81       	ldd	r24, Y+1	; 0x01
    5378:	9a 81       	ldd	r25, Y+2	; 0x02
    537a:	ab 81       	ldd	r26, Y+3	; 0x03
    537c:	bc 81       	ldd	r27, Y+4	; 0x04
    537e:	01 97       	sbiw	r24, 0x01	; 1
    5380:	a1 09       	sbc	r26, r1
    5382:	b1 09       	sbc	r27, r1
    5384:	9e 01       	movw	r18, r28
    5386:	2b 5f       	subi	r18, 0xFB	; 251
    5388:	3f 4f       	sbci	r19, 0xFF	; 255
    538a:	82 0f       	add	r24, r18
    538c:	93 1f       	adc	r25, r19
    538e:	fc 01       	movw	r30, r24
    5390:	80 81       	ld	r24, Z
    5392:	89 5c       	subi	r24, 0xC9	; 201
    5394:	60 e0       	ldi	r22, 0x00	; 0
    5396:	70 e0       	ldi	r23, 0x00	; 0
    5398:	0e 94 2f 28 	call	0x505e	; 0x505e <_Z10print_charci>
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    539c:	89 81       	ldd	r24, Y+1	; 0x01
    539e:	9a 81       	ldd	r25, Y+2	; 0x02
    53a0:	ab 81       	ldd	r26, Y+3	; 0x03
    53a2:	bc 81       	ldd	r27, Y+4	; 0x04
    53a4:	01 97       	sbiw	r24, 0x01	; 1
    53a6:	a1 09       	sbc	r26, r1
    53a8:	b1 09       	sbc	r27, r1
    53aa:	89 83       	std	Y+1, r24	; 0x01
    53ac:	9a 83       	std	Y+2, r25	; 0x02
    53ae:	ab 83       	std	Y+3, r26	; 0x03
    53b0:	bc 83       	std	Y+4, r27	; 0x04
    53b2:	21 e0       	ldi	r18, 0x01	; 1
    53b4:	89 81       	ldd	r24, Y+1	; 0x01
    53b6:	9a 81       	ldd	r25, Y+2	; 0x02
    53b8:	ab 81       	ldd	r26, Y+3	; 0x03
    53ba:	bc 81       	ldd	r27, Y+4	; 0x04
    53bc:	00 97       	sbiw	r24, 0x00	; 0
    53be:	a1 05       	cpc	r26, r1
    53c0:	b1 05       	cpc	r27, r1
    53c2:	09 f4       	brne	.+2      	; 0x53c6 <_Z11printNumbermh+0x156>
    53c4:	20 e0       	ldi	r18, 0x00	; 0
    53c6:	22 23       	and	r18, r18
    53c8:	09 f0       	breq	.+2      	; 0x53cc <_Z11printNumbermh+0x15c>
    53ca:	b5 cf       	rjmp	.-150    	; 0x5336 <_Z11printNumbermh+0xc6>
    print_char((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
    53cc:	a9 96       	adiw	r28, 0x29	; 41
    53ce:	0f b6       	in	r0, 0x3f	; 63
    53d0:	f8 94       	cli
    53d2:	de bf       	out	0x3e, r29	; 62
    53d4:	0f be       	out	0x3f, r0	; 63
    53d6:	cd bf       	out	0x3d, r28	; 61
    53d8:	cf 91       	pop	r28
    53da:	df 91       	pop	r29
    53dc:	08 95       	ret

000053de <_Z10printFloatdh>:

void printFloat(double number, uint8_t digits) 
{ 
    53de:	1f 93       	push	r17
    53e0:	df 93       	push	r29
    53e2:	cf 93       	push	r28
    53e4:	cd b7       	in	r28, 0x3d	; 61
    53e6:	de b7       	in	r29, 0x3e	; 62
    53e8:	64 97       	sbiw	r28, 0x14	; 20
    53ea:	0f b6       	in	r0, 0x3f	; 63
    53ec:	f8 94       	cli
    53ee:	de bf       	out	0x3e, r29	; 62
    53f0:	0f be       	out	0x3f, r0	; 63
    53f2:	cd bf       	out	0x3d, r28	; 61
    53f4:	68 8b       	std	Y+16, r22	; 0x10
    53f6:	79 8b       	std	Y+17, r23	; 0x11
    53f8:	8a 8b       	std	Y+18, r24	; 0x12
    53fa:	9b 8b       	std	Y+19, r25	; 0x13
    53fc:	4c 8b       	std	Y+20, r20	; 0x14
  // Handle negative numbers
  if (number < 0.0)
    53fe:	11 e0       	ldi	r17, 0x01	; 1
    5400:	68 89       	ldd	r22, Y+16	; 0x10
    5402:	79 89       	ldd	r23, Y+17	; 0x11
    5404:	8a 89       	ldd	r24, Y+18	; 0x12
    5406:	9b 89       	ldd	r25, Y+19	; 0x13
    5408:	20 e0       	ldi	r18, 0x00	; 0
    540a:	30 e0       	ldi	r19, 0x00	; 0
    540c:	a9 01       	movw	r20, r18
    540e:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__cmpsf2>
    5412:	88 23       	and	r24, r24
    5414:	0c f0       	brlt	.+2      	; 0x5418 <_Z10printFloatdh+0x3a>
    5416:	10 e0       	ldi	r17, 0x00	; 0
    5418:	11 23       	and	r17, r17
    541a:	69 f0       	breq	.+26     	; 0x5436 <_Z10printFloatdh+0x58>
  {
     print_constchar("-");
    541c:	89 e9       	ldi	r24, 0x99	; 153
    541e:	91 e0       	ldi	r25, 0x01	; 1
    5420:	0e 94 1f 28 	call	0x503e	; 0x503e <_Z15print_constcharPKc>
     number = -number;
    5424:	88 89       	ldd	r24, Y+16	; 0x10
    5426:	99 89       	ldd	r25, Y+17	; 0x11
    5428:	aa 89       	ldd	r26, Y+18	; 0x12
    542a:	bb 89       	ldd	r27, Y+19	; 0x13
    542c:	b0 58       	subi	r27, 0x80	; 128
    542e:	88 8b       	std	Y+16, r24	; 0x10
    5430:	99 8b       	std	Y+17, r25	; 0x11
    5432:	aa 8b       	std	Y+18, r26	; 0x12
    5434:	bb 8b       	std	Y+19, r27	; 0x13
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	90 e0       	ldi	r25, 0x00	; 0
    543a:	a0 e0       	ldi	r26, 0x00	; 0
    543c:	bf e3       	ldi	r27, 0x3F	; 63
    543e:	89 83       	std	Y+1, r24	; 0x01
    5440:	9a 83       	std	Y+2, r25	; 0x02
    5442:	ab 83       	std	Y+3, r26	; 0x03
    5444:	bc 83       	std	Y+4, r27	; 0x04
  for (uint8_t i=0; i<digits; ++i)
    5446:	1d 82       	std	Y+5, r1	; 0x05
    5448:	13 c0       	rjmp	.+38     	; 0x5470 <_Z10printFloatdh+0x92>
    rounding /= 10.0;
    544a:	69 81       	ldd	r22, Y+1	; 0x01
    544c:	7a 81       	ldd	r23, Y+2	; 0x02
    544e:	8b 81       	ldd	r24, Y+3	; 0x03
    5450:	9c 81       	ldd	r25, Y+4	; 0x04
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	40 e2       	ldi	r20, 0x20	; 32
    5458:	51 e4       	ldi	r21, 0x41	; 65
    545a:	0e 94 a8 2b 	call	0x5750	; 0x5750 <__divsf3>
    545e:	dc 01       	movw	r26, r24
    5460:	cb 01       	movw	r24, r22
    5462:	89 83       	std	Y+1, r24	; 0x01
    5464:	9a 83       	std	Y+2, r25	; 0x02
    5466:	ab 83       	std	Y+3, r26	; 0x03
    5468:	bc 83       	std	Y+4, r27	; 0x04
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    546a:	8d 81       	ldd	r24, Y+5	; 0x05
    546c:	8f 5f       	subi	r24, 0xFF	; 255
    546e:	8d 83       	std	Y+5, r24	; 0x05
    5470:	81 e0       	ldi	r24, 0x01	; 1
    5472:	2d 81       	ldd	r18, Y+5	; 0x05
    5474:	9c 89       	ldd	r25, Y+20	; 0x14
    5476:	29 17       	cp	r18, r25
    5478:	08 f0       	brcs	.+2      	; 0x547c <_Z10printFloatdh+0x9e>
    547a:	80 e0       	ldi	r24, 0x00	; 0
    547c:	88 23       	and	r24, r24
    547e:	29 f7       	brne	.-54     	; 0x544a <_Z10printFloatdh+0x6c>
    rounding /= 10.0;
  
  number += rounding;
    5480:	68 89       	ldd	r22, Y+16	; 0x10
    5482:	79 89       	ldd	r23, Y+17	; 0x11
    5484:	8a 89       	ldd	r24, Y+18	; 0x12
    5486:	9b 89       	ldd	r25, Y+19	; 0x13
    5488:	29 81       	ldd	r18, Y+1	; 0x01
    548a:	3a 81       	ldd	r19, Y+2	; 0x02
    548c:	4b 81       	ldd	r20, Y+3	; 0x03
    548e:	5c 81       	ldd	r21, Y+4	; 0x04
    5490:	0e 94 de 2a 	call	0x55bc	; 0x55bc <__addsf3>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	88 8b       	std	Y+16, r24	; 0x10
    549a:	99 8b       	std	Y+17, r25	; 0x11
    549c:	aa 8b       	std	Y+18, r26	; 0x12
    549e:	bb 8b       	std	Y+19, r27	; 0x13

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    54a0:	68 89       	ldd	r22, Y+16	; 0x10
    54a2:	79 89       	ldd	r23, Y+17	; 0x11
    54a4:	8a 89       	ldd	r24, Y+18	; 0x12
    54a6:	9b 89       	ldd	r25, Y+19	; 0x13
    54a8:	0e 94 15 2c 	call	0x582a	; 0x582a <__fixunssfsi>
    54ac:	dc 01       	movw	r26, r24
    54ae:	cb 01       	movw	r24, r22
    54b0:	8a 87       	std	Y+10, r24	; 0x0a
    54b2:	9b 87       	std	Y+11, r25	; 0x0b
    54b4:	ac 87       	std	Y+12, r26	; 0x0c
    54b6:	bd 87       	std	Y+13, r27	; 0x0d
  double remainder = number - (double)int_part;
    54b8:	6a 85       	ldd	r22, Y+10	; 0x0a
    54ba:	7b 85       	ldd	r23, Y+11	; 0x0b
    54bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    54be:	9d 85       	ldd	r25, Y+13	; 0x0d
    54c0:	0e 94 41 2c 	call	0x5882	; 0x5882 <__floatunsisf>
    54c4:	9b 01       	movw	r18, r22
    54c6:	ac 01       	movw	r20, r24
    54c8:	68 89       	ldd	r22, Y+16	; 0x10
    54ca:	79 89       	ldd	r23, Y+17	; 0x11
    54cc:	8a 89       	ldd	r24, Y+18	; 0x12
    54ce:	9b 89       	ldd	r25, Y+19	; 0x13
    54d0:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	8e 83       	std	Y+6, r24	; 0x06
    54da:	9f 83       	std	Y+7, r25	; 0x07
    54dc:	a8 87       	std	Y+8, r26	; 0x08
    54de:	b9 87       	std	Y+9, r27	; 0x09
  print_unsignedlong(int_part);
    54e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    54e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    54e4:	ac 85       	ldd	r26, Y+12	; 0x0c
    54e6:	bd 85       	ldd	r27, Y+13	; 0x0d
    54e8:	bc 01       	movw	r22, r24
    54ea:	cd 01       	movw	r24, r26
    54ec:	4a e0       	ldi	r20, 0x0A	; 10
    54ee:	50 e0       	ldi	r21, 0x00	; 0
    54f0:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <_Z18print_unsignedlongmi>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    54f4:	8c 89       	ldd	r24, Y+20	; 0x14
    54f6:	88 23       	and	r24, r24
    54f8:	e9 f1       	breq	.+122    	; 0x5574 <_Z10printFloatdh+0x196>
    print_constchar("."); 
    54fa:	8d e9       	ldi	r24, 0x9D	; 157
    54fc:	91 e0       	ldi	r25, 0x01	; 1
    54fe:	0e 94 1f 28 	call	0x503e	; 0x503e <_Z15print_constcharPKc>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    5502:	38 c0       	rjmp	.+112    	; 0x5574 <_Z10printFloatdh+0x196>
  {
    remainder *= 10.0;
    5504:	6e 81       	ldd	r22, Y+6	; 0x06
    5506:	7f 81       	ldd	r23, Y+7	; 0x07
    5508:	88 85       	ldd	r24, Y+8	; 0x08
    550a:	99 85       	ldd	r25, Y+9	; 0x09
    550c:	20 e0       	ldi	r18, 0x00	; 0
    550e:	30 e0       	ldi	r19, 0x00	; 0
    5510:	40 e2       	ldi	r20, 0x20	; 32
    5512:	51 e4       	ldi	r21, 0x41	; 65
    5514:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__mulsf3>
    5518:	dc 01       	movw	r26, r24
    551a:	cb 01       	movw	r24, r22
    551c:	8e 83       	std	Y+6, r24	; 0x06
    551e:	9f 83       	std	Y+7, r25	; 0x07
    5520:	a8 87       	std	Y+8, r26	; 0x08
    5522:	b9 87       	std	Y+9, r27	; 0x09
    int toPrint = int(remainder);
    5524:	6e 81       	ldd	r22, Y+6	; 0x06
    5526:	7f 81       	ldd	r23, Y+7	; 0x07
    5528:	88 85       	ldd	r24, Y+8	; 0x08
    552a:	99 85       	ldd	r25, Y+9	; 0x09
    552c:	0e 94 10 2c 	call	0x5820	; 0x5820 <__fixsfsi>
    5530:	dc 01       	movw	r26, r24
    5532:	cb 01       	movw	r24, r22
    5534:	9f 87       	std	Y+15, r25	; 0x0f
    5536:	8e 87       	std	Y+14, r24	; 0x0e
    print_int(toPrint);
    5538:	8e 85       	ldd	r24, Y+14	; 0x0e
    553a:	9f 85       	ldd	r25, Y+15	; 0x0f
    553c:	6a e0       	ldi	r22, 0x0A	; 10
    553e:	70 e0       	ldi	r23, 0x00	; 0
    5540:	0e 94 65 28 	call	0x50ca	; 0x50ca <_Z9print_intii>
    remainder -= toPrint; 
    5544:	8e 85       	ldd	r24, Y+14	; 0x0e
    5546:	9f 85       	ldd	r25, Y+15	; 0x0f
    5548:	aa 27       	eor	r26, r26
    554a:	97 fd       	sbrc	r25, 7
    554c:	a0 95       	com	r26
    554e:	ba 2f       	mov	r27, r26
    5550:	bc 01       	movw	r22, r24
    5552:	cd 01       	movw	r24, r26
    5554:	0e 94 43 2c 	call	0x5886	; 0x5886 <__floatsisf>
    5558:	9b 01       	movw	r18, r22
    555a:	ac 01       	movw	r20, r24
    555c:	6e 81       	ldd	r22, Y+6	; 0x06
    555e:	7f 81       	ldd	r23, Y+7	; 0x07
    5560:	88 85       	ldd	r24, Y+8	; 0x08
    5562:	99 85       	ldd	r25, Y+9	; 0x09
    5564:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__subsf3>
    5568:	dc 01       	movw	r26, r24
    556a:	cb 01       	movw	r24, r22
    556c:	8e 83       	std	Y+6, r24	; 0x06
    556e:	9f 83       	std	Y+7, r25	; 0x07
    5570:	a8 87       	std	Y+8, r26	; 0x08
    5572:	b9 87       	std	Y+9, r27	; 0x09
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print_constchar("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    5574:	81 e0       	ldi	r24, 0x01	; 1
    5576:	9c 89       	ldd	r25, Y+20	; 0x14
    5578:	99 23       	and	r25, r25
    557a:	09 f4       	brne	.+2      	; 0x557e <_Z10printFloatdh+0x1a0>
    557c:	80 e0       	ldi	r24, 0x00	; 0
    557e:	9c 89       	ldd	r25, Y+20	; 0x14
    5580:	91 50       	subi	r25, 0x01	; 1
    5582:	9c 8b       	std	Y+20, r25	; 0x14
    5584:	88 23       	and	r24, r24
    5586:	09 f0       	breq	.+2      	; 0x558a <_Z10printFloatdh+0x1ac>
    5588:	bd cf       	rjmp	.-134    	; 0x5504 <_Z10printFloatdh+0x126>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print_int(toPrint);
    remainder -= toPrint; 
  } 
}
    558a:	64 96       	adiw	r28, 0x14	; 20
    558c:	0f b6       	in	r0, 0x3f	; 63
    558e:	f8 94       	cli
    5590:	de bf       	out	0x3e, r29	; 62
    5592:	0f be       	out	0x3f, r0	; 63
    5594:	cd bf       	out	0x3d, r28	; 61
    5596:	cf 91       	pop	r28
    5598:	df 91       	pop	r29
    559a:	1f 91       	pop	r17
    559c:	08 95       	ret

0000559e <acos>:
    559e:	9f 93       	push	r25
    55a0:	9f 77       	andi	r25, 0x7F	; 127
    55a2:	ac d1       	rcall	.+856    	; 0x58fc <__fp_arccos>
    55a4:	0f 90       	pop	r0
    55a6:	00 20       	and	r0, r0
    55a8:	3a f4       	brpl	.+14     	; 0x55b8 <acos+0x1a>
    55aa:	90 58       	subi	r25, 0x80	; 128
    55ac:	a2 ea       	ldi	r26, 0xA2	; 162
    55ae:	2a ed       	ldi	r18, 0xDA	; 218
    55b0:	3f e0       	ldi	r19, 0x0F	; 15
    55b2:	49 e4       	ldi	r20, 0x49	; 73
    55b4:	50 e4       	ldi	r21, 0x40	; 64
    55b6:	13 d0       	rcall	.+38     	; 0x55de <__addsf3x>
    55b8:	1c c2       	rjmp	.+1080   	; 0x59f2 <__fp_round>

000055ba <__subsf3>:
    55ba:	50 58       	subi	r21, 0x80	; 128

000055bc <__addsf3>:
    55bc:	bb 27       	eor	r27, r27
    55be:	aa 27       	eor	r26, r26
    55c0:	0e d0       	rcall	.+28     	; 0x55de <__addsf3x>
    55c2:	17 c2       	rjmp	.+1070   	; 0x59f2 <__fp_round>
    55c4:	08 d2       	rcall	.+1040   	; 0x59d6 <__fp_pscA>
    55c6:	30 f0       	brcs	.+12     	; 0x55d4 <__addsf3+0x18>
    55c8:	0d d2       	rcall	.+1050   	; 0x59e4 <__fp_pscB>
    55ca:	20 f0       	brcs	.+8      	; 0x55d4 <__addsf3+0x18>
    55cc:	31 f4       	brne	.+12     	; 0x55da <__addsf3+0x1e>
    55ce:	9f 3f       	cpi	r25, 0xFF	; 255
    55d0:	11 f4       	brne	.+4      	; 0x55d6 <__addsf3+0x1a>
    55d2:	1e f4       	brtc	.+6      	; 0x55da <__addsf3+0x1e>
    55d4:	d8 c1       	rjmp	.+944    	; 0x5986 <__fp_nan>
    55d6:	0e f4       	brtc	.+2      	; 0x55da <__addsf3+0x1e>
    55d8:	e0 95       	com	r30
    55da:	e7 fb       	bst	r30, 7
    55dc:	ce c1       	rjmp	.+924    	; 0x597a <__fp_inf>

000055de <__addsf3x>:
    55de:	e9 2f       	mov	r30, r25
    55e0:	19 d2       	rcall	.+1074   	; 0x5a14 <__fp_split3>
    55e2:	80 f3       	brcs	.-32     	; 0x55c4 <__addsf3+0x8>
    55e4:	ba 17       	cp	r27, r26
    55e6:	62 07       	cpc	r22, r18
    55e8:	73 07       	cpc	r23, r19
    55ea:	84 07       	cpc	r24, r20
    55ec:	95 07       	cpc	r25, r21
    55ee:	18 f0       	brcs	.+6      	; 0x55f6 <__addsf3x+0x18>
    55f0:	71 f4       	brne	.+28     	; 0x560e <__addsf3x+0x30>
    55f2:	9e f5       	brtc	.+102    	; 0x565a <__addsf3x+0x7c>
    55f4:	31 c2       	rjmp	.+1122   	; 0x5a58 <__fp_zero>
    55f6:	0e f4       	brtc	.+2      	; 0x55fa <__addsf3x+0x1c>
    55f8:	e0 95       	com	r30
    55fa:	0b 2e       	mov	r0, r27
    55fc:	ba 2f       	mov	r27, r26
    55fe:	a0 2d       	mov	r26, r0
    5600:	0b 01       	movw	r0, r22
    5602:	b9 01       	movw	r22, r18
    5604:	90 01       	movw	r18, r0
    5606:	0c 01       	movw	r0, r24
    5608:	ca 01       	movw	r24, r20
    560a:	a0 01       	movw	r20, r0
    560c:	11 24       	eor	r1, r1
    560e:	ff 27       	eor	r31, r31
    5610:	59 1b       	sub	r21, r25
    5612:	99 f0       	breq	.+38     	; 0x563a <__addsf3x+0x5c>
    5614:	59 3f       	cpi	r21, 0xF9	; 249
    5616:	50 f4       	brcc	.+20     	; 0x562c <__addsf3x+0x4e>
    5618:	50 3e       	cpi	r21, 0xE0	; 224
    561a:	68 f1       	brcs	.+90     	; 0x5676 <__addsf3x+0x98>
    561c:	1a 16       	cp	r1, r26
    561e:	f0 40       	sbci	r31, 0x00	; 0
    5620:	a2 2f       	mov	r26, r18
    5622:	23 2f       	mov	r18, r19
    5624:	34 2f       	mov	r19, r20
    5626:	44 27       	eor	r20, r20
    5628:	58 5f       	subi	r21, 0xF8	; 248
    562a:	f3 cf       	rjmp	.-26     	; 0x5612 <__addsf3x+0x34>
    562c:	46 95       	lsr	r20
    562e:	37 95       	ror	r19
    5630:	27 95       	ror	r18
    5632:	a7 95       	ror	r26
    5634:	f0 40       	sbci	r31, 0x00	; 0
    5636:	53 95       	inc	r21
    5638:	c9 f7       	brne	.-14     	; 0x562c <__addsf3x+0x4e>
    563a:	7e f4       	brtc	.+30     	; 0x565a <__addsf3x+0x7c>
    563c:	1f 16       	cp	r1, r31
    563e:	ba 0b       	sbc	r27, r26
    5640:	62 0b       	sbc	r22, r18
    5642:	73 0b       	sbc	r23, r19
    5644:	84 0b       	sbc	r24, r20
    5646:	ba f0       	brmi	.+46     	; 0x5676 <__addsf3x+0x98>
    5648:	91 50       	subi	r25, 0x01	; 1
    564a:	a1 f0       	breq	.+40     	; 0x5674 <__addsf3x+0x96>
    564c:	ff 0f       	add	r31, r31
    564e:	bb 1f       	adc	r27, r27
    5650:	66 1f       	adc	r22, r22
    5652:	77 1f       	adc	r23, r23
    5654:	88 1f       	adc	r24, r24
    5656:	c2 f7       	brpl	.-16     	; 0x5648 <__addsf3x+0x6a>
    5658:	0e c0       	rjmp	.+28     	; 0x5676 <__addsf3x+0x98>
    565a:	ba 0f       	add	r27, r26
    565c:	62 1f       	adc	r22, r18
    565e:	73 1f       	adc	r23, r19
    5660:	84 1f       	adc	r24, r20
    5662:	48 f4       	brcc	.+18     	; 0x5676 <__addsf3x+0x98>
    5664:	87 95       	ror	r24
    5666:	77 95       	ror	r23
    5668:	67 95       	ror	r22
    566a:	b7 95       	ror	r27
    566c:	f7 95       	ror	r31
    566e:	9e 3f       	cpi	r25, 0xFE	; 254
    5670:	08 f0       	brcs	.+2      	; 0x5674 <__addsf3x+0x96>
    5672:	b3 cf       	rjmp	.-154    	; 0x55da <__addsf3+0x1e>
    5674:	93 95       	inc	r25
    5676:	88 0f       	add	r24, r24
    5678:	08 f0       	brcs	.+2      	; 0x567c <__addsf3x+0x9e>
    567a:	99 27       	eor	r25, r25
    567c:	ee 0f       	add	r30, r30
    567e:	97 95       	ror	r25
    5680:	87 95       	ror	r24
    5682:	08 95       	ret
    5684:	a8 d1       	rcall	.+848    	; 0x59d6 <__fp_pscA>
    5686:	58 f0       	brcs	.+22     	; 0x569e <__addsf3x+0xc0>
    5688:	80 e8       	ldi	r24, 0x80	; 128
    568a:	91 e0       	ldi	r25, 0x01	; 1
    568c:	09 f4       	brne	.+2      	; 0x5690 <__addsf3x+0xb2>
    568e:	9e ef       	ldi	r25, 0xFE	; 254
    5690:	a9 d1       	rcall	.+850    	; 0x59e4 <__fp_pscB>
    5692:	28 f0       	brcs	.+10     	; 0x569e <__addsf3x+0xc0>
    5694:	40 e8       	ldi	r20, 0x80	; 128
    5696:	51 e0       	ldi	r21, 0x01	; 1
    5698:	59 f4       	brne	.+22     	; 0x56b0 <atan2+0xe>
    569a:	5e ef       	ldi	r21, 0xFE	; 254
    569c:	09 c0       	rjmp	.+18     	; 0x56b0 <atan2+0xe>
    569e:	73 c1       	rjmp	.+742    	; 0x5986 <__fp_nan>
    56a0:	db c1       	rjmp	.+950    	; 0x5a58 <__fp_zero>

000056a2 <atan2>:
    56a2:	e9 2f       	mov	r30, r25
    56a4:	e0 78       	andi	r30, 0x80	; 128
    56a6:	b6 d1       	rcall	.+876    	; 0x5a14 <__fp_split3>
    56a8:	68 f3       	brcs	.-38     	; 0x5684 <__addsf3x+0xa6>
    56aa:	09 2e       	mov	r0, r25
    56ac:	05 2a       	or	r0, r21
    56ae:	c1 f3       	breq	.-16     	; 0x56a0 <__addsf3x+0xc2>
    56b0:	26 17       	cp	r18, r22
    56b2:	37 07       	cpc	r19, r23
    56b4:	48 07       	cpc	r20, r24
    56b6:	59 07       	cpc	r21, r25
    56b8:	38 f0       	brcs	.+14     	; 0x56c8 <atan2+0x26>
    56ba:	0e 2e       	mov	r0, r30
    56bc:	07 f8       	bld	r0, 7
    56be:	e0 25       	eor	r30, r0
    56c0:	69 f0       	breq	.+26     	; 0x56dc <atan2+0x3a>
    56c2:	e0 25       	eor	r30, r0
    56c4:	e0 64       	ori	r30, 0x40	; 64
    56c6:	0a c0       	rjmp	.+20     	; 0x56dc <atan2+0x3a>
    56c8:	ef 63       	ori	r30, 0x3F	; 63
    56ca:	07 f8       	bld	r0, 7
    56cc:	00 94       	com	r0
    56ce:	07 fa       	bst	r0, 7
    56d0:	db 01       	movw	r26, r22
    56d2:	b9 01       	movw	r22, r18
    56d4:	9d 01       	movw	r18, r26
    56d6:	dc 01       	movw	r26, r24
    56d8:	ca 01       	movw	r24, r20
    56da:	ad 01       	movw	r20, r26
    56dc:	ef 93       	push	r30
    56de:	47 d0       	rcall	.+142    	; 0x576e <__divsf3_pse>
    56e0:	88 d1       	rcall	.+784    	; 0x59f2 <__fp_round>
    56e2:	0a d0       	rcall	.+20     	; 0x56f8 <atan>
    56e4:	5f 91       	pop	r21
    56e6:	55 23       	and	r21, r21
    56e8:	31 f0       	breq	.+12     	; 0x56f6 <atan2+0x54>
    56ea:	2b ed       	ldi	r18, 0xDB	; 219
    56ec:	3f e0       	ldi	r19, 0x0F	; 15
    56ee:	49 e4       	ldi	r20, 0x49	; 73
    56f0:	50 fd       	sbrc	r21, 0
    56f2:	49 ec       	ldi	r20, 0xC9	; 201
    56f4:	63 cf       	rjmp	.-314    	; 0x55bc <__addsf3>
    56f6:	08 95       	ret

000056f8 <atan>:
    56f8:	df 93       	push	r29
    56fa:	dd 27       	eor	r29, r29
    56fc:	b9 2f       	mov	r27, r25
    56fe:	bf 77       	andi	r27, 0x7F	; 127
    5700:	40 e8       	ldi	r20, 0x80	; 128
    5702:	5f e3       	ldi	r21, 0x3F	; 63
    5704:	16 16       	cp	r1, r22
    5706:	17 06       	cpc	r1, r23
    5708:	48 07       	cpc	r20, r24
    570a:	5b 07       	cpc	r21, r27
    570c:	10 f4       	brcc	.+4      	; 0x5712 <atan+0x1a>
    570e:	d9 2f       	mov	r29, r25
    5710:	ae d1       	rcall	.+860    	; 0x5a6e <inverse>
    5712:	9f 93       	push	r25
    5714:	8f 93       	push	r24
    5716:	7f 93       	push	r23
    5718:	6f 93       	push	r22
    571a:	75 d2       	rcall	.+1258   	; 0x5c06 <square>
    571c:	e8 e6       	ldi	r30, 0x68	; 104
    571e:	f0 e0       	ldi	r31, 0x00	; 0
    5720:	35 d1       	rcall	.+618    	; 0x598c <__fp_powser>
    5722:	67 d1       	rcall	.+718    	; 0x59f2 <__fp_round>
    5724:	2f 91       	pop	r18
    5726:	3f 91       	pop	r19
    5728:	4f 91       	pop	r20
    572a:	5f 91       	pop	r21
    572c:	b3 d1       	rcall	.+870    	; 0x5a94 <__mulsf3x>
    572e:	dd 23       	and	r29, r29
    5730:	49 f0       	breq	.+18     	; 0x5744 <atan+0x4c>
    5732:	90 58       	subi	r25, 0x80	; 128
    5734:	a2 ea       	ldi	r26, 0xA2	; 162
    5736:	2a ed       	ldi	r18, 0xDA	; 218
    5738:	3f e0       	ldi	r19, 0x0F	; 15
    573a:	49 ec       	ldi	r20, 0xC9	; 201
    573c:	5f e3       	ldi	r21, 0x3F	; 63
    573e:	d0 78       	andi	r29, 0x80	; 128
    5740:	5d 27       	eor	r21, r29
    5742:	4d df       	rcall	.-358    	; 0x55de <__addsf3x>
    5744:	df 91       	pop	r29
    5746:	55 c1       	rjmp	.+682    	; 0x59f2 <__fp_round>

00005748 <__cmpsf2>:
    5748:	f4 d0       	rcall	.+488    	; 0x5932 <__fp_cmp>
    574a:	08 f4       	brcc	.+2      	; 0x574e <__cmpsf2+0x6>
    574c:	81 e0       	ldi	r24, 0x01	; 1
    574e:	08 95       	ret

00005750 <__divsf3>:
    5750:	0c d0       	rcall	.+24     	; 0x576a <__divsf3x>
    5752:	4f c1       	rjmp	.+670    	; 0x59f2 <__fp_round>
    5754:	47 d1       	rcall	.+654    	; 0x59e4 <__fp_pscB>
    5756:	40 f0       	brcs	.+16     	; 0x5768 <__divsf3+0x18>
    5758:	3e d1       	rcall	.+636    	; 0x59d6 <__fp_pscA>
    575a:	30 f0       	brcs	.+12     	; 0x5768 <__divsf3+0x18>
    575c:	21 f4       	brne	.+8      	; 0x5766 <__divsf3+0x16>
    575e:	5f 3f       	cpi	r21, 0xFF	; 255
    5760:	19 f0       	breq	.+6      	; 0x5768 <__divsf3+0x18>
    5762:	0b c1       	rjmp	.+534    	; 0x597a <__fp_inf>
    5764:	51 11       	cpse	r21, r1
    5766:	79 c1       	rjmp	.+754    	; 0x5a5a <__fp_szero>
    5768:	0e c1       	rjmp	.+540    	; 0x5986 <__fp_nan>

0000576a <__divsf3x>:
    576a:	54 d1       	rcall	.+680    	; 0x5a14 <__fp_split3>
    576c:	98 f3       	brcs	.-26     	; 0x5754 <__divsf3+0x4>

0000576e <__divsf3_pse>:
    576e:	99 23       	and	r25, r25
    5770:	c9 f3       	breq	.-14     	; 0x5764 <__divsf3+0x14>
    5772:	55 23       	and	r21, r21
    5774:	b1 f3       	breq	.-20     	; 0x5762 <__divsf3+0x12>
    5776:	95 1b       	sub	r25, r21
    5778:	55 0b       	sbc	r21, r21
    577a:	bb 27       	eor	r27, r27
    577c:	aa 27       	eor	r26, r26
    577e:	62 17       	cp	r22, r18
    5780:	73 07       	cpc	r23, r19
    5782:	84 07       	cpc	r24, r20
    5784:	38 f0       	brcs	.+14     	; 0x5794 <__divsf3_pse+0x26>
    5786:	9f 5f       	subi	r25, 0xFF	; 255
    5788:	5f 4f       	sbci	r21, 0xFF	; 255
    578a:	22 0f       	add	r18, r18
    578c:	33 1f       	adc	r19, r19
    578e:	44 1f       	adc	r20, r20
    5790:	aa 1f       	adc	r26, r26
    5792:	a9 f3       	breq	.-22     	; 0x577e <__divsf3_pse+0x10>
    5794:	33 d0       	rcall	.+102    	; 0x57fc <__divsf3_pse+0x8e>
    5796:	0e 2e       	mov	r0, r30
    5798:	3a f0       	brmi	.+14     	; 0x57a8 <__divsf3_pse+0x3a>
    579a:	e0 e8       	ldi	r30, 0x80	; 128
    579c:	30 d0       	rcall	.+96     	; 0x57fe <__divsf3_pse+0x90>
    579e:	91 50       	subi	r25, 0x01	; 1
    57a0:	50 40       	sbci	r21, 0x00	; 0
    57a2:	e6 95       	lsr	r30
    57a4:	00 1c       	adc	r0, r0
    57a6:	ca f7       	brpl	.-14     	; 0x579a <__divsf3_pse+0x2c>
    57a8:	29 d0       	rcall	.+82     	; 0x57fc <__divsf3_pse+0x8e>
    57aa:	fe 2f       	mov	r31, r30
    57ac:	27 d0       	rcall	.+78     	; 0x57fc <__divsf3_pse+0x8e>
    57ae:	66 0f       	add	r22, r22
    57b0:	77 1f       	adc	r23, r23
    57b2:	88 1f       	adc	r24, r24
    57b4:	bb 1f       	adc	r27, r27
    57b6:	26 17       	cp	r18, r22
    57b8:	37 07       	cpc	r19, r23
    57ba:	48 07       	cpc	r20, r24
    57bc:	ab 07       	cpc	r26, r27
    57be:	b0 e8       	ldi	r27, 0x80	; 128
    57c0:	09 f0       	breq	.+2      	; 0x57c4 <__divsf3_pse+0x56>
    57c2:	bb 0b       	sbc	r27, r27
    57c4:	80 2d       	mov	r24, r0
    57c6:	bf 01       	movw	r22, r30
    57c8:	ff 27       	eor	r31, r31
    57ca:	93 58       	subi	r25, 0x83	; 131
    57cc:	5f 4f       	sbci	r21, 0xFF	; 255
    57ce:	2a f0       	brmi	.+10     	; 0x57da <__divsf3_pse+0x6c>
    57d0:	9e 3f       	cpi	r25, 0xFE	; 254
    57d2:	51 05       	cpc	r21, r1
    57d4:	68 f0       	brcs	.+26     	; 0x57f0 <__divsf3_pse+0x82>
    57d6:	d1 c0       	rjmp	.+418    	; 0x597a <__fp_inf>
    57d8:	40 c1       	rjmp	.+640    	; 0x5a5a <__fp_szero>
    57da:	5f 3f       	cpi	r21, 0xFF	; 255
    57dc:	ec f3       	brlt	.-6      	; 0x57d8 <__divsf3_pse+0x6a>
    57de:	98 3e       	cpi	r25, 0xE8	; 232
    57e0:	dc f3       	brlt	.-10     	; 0x57d8 <__divsf3_pse+0x6a>
    57e2:	86 95       	lsr	r24
    57e4:	77 95       	ror	r23
    57e6:	67 95       	ror	r22
    57e8:	b7 95       	ror	r27
    57ea:	f7 95       	ror	r31
    57ec:	9f 5f       	subi	r25, 0xFF	; 255
    57ee:	c9 f7       	brne	.-14     	; 0x57e2 <__divsf3_pse+0x74>
    57f0:	88 0f       	add	r24, r24
    57f2:	91 1d       	adc	r25, r1
    57f4:	96 95       	lsr	r25
    57f6:	87 95       	ror	r24
    57f8:	97 f9       	bld	r25, 7
    57fa:	08 95       	ret
    57fc:	e1 e0       	ldi	r30, 0x01	; 1
    57fe:	66 0f       	add	r22, r22
    5800:	77 1f       	adc	r23, r23
    5802:	88 1f       	adc	r24, r24
    5804:	bb 1f       	adc	r27, r27
    5806:	62 17       	cp	r22, r18
    5808:	73 07       	cpc	r23, r19
    580a:	84 07       	cpc	r24, r20
    580c:	ba 07       	cpc	r27, r26
    580e:	20 f0       	brcs	.+8      	; 0x5818 <__divsf3_pse+0xaa>
    5810:	62 1b       	sub	r22, r18
    5812:	73 0b       	sbc	r23, r19
    5814:	84 0b       	sbc	r24, r20
    5816:	ba 0b       	sbc	r27, r26
    5818:	ee 1f       	adc	r30, r30
    581a:	88 f7       	brcc	.-30     	; 0x57fe <__divsf3_pse+0x90>
    581c:	e0 95       	com	r30
    581e:	08 95       	ret

00005820 <__fixsfsi>:
    5820:	04 d0       	rcall	.+8      	; 0x582a <__fixunssfsi>
    5822:	68 94       	set
    5824:	b1 11       	cpse	r27, r1
    5826:	19 c1       	rjmp	.+562    	; 0x5a5a <__fp_szero>
    5828:	08 95       	ret

0000582a <__fixunssfsi>:
    582a:	fc d0       	rcall	.+504    	; 0x5a24 <__fp_splitA>
    582c:	88 f0       	brcs	.+34     	; 0x5850 <__fixunssfsi+0x26>
    582e:	9f 57       	subi	r25, 0x7F	; 127
    5830:	90 f0       	brcs	.+36     	; 0x5856 <__fixunssfsi+0x2c>
    5832:	b9 2f       	mov	r27, r25
    5834:	99 27       	eor	r25, r25
    5836:	b7 51       	subi	r27, 0x17	; 23
    5838:	a0 f0       	brcs	.+40     	; 0x5862 <__fixunssfsi+0x38>
    583a:	d1 f0       	breq	.+52     	; 0x5870 <__fixunssfsi+0x46>
    583c:	66 0f       	add	r22, r22
    583e:	77 1f       	adc	r23, r23
    5840:	88 1f       	adc	r24, r24
    5842:	99 1f       	adc	r25, r25
    5844:	1a f0       	brmi	.+6      	; 0x584c <__fixunssfsi+0x22>
    5846:	ba 95       	dec	r27
    5848:	c9 f7       	brne	.-14     	; 0x583c <__fixunssfsi+0x12>
    584a:	12 c0       	rjmp	.+36     	; 0x5870 <__fixunssfsi+0x46>
    584c:	b1 30       	cpi	r27, 0x01	; 1
    584e:	81 f0       	breq	.+32     	; 0x5870 <__fixunssfsi+0x46>
    5850:	03 d1       	rcall	.+518    	; 0x5a58 <__fp_zero>
    5852:	b1 e0       	ldi	r27, 0x01	; 1
    5854:	08 95       	ret
    5856:	00 c1       	rjmp	.+512    	; 0x5a58 <__fp_zero>
    5858:	67 2f       	mov	r22, r23
    585a:	78 2f       	mov	r23, r24
    585c:	88 27       	eor	r24, r24
    585e:	b8 5f       	subi	r27, 0xF8	; 248
    5860:	39 f0       	breq	.+14     	; 0x5870 <__fixunssfsi+0x46>
    5862:	b9 3f       	cpi	r27, 0xF9	; 249
    5864:	cc f3       	brlt	.-14     	; 0x5858 <__fixunssfsi+0x2e>
    5866:	86 95       	lsr	r24
    5868:	77 95       	ror	r23
    586a:	67 95       	ror	r22
    586c:	b3 95       	inc	r27
    586e:	d9 f7       	brne	.-10     	; 0x5866 <__fixunssfsi+0x3c>
    5870:	3e f4       	brtc	.+14     	; 0x5880 <__fixunssfsi+0x56>
    5872:	90 95       	com	r25
    5874:	80 95       	com	r24
    5876:	70 95       	com	r23
    5878:	61 95       	neg	r22
    587a:	7f 4f       	sbci	r23, 0xFF	; 255
    587c:	8f 4f       	sbci	r24, 0xFF	; 255
    587e:	9f 4f       	sbci	r25, 0xFF	; 255
    5880:	08 95       	ret

00005882 <__floatunsisf>:
    5882:	e8 94       	clt
    5884:	09 c0       	rjmp	.+18     	; 0x5898 <__floatsisf+0x12>

00005886 <__floatsisf>:
    5886:	97 fb       	bst	r25, 7
    5888:	3e f4       	brtc	.+14     	; 0x5898 <__floatsisf+0x12>
    588a:	90 95       	com	r25
    588c:	80 95       	com	r24
    588e:	70 95       	com	r23
    5890:	61 95       	neg	r22
    5892:	7f 4f       	sbci	r23, 0xFF	; 255
    5894:	8f 4f       	sbci	r24, 0xFF	; 255
    5896:	9f 4f       	sbci	r25, 0xFF	; 255
    5898:	99 23       	and	r25, r25
    589a:	a9 f0       	breq	.+42     	; 0x58c6 <__floatsisf+0x40>
    589c:	f9 2f       	mov	r31, r25
    589e:	96 e9       	ldi	r25, 0x96	; 150
    58a0:	bb 27       	eor	r27, r27
    58a2:	93 95       	inc	r25
    58a4:	f6 95       	lsr	r31
    58a6:	87 95       	ror	r24
    58a8:	77 95       	ror	r23
    58aa:	67 95       	ror	r22
    58ac:	b7 95       	ror	r27
    58ae:	f1 11       	cpse	r31, r1
    58b0:	f8 cf       	rjmp	.-16     	; 0x58a2 <__floatsisf+0x1c>
    58b2:	fa f4       	brpl	.+62     	; 0x58f2 <__floatsisf+0x6c>
    58b4:	bb 0f       	add	r27, r27
    58b6:	11 f4       	brne	.+4      	; 0x58bc <__floatsisf+0x36>
    58b8:	60 ff       	sbrs	r22, 0
    58ba:	1b c0       	rjmp	.+54     	; 0x58f2 <__floatsisf+0x6c>
    58bc:	6f 5f       	subi	r22, 0xFF	; 255
    58be:	7f 4f       	sbci	r23, 0xFF	; 255
    58c0:	8f 4f       	sbci	r24, 0xFF	; 255
    58c2:	9f 4f       	sbci	r25, 0xFF	; 255
    58c4:	16 c0       	rjmp	.+44     	; 0x58f2 <__floatsisf+0x6c>
    58c6:	88 23       	and	r24, r24
    58c8:	11 f0       	breq	.+4      	; 0x58ce <__floatsisf+0x48>
    58ca:	96 e9       	ldi	r25, 0x96	; 150
    58cc:	11 c0       	rjmp	.+34     	; 0x58f0 <__floatsisf+0x6a>
    58ce:	77 23       	and	r23, r23
    58d0:	21 f0       	breq	.+8      	; 0x58da <__floatsisf+0x54>
    58d2:	9e e8       	ldi	r25, 0x8E	; 142
    58d4:	87 2f       	mov	r24, r23
    58d6:	76 2f       	mov	r23, r22
    58d8:	05 c0       	rjmp	.+10     	; 0x58e4 <__floatsisf+0x5e>
    58da:	66 23       	and	r22, r22
    58dc:	71 f0       	breq	.+28     	; 0x58fa <__floatsisf+0x74>
    58de:	96 e8       	ldi	r25, 0x86	; 134
    58e0:	86 2f       	mov	r24, r22
    58e2:	70 e0       	ldi	r23, 0x00	; 0
    58e4:	60 e0       	ldi	r22, 0x00	; 0
    58e6:	2a f0       	brmi	.+10     	; 0x58f2 <__floatsisf+0x6c>
    58e8:	9a 95       	dec	r25
    58ea:	66 0f       	add	r22, r22
    58ec:	77 1f       	adc	r23, r23
    58ee:	88 1f       	adc	r24, r24
    58f0:	da f7       	brpl	.-10     	; 0x58e8 <__floatsisf+0x62>
    58f2:	88 0f       	add	r24, r24
    58f4:	96 95       	lsr	r25
    58f6:	87 95       	ror	r24
    58f8:	97 f9       	bld	r25, 7
    58fa:	08 95       	ret

000058fc <__fp_arccos>:
    58fc:	df 93       	push	r29
    58fe:	cf 93       	push	r28
    5900:	1f 93       	push	r17
    5902:	0f 93       	push	r16
    5904:	8b 01       	movw	r16, r22
    5906:	ec 01       	movw	r28, r24
    5908:	e5 e9       	ldi	r30, 0x95	; 149
    590a:	f0 e0       	ldi	r31, 0x00	; 0
    590c:	3f d0       	rcall	.+126    	; 0x598c <__fp_powser>
    590e:	71 d0       	rcall	.+226    	; 0x59f2 <__fp_round>
    5910:	98 01       	movw	r18, r16
    5912:	ae 01       	movw	r20, r28
    5914:	8b 01       	movw	r16, r22
    5916:	ec 01       	movw	r28, r24
    5918:	60 e0       	ldi	r22, 0x00	; 0
    591a:	70 e0       	ldi	r23, 0x00	; 0
    591c:	80 e8       	ldi	r24, 0x80	; 128
    591e:	9f e3       	ldi	r25, 0x3F	; 63
    5920:	4c de       	rcall	.-872    	; 0x55ba <__subsf3>
    5922:	33 d1       	rcall	.+614    	; 0x5b8a <sqrt>
    5924:	98 01       	movw	r18, r16
    5926:	ae 01       	movw	r20, r28
    5928:	0f 91       	pop	r16
    592a:	1f 91       	pop	r17
    592c:	cf 91       	pop	r28
    592e:	df 91       	pop	r29
    5930:	b1 c0       	rjmp	.+354    	; 0x5a94 <__mulsf3x>

00005932 <__fp_cmp>:
    5932:	99 0f       	add	r25, r25
    5934:	00 08       	sbc	r0, r0
    5936:	55 0f       	add	r21, r21
    5938:	aa 0b       	sbc	r26, r26
    593a:	e0 e8       	ldi	r30, 0x80	; 128
    593c:	fe ef       	ldi	r31, 0xFE	; 254
    593e:	16 16       	cp	r1, r22
    5940:	17 06       	cpc	r1, r23
    5942:	e8 07       	cpc	r30, r24
    5944:	f9 07       	cpc	r31, r25
    5946:	c0 f0       	brcs	.+48     	; 0x5978 <__fp_cmp+0x46>
    5948:	12 16       	cp	r1, r18
    594a:	13 06       	cpc	r1, r19
    594c:	e4 07       	cpc	r30, r20
    594e:	f5 07       	cpc	r31, r21
    5950:	98 f0       	brcs	.+38     	; 0x5978 <__fp_cmp+0x46>
    5952:	62 1b       	sub	r22, r18
    5954:	73 0b       	sbc	r23, r19
    5956:	84 0b       	sbc	r24, r20
    5958:	95 0b       	sbc	r25, r21
    595a:	39 f4       	brne	.+14     	; 0x596a <__fp_cmp+0x38>
    595c:	0a 26       	eor	r0, r26
    595e:	61 f0       	breq	.+24     	; 0x5978 <__fp_cmp+0x46>
    5960:	23 2b       	or	r18, r19
    5962:	24 2b       	or	r18, r20
    5964:	25 2b       	or	r18, r21
    5966:	21 f4       	brne	.+8      	; 0x5970 <__fp_cmp+0x3e>
    5968:	08 95       	ret
    596a:	0a 26       	eor	r0, r26
    596c:	09 f4       	brne	.+2      	; 0x5970 <__fp_cmp+0x3e>
    596e:	a1 40       	sbci	r26, 0x01	; 1
    5970:	a6 95       	lsr	r26
    5972:	8f ef       	ldi	r24, 0xFF	; 255
    5974:	81 1d       	adc	r24, r1
    5976:	81 1d       	adc	r24, r1
    5978:	08 95       	ret

0000597a <__fp_inf>:
    597a:	97 f9       	bld	r25, 7
    597c:	9f 67       	ori	r25, 0x7F	; 127
    597e:	80 e8       	ldi	r24, 0x80	; 128
    5980:	70 e0       	ldi	r23, 0x00	; 0
    5982:	60 e0       	ldi	r22, 0x00	; 0
    5984:	08 95       	ret

00005986 <__fp_nan>:
    5986:	9f ef       	ldi	r25, 0xFF	; 255
    5988:	80 ec       	ldi	r24, 0xC0	; 192
    598a:	08 95       	ret

0000598c <__fp_powser>:
    598c:	df 93       	push	r29
    598e:	cf 93       	push	r28
    5990:	1f 93       	push	r17
    5992:	0f 93       	push	r16
    5994:	ff 92       	push	r15
    5996:	ef 92       	push	r14
    5998:	df 92       	push	r13
    599a:	7b 01       	movw	r14, r22
    599c:	8c 01       	movw	r16, r24
    599e:	68 94       	set
    59a0:	05 c0       	rjmp	.+10     	; 0x59ac <__fp_powser+0x20>
    59a2:	da 2e       	mov	r13, r26
    59a4:	ef 01       	movw	r28, r30
    59a6:	76 d0       	rcall	.+236    	; 0x5a94 <__mulsf3x>
    59a8:	fe 01       	movw	r30, r28
    59aa:	e8 94       	clt
    59ac:	a5 91       	lpm	r26, Z+
    59ae:	25 91       	lpm	r18, Z+
    59b0:	35 91       	lpm	r19, Z+
    59b2:	45 91       	lpm	r20, Z+
    59b4:	55 91       	lpm	r21, Z+
    59b6:	ae f3       	brts	.-22     	; 0x59a2 <__fp_powser+0x16>
    59b8:	ef 01       	movw	r28, r30
    59ba:	11 de       	rcall	.-990    	; 0x55de <__addsf3x>
    59bc:	fe 01       	movw	r30, r28
    59be:	97 01       	movw	r18, r14
    59c0:	a8 01       	movw	r20, r16
    59c2:	da 94       	dec	r13
    59c4:	79 f7       	brne	.-34     	; 0x59a4 <__fp_powser+0x18>
    59c6:	df 90       	pop	r13
    59c8:	ef 90       	pop	r14
    59ca:	ff 90       	pop	r15
    59cc:	0f 91       	pop	r16
    59ce:	1f 91       	pop	r17
    59d0:	cf 91       	pop	r28
    59d2:	df 91       	pop	r29
    59d4:	08 95       	ret

000059d6 <__fp_pscA>:
    59d6:	00 24       	eor	r0, r0
    59d8:	0a 94       	dec	r0
    59da:	16 16       	cp	r1, r22
    59dc:	17 06       	cpc	r1, r23
    59de:	18 06       	cpc	r1, r24
    59e0:	09 06       	cpc	r0, r25
    59e2:	08 95       	ret

000059e4 <__fp_pscB>:
    59e4:	00 24       	eor	r0, r0
    59e6:	0a 94       	dec	r0
    59e8:	12 16       	cp	r1, r18
    59ea:	13 06       	cpc	r1, r19
    59ec:	14 06       	cpc	r1, r20
    59ee:	05 06       	cpc	r0, r21
    59f0:	08 95       	ret

000059f2 <__fp_round>:
    59f2:	09 2e       	mov	r0, r25
    59f4:	03 94       	inc	r0
    59f6:	00 0c       	add	r0, r0
    59f8:	11 f4       	brne	.+4      	; 0x59fe <__fp_round+0xc>
    59fa:	88 23       	and	r24, r24
    59fc:	52 f0       	brmi	.+20     	; 0x5a12 <__fp_round+0x20>
    59fe:	bb 0f       	add	r27, r27
    5a00:	40 f4       	brcc	.+16     	; 0x5a12 <__fp_round+0x20>
    5a02:	bf 2b       	or	r27, r31
    5a04:	11 f4       	brne	.+4      	; 0x5a0a <__fp_round+0x18>
    5a06:	60 ff       	sbrs	r22, 0
    5a08:	04 c0       	rjmp	.+8      	; 0x5a12 <__fp_round+0x20>
    5a0a:	6f 5f       	subi	r22, 0xFF	; 255
    5a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a10:	9f 4f       	sbci	r25, 0xFF	; 255
    5a12:	08 95       	ret

00005a14 <__fp_split3>:
    5a14:	57 fd       	sbrc	r21, 7
    5a16:	90 58       	subi	r25, 0x80	; 128
    5a18:	44 0f       	add	r20, r20
    5a1a:	55 1f       	adc	r21, r21
    5a1c:	59 f0       	breq	.+22     	; 0x5a34 <__fp_splitA+0x10>
    5a1e:	5f 3f       	cpi	r21, 0xFF	; 255
    5a20:	71 f0       	breq	.+28     	; 0x5a3e <__fp_splitA+0x1a>
    5a22:	47 95       	ror	r20

00005a24 <__fp_splitA>:
    5a24:	88 0f       	add	r24, r24
    5a26:	97 fb       	bst	r25, 7
    5a28:	99 1f       	adc	r25, r25
    5a2a:	61 f0       	breq	.+24     	; 0x5a44 <__fp_splitA+0x20>
    5a2c:	9f 3f       	cpi	r25, 0xFF	; 255
    5a2e:	79 f0       	breq	.+30     	; 0x5a4e <__fp_splitA+0x2a>
    5a30:	87 95       	ror	r24
    5a32:	08 95       	ret
    5a34:	12 16       	cp	r1, r18
    5a36:	13 06       	cpc	r1, r19
    5a38:	14 06       	cpc	r1, r20
    5a3a:	55 1f       	adc	r21, r21
    5a3c:	f2 cf       	rjmp	.-28     	; 0x5a22 <__fp_split3+0xe>
    5a3e:	46 95       	lsr	r20
    5a40:	f1 df       	rcall	.-30     	; 0x5a24 <__fp_splitA>
    5a42:	08 c0       	rjmp	.+16     	; 0x5a54 <__fp_splitA+0x30>
    5a44:	16 16       	cp	r1, r22
    5a46:	17 06       	cpc	r1, r23
    5a48:	18 06       	cpc	r1, r24
    5a4a:	99 1f       	adc	r25, r25
    5a4c:	f1 cf       	rjmp	.-30     	; 0x5a30 <__fp_splitA+0xc>
    5a4e:	86 95       	lsr	r24
    5a50:	71 05       	cpc	r23, r1
    5a52:	61 05       	cpc	r22, r1
    5a54:	08 94       	sec
    5a56:	08 95       	ret

00005a58 <__fp_zero>:
    5a58:	e8 94       	clt

00005a5a <__fp_szero>:
    5a5a:	bb 27       	eor	r27, r27
    5a5c:	66 27       	eor	r22, r22
    5a5e:	77 27       	eor	r23, r23
    5a60:	cb 01       	movw	r24, r22
    5a62:	97 f9       	bld	r25, 7
    5a64:	08 95       	ret

00005a66 <__gesf2>:
    5a66:	65 df       	rcall	.-310    	; 0x5932 <__fp_cmp>
    5a68:	08 f4       	brcc	.+2      	; 0x5a6c <__gesf2+0x6>
    5a6a:	8f ef       	ldi	r24, 0xFF	; 255
    5a6c:	08 95       	ret

00005a6e <inverse>:
    5a6e:	9b 01       	movw	r18, r22
    5a70:	ac 01       	movw	r20, r24
    5a72:	60 e0       	ldi	r22, 0x00	; 0
    5a74:	70 e0       	ldi	r23, 0x00	; 0
    5a76:	80 e8       	ldi	r24, 0x80	; 128
    5a78:	9f e3       	ldi	r25, 0x3F	; 63
    5a7a:	6a ce       	rjmp	.-812    	; 0x5750 <__divsf3>

00005a7c <__mulsf3>:
    5a7c:	0b d0       	rcall	.+22     	; 0x5a94 <__mulsf3x>
    5a7e:	b9 cf       	rjmp	.-142    	; 0x59f2 <__fp_round>
    5a80:	aa df       	rcall	.-172    	; 0x59d6 <__fp_pscA>
    5a82:	28 f0       	brcs	.+10     	; 0x5a8e <__mulsf3+0x12>
    5a84:	af df       	rcall	.-162    	; 0x59e4 <__fp_pscB>
    5a86:	18 f0       	brcs	.+6      	; 0x5a8e <__mulsf3+0x12>
    5a88:	95 23       	and	r25, r21
    5a8a:	09 f0       	breq	.+2      	; 0x5a8e <__mulsf3+0x12>
    5a8c:	76 cf       	rjmp	.-276    	; 0x597a <__fp_inf>
    5a8e:	7b cf       	rjmp	.-266    	; 0x5986 <__fp_nan>
    5a90:	11 24       	eor	r1, r1
    5a92:	e3 cf       	rjmp	.-58     	; 0x5a5a <__fp_szero>

00005a94 <__mulsf3x>:
    5a94:	bf df       	rcall	.-130    	; 0x5a14 <__fp_split3>
    5a96:	a0 f3       	brcs	.-24     	; 0x5a80 <__mulsf3+0x4>

00005a98 <__mulsf3_pse>:
    5a98:	95 9f       	mul	r25, r21
    5a9a:	d1 f3       	breq	.-12     	; 0x5a90 <__mulsf3+0x14>
    5a9c:	95 0f       	add	r25, r21
    5a9e:	50 e0       	ldi	r21, 0x00	; 0
    5aa0:	55 1f       	adc	r21, r21
    5aa2:	62 9f       	mul	r22, r18
    5aa4:	f0 01       	movw	r30, r0
    5aa6:	72 9f       	mul	r23, r18
    5aa8:	bb 27       	eor	r27, r27
    5aaa:	f0 0d       	add	r31, r0
    5aac:	b1 1d       	adc	r27, r1
    5aae:	63 9f       	mul	r22, r19
    5ab0:	aa 27       	eor	r26, r26
    5ab2:	f0 0d       	add	r31, r0
    5ab4:	b1 1d       	adc	r27, r1
    5ab6:	aa 1f       	adc	r26, r26
    5ab8:	64 9f       	mul	r22, r20
    5aba:	66 27       	eor	r22, r22
    5abc:	b0 0d       	add	r27, r0
    5abe:	a1 1d       	adc	r26, r1
    5ac0:	66 1f       	adc	r22, r22
    5ac2:	82 9f       	mul	r24, r18
    5ac4:	22 27       	eor	r18, r18
    5ac6:	b0 0d       	add	r27, r0
    5ac8:	a1 1d       	adc	r26, r1
    5aca:	62 1f       	adc	r22, r18
    5acc:	73 9f       	mul	r23, r19
    5ace:	b0 0d       	add	r27, r0
    5ad0:	a1 1d       	adc	r26, r1
    5ad2:	62 1f       	adc	r22, r18
    5ad4:	83 9f       	mul	r24, r19
    5ad6:	a0 0d       	add	r26, r0
    5ad8:	61 1d       	adc	r22, r1
    5ada:	22 1f       	adc	r18, r18
    5adc:	74 9f       	mul	r23, r20
    5ade:	33 27       	eor	r19, r19
    5ae0:	a0 0d       	add	r26, r0
    5ae2:	61 1d       	adc	r22, r1
    5ae4:	23 1f       	adc	r18, r19
    5ae6:	84 9f       	mul	r24, r20
    5ae8:	60 0d       	add	r22, r0
    5aea:	21 1d       	adc	r18, r1
    5aec:	82 2f       	mov	r24, r18
    5aee:	76 2f       	mov	r23, r22
    5af0:	6a 2f       	mov	r22, r26
    5af2:	11 24       	eor	r1, r1
    5af4:	9f 57       	subi	r25, 0x7F	; 127
    5af6:	50 40       	sbci	r21, 0x00	; 0
    5af8:	8a f0       	brmi	.+34     	; 0x5b1c <__mulsf3_pse+0x84>
    5afa:	e1 f0       	breq	.+56     	; 0x5b34 <__mulsf3_pse+0x9c>
    5afc:	88 23       	and	r24, r24
    5afe:	4a f0       	brmi	.+18     	; 0x5b12 <__mulsf3_pse+0x7a>
    5b00:	ee 0f       	add	r30, r30
    5b02:	ff 1f       	adc	r31, r31
    5b04:	bb 1f       	adc	r27, r27
    5b06:	66 1f       	adc	r22, r22
    5b08:	77 1f       	adc	r23, r23
    5b0a:	88 1f       	adc	r24, r24
    5b0c:	91 50       	subi	r25, 0x01	; 1
    5b0e:	50 40       	sbci	r21, 0x00	; 0
    5b10:	a9 f7       	brne	.-22     	; 0x5afc <__mulsf3_pse+0x64>
    5b12:	9e 3f       	cpi	r25, 0xFE	; 254
    5b14:	51 05       	cpc	r21, r1
    5b16:	70 f0       	brcs	.+28     	; 0x5b34 <__mulsf3_pse+0x9c>
    5b18:	30 cf       	rjmp	.-416    	; 0x597a <__fp_inf>
    5b1a:	9f cf       	rjmp	.-194    	; 0x5a5a <__fp_szero>
    5b1c:	5f 3f       	cpi	r21, 0xFF	; 255
    5b1e:	ec f3       	brlt	.-6      	; 0x5b1a <__mulsf3_pse+0x82>
    5b20:	98 3e       	cpi	r25, 0xE8	; 232
    5b22:	dc f3       	brlt	.-10     	; 0x5b1a <__mulsf3_pse+0x82>
    5b24:	86 95       	lsr	r24
    5b26:	77 95       	ror	r23
    5b28:	67 95       	ror	r22
    5b2a:	b7 95       	ror	r27
    5b2c:	f7 95       	ror	r31
    5b2e:	e7 95       	ror	r30
    5b30:	9f 5f       	subi	r25, 0xFF	; 255
    5b32:	c1 f7       	brne	.-16     	; 0x5b24 <__mulsf3_pse+0x8c>
    5b34:	fe 2b       	or	r31, r30
    5b36:	88 0f       	add	r24, r24
    5b38:	91 1d       	adc	r25, r1
    5b3a:	96 95       	lsr	r25
    5b3c:	87 95       	ror	r24
    5b3e:	97 f9       	bld	r25, 7
    5b40:	08 95       	ret

00005b42 <round>:
    5b42:	70 df       	rcall	.-288    	; 0x5a24 <__fp_splitA>
    5b44:	e0 f0       	brcs	.+56     	; 0x5b7e <round+0x3c>
    5b46:	9e 37       	cpi	r25, 0x7E	; 126
    5b48:	d8 f0       	brcs	.+54     	; 0x5b80 <round+0x3e>
    5b4a:	96 39       	cpi	r25, 0x96	; 150
    5b4c:	b8 f4       	brcc	.+46     	; 0x5b7c <round+0x3a>
    5b4e:	9e 38       	cpi	r25, 0x8E	; 142
    5b50:	48 f4       	brcc	.+18     	; 0x5b64 <round+0x22>
    5b52:	67 2f       	mov	r22, r23
    5b54:	78 2f       	mov	r23, r24
    5b56:	88 27       	eor	r24, r24
    5b58:	98 5f       	subi	r25, 0xF8	; 248
    5b5a:	f9 cf       	rjmp	.-14     	; 0x5b4e <round+0xc>
    5b5c:	86 95       	lsr	r24
    5b5e:	77 95       	ror	r23
    5b60:	67 95       	ror	r22
    5b62:	93 95       	inc	r25
    5b64:	95 39       	cpi	r25, 0x95	; 149
    5b66:	d0 f3       	brcs	.-12     	; 0x5b5c <round+0x1a>
    5b68:	b6 2f       	mov	r27, r22
    5b6a:	b1 70       	andi	r27, 0x01	; 1
    5b6c:	6b 0f       	add	r22, r27
    5b6e:	71 1d       	adc	r23, r1
    5b70:	81 1d       	adc	r24, r1
    5b72:	20 f4       	brcc	.+8      	; 0x5b7c <round+0x3a>
    5b74:	87 95       	ror	r24
    5b76:	77 95       	ror	r23
    5b78:	67 95       	ror	r22
    5b7a:	93 95       	inc	r25
    5b7c:	47 c0       	rjmp	.+142    	; 0x5c0c <__fp_mintl>
    5b7e:	61 c0       	rjmp	.+194    	; 0x5c42 <__fp_mpack>
    5b80:	6c cf       	rjmp	.-296    	; 0x5a5a <__fp_szero>
    5b82:	11 f4       	brne	.+4      	; 0x5b88 <round+0x46>
    5b84:	0e f4       	brtc	.+2      	; 0x5b88 <round+0x46>
    5b86:	ff ce       	rjmp	.-514    	; 0x5986 <__fp_nan>
    5b88:	5c c0       	rjmp	.+184    	; 0x5c42 <__fp_mpack>

00005b8a <sqrt>:
    5b8a:	4c df       	rcall	.-360    	; 0x5a24 <__fp_splitA>
    5b8c:	d0 f3       	brcs	.-12     	; 0x5b82 <round+0x40>
    5b8e:	99 23       	and	r25, r25
    5b90:	d9 f3       	breq	.-10     	; 0x5b88 <round+0x46>
    5b92:	ce f3       	brts	.-14     	; 0x5b86 <round+0x44>
    5b94:	9f 57       	subi	r25, 0x7F	; 127
    5b96:	55 0b       	sbc	r21, r21
    5b98:	87 ff       	sbrs	r24, 7
    5b9a:	61 d0       	rcall	.+194    	; 0x5c5e <__fp_norm2>
    5b9c:	00 24       	eor	r0, r0
    5b9e:	a0 e6       	ldi	r26, 0x60	; 96
    5ba0:	40 ea       	ldi	r20, 0xA0	; 160
    5ba2:	90 01       	movw	r18, r0
    5ba4:	80 58       	subi	r24, 0x80	; 128
    5ba6:	56 95       	lsr	r21
    5ba8:	97 95       	ror	r25
    5baa:	28 f4       	brcc	.+10     	; 0x5bb6 <sqrt+0x2c>
    5bac:	80 5c       	subi	r24, 0xC0	; 192
    5bae:	66 0f       	add	r22, r22
    5bb0:	77 1f       	adc	r23, r23
    5bb2:	88 1f       	adc	r24, r24
    5bb4:	20 f0       	brcs	.+8      	; 0x5bbe <sqrt+0x34>
    5bb6:	26 17       	cp	r18, r22
    5bb8:	37 07       	cpc	r19, r23
    5bba:	48 07       	cpc	r20, r24
    5bbc:	30 f4       	brcc	.+12     	; 0x5bca <sqrt+0x40>
    5bbe:	62 1b       	sub	r22, r18
    5bc0:	73 0b       	sbc	r23, r19
    5bc2:	84 0b       	sbc	r24, r20
    5bc4:	20 29       	or	r18, r0
    5bc6:	31 29       	or	r19, r1
    5bc8:	4a 2b       	or	r20, r26
    5bca:	a6 95       	lsr	r26
    5bcc:	17 94       	ror	r1
    5bce:	07 94       	ror	r0
    5bd0:	20 25       	eor	r18, r0
    5bd2:	31 25       	eor	r19, r1
    5bd4:	4a 27       	eor	r20, r26
    5bd6:	58 f7       	brcc	.-42     	; 0x5bae <sqrt+0x24>
    5bd8:	66 0f       	add	r22, r22
    5bda:	77 1f       	adc	r23, r23
    5bdc:	88 1f       	adc	r24, r24
    5bde:	20 f0       	brcs	.+8      	; 0x5be8 <sqrt+0x5e>
    5be0:	26 17       	cp	r18, r22
    5be2:	37 07       	cpc	r19, r23
    5be4:	48 07       	cpc	r20, r24
    5be6:	30 f4       	brcc	.+12     	; 0x5bf4 <sqrt+0x6a>
    5be8:	62 0b       	sbc	r22, r18
    5bea:	73 0b       	sbc	r23, r19
    5bec:	84 0b       	sbc	r24, r20
    5bee:	20 0d       	add	r18, r0
    5bf0:	31 1d       	adc	r19, r1
    5bf2:	41 1d       	adc	r20, r1
    5bf4:	a0 95       	com	r26
    5bf6:	81 f7       	brne	.-32     	; 0x5bd8 <sqrt+0x4e>
    5bf8:	b9 01       	movw	r22, r18
    5bfa:	84 2f       	mov	r24, r20
    5bfc:	91 58       	subi	r25, 0x81	; 129
    5bfe:	88 0f       	add	r24, r24
    5c00:	96 95       	lsr	r25
    5c02:	87 95       	ror	r24
    5c04:	08 95       	ret

00005c06 <square>:
    5c06:	9b 01       	movw	r18, r22
    5c08:	ac 01       	movw	r20, r24
    5c0a:	38 cf       	rjmp	.-400    	; 0x5a7c <__mulsf3>

00005c0c <__fp_mintl>:
    5c0c:	88 23       	and	r24, r24
    5c0e:	71 f4       	brne	.+28     	; 0x5c2c <__fp_mintl+0x20>
    5c10:	77 23       	and	r23, r23
    5c12:	21 f0       	breq	.+8      	; 0x5c1c <__fp_mintl+0x10>
    5c14:	98 50       	subi	r25, 0x08	; 8
    5c16:	87 2b       	or	r24, r23
    5c18:	76 2f       	mov	r23, r22
    5c1a:	07 c0       	rjmp	.+14     	; 0x5c2a <__fp_mintl+0x1e>
    5c1c:	66 23       	and	r22, r22
    5c1e:	11 f4       	brne	.+4      	; 0x5c24 <__fp_mintl+0x18>
    5c20:	99 27       	eor	r25, r25
    5c22:	0d c0       	rjmp	.+26     	; 0x5c3e <__fp_mintl+0x32>
    5c24:	90 51       	subi	r25, 0x10	; 16
    5c26:	86 2b       	or	r24, r22
    5c28:	70 e0       	ldi	r23, 0x00	; 0
    5c2a:	60 e0       	ldi	r22, 0x00	; 0
    5c2c:	2a f0       	brmi	.+10     	; 0x5c38 <__fp_mintl+0x2c>
    5c2e:	9a 95       	dec	r25
    5c30:	66 0f       	add	r22, r22
    5c32:	77 1f       	adc	r23, r23
    5c34:	88 1f       	adc	r24, r24
    5c36:	da f7       	brpl	.-10     	; 0x5c2e <__fp_mintl+0x22>
    5c38:	88 0f       	add	r24, r24
    5c3a:	96 95       	lsr	r25
    5c3c:	87 95       	ror	r24
    5c3e:	97 f9       	bld	r25, 7
    5c40:	08 95       	ret

00005c42 <__fp_mpack>:
    5c42:	9f 3f       	cpi	r25, 0xFF	; 255
    5c44:	31 f0       	breq	.+12     	; 0x5c52 <__fp_mpack_finite+0xc>

00005c46 <__fp_mpack_finite>:
    5c46:	91 50       	subi	r25, 0x01	; 1
    5c48:	20 f4       	brcc	.+8      	; 0x5c52 <__fp_mpack_finite+0xc>
    5c4a:	87 95       	ror	r24
    5c4c:	77 95       	ror	r23
    5c4e:	67 95       	ror	r22
    5c50:	b7 95       	ror	r27
    5c52:	88 0f       	add	r24, r24
    5c54:	91 1d       	adc	r25, r1
    5c56:	96 95       	lsr	r25
    5c58:	87 95       	ror	r24
    5c5a:	97 f9       	bld	r25, 7
    5c5c:	08 95       	ret

00005c5e <__fp_norm2>:
    5c5e:	91 50       	subi	r25, 0x01	; 1
    5c60:	50 40       	sbci	r21, 0x00	; 0
    5c62:	66 0f       	add	r22, r22
    5c64:	77 1f       	adc	r23, r23
    5c66:	88 1f       	adc	r24, r24
    5c68:	d2 f7       	brpl	.-12     	; 0x5c5e <__fp_norm2>
    5c6a:	08 95       	ret

00005c6c <__udivmodsi4>:
    5c6c:	a1 e2       	ldi	r26, 0x21	; 33
    5c6e:	1a 2e       	mov	r1, r26
    5c70:	aa 1b       	sub	r26, r26
    5c72:	bb 1b       	sub	r27, r27
    5c74:	fd 01       	movw	r30, r26
    5c76:	0d c0       	rjmp	.+26     	; 0x5c92 <__udivmodsi4_ep>

00005c78 <__udivmodsi4_loop>:
    5c78:	aa 1f       	adc	r26, r26
    5c7a:	bb 1f       	adc	r27, r27
    5c7c:	ee 1f       	adc	r30, r30
    5c7e:	ff 1f       	adc	r31, r31
    5c80:	a2 17       	cp	r26, r18
    5c82:	b3 07       	cpc	r27, r19
    5c84:	e4 07       	cpc	r30, r20
    5c86:	f5 07       	cpc	r31, r21
    5c88:	20 f0       	brcs	.+8      	; 0x5c92 <__udivmodsi4_ep>
    5c8a:	a2 1b       	sub	r26, r18
    5c8c:	b3 0b       	sbc	r27, r19
    5c8e:	e4 0b       	sbc	r30, r20
    5c90:	f5 0b       	sbc	r31, r21

00005c92 <__udivmodsi4_ep>:
    5c92:	66 1f       	adc	r22, r22
    5c94:	77 1f       	adc	r23, r23
    5c96:	88 1f       	adc	r24, r24
    5c98:	99 1f       	adc	r25, r25
    5c9a:	1a 94       	dec	r1
    5c9c:	69 f7       	brne	.-38     	; 0x5c78 <__udivmodsi4_loop>
    5c9e:	60 95       	com	r22
    5ca0:	70 95       	com	r23
    5ca2:	80 95       	com	r24
    5ca4:	90 95       	com	r25
    5ca6:	9b 01       	movw	r18, r22
    5ca8:	ac 01       	movw	r20, r24
    5caa:	bd 01       	movw	r22, r26
    5cac:	cf 01       	movw	r24, r30
    5cae:	08 95       	ret

00005cb0 <__tablejump2__>:
    5cb0:	ee 0f       	add	r30, r30
    5cb2:	ff 1f       	adc	r31, r31

00005cb4 <__tablejump__>:
    5cb4:	05 90       	lpm	r0, Z+
    5cb6:	f4 91       	lpm	r31, Z+
    5cb8:	e0 2d       	mov	r30, r0
    5cba:	09 94       	ijmp

00005cbc <malloc>:
    5cbc:	cf 93       	push	r28
    5cbe:	df 93       	push	r29
    5cc0:	82 30       	cpi	r24, 0x02	; 2
    5cc2:	91 05       	cpc	r25, r1
    5cc4:	10 f4       	brcc	.+4      	; 0x5cca <malloc+0xe>
    5cc6:	82 e0       	ldi	r24, 0x02	; 2
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	e0 91 0e 02 	lds	r30, 0x020E
    5cce:	f0 91 0f 02 	lds	r31, 0x020F
    5cd2:	40 e0       	ldi	r20, 0x00	; 0
    5cd4:	50 e0       	ldi	r21, 0x00	; 0
    5cd6:	20 e0       	ldi	r18, 0x00	; 0
    5cd8:	30 e0       	ldi	r19, 0x00	; 0
    5cda:	26 c0       	rjmp	.+76     	; 0x5d28 <malloc+0x6c>
    5cdc:	60 81       	ld	r22, Z
    5cde:	71 81       	ldd	r23, Z+1	; 0x01
    5ce0:	68 17       	cp	r22, r24
    5ce2:	79 07       	cpc	r23, r25
    5ce4:	e0 f0       	brcs	.+56     	; 0x5d1e <malloc+0x62>
    5ce6:	68 17       	cp	r22, r24
    5ce8:	79 07       	cpc	r23, r25
    5cea:	81 f4       	brne	.+32     	; 0x5d0c <malloc+0x50>
    5cec:	82 81       	ldd	r24, Z+2	; 0x02
    5cee:	93 81       	ldd	r25, Z+3	; 0x03
    5cf0:	21 15       	cp	r18, r1
    5cf2:	31 05       	cpc	r19, r1
    5cf4:	31 f0       	breq	.+12     	; 0x5d02 <malloc+0x46>
    5cf6:	d9 01       	movw	r26, r18
    5cf8:	13 96       	adiw	r26, 0x03	; 3
    5cfa:	9c 93       	st	X, r25
    5cfc:	8e 93       	st	-X, r24
    5cfe:	12 97       	sbiw	r26, 0x02	; 2
    5d00:	2b c0       	rjmp	.+86     	; 0x5d58 <malloc+0x9c>
    5d02:	90 93 0f 02 	sts	0x020F, r25
    5d06:	80 93 0e 02 	sts	0x020E, r24
    5d0a:	26 c0       	rjmp	.+76     	; 0x5d58 <malloc+0x9c>
    5d0c:	41 15       	cp	r20, r1
    5d0e:	51 05       	cpc	r21, r1
    5d10:	19 f0       	breq	.+6      	; 0x5d18 <malloc+0x5c>
    5d12:	64 17       	cp	r22, r20
    5d14:	75 07       	cpc	r23, r21
    5d16:	18 f4       	brcc	.+6      	; 0x5d1e <malloc+0x62>
    5d18:	ab 01       	movw	r20, r22
    5d1a:	e9 01       	movw	r28, r18
    5d1c:	df 01       	movw	r26, r30
    5d1e:	9f 01       	movw	r18, r30
    5d20:	72 81       	ldd	r23, Z+2	; 0x02
    5d22:	63 81       	ldd	r22, Z+3	; 0x03
    5d24:	e7 2f       	mov	r30, r23
    5d26:	f6 2f       	mov	r31, r22
    5d28:	30 97       	sbiw	r30, 0x00	; 0
    5d2a:	c1 f6       	brne	.-80     	; 0x5cdc <malloc+0x20>
    5d2c:	41 15       	cp	r20, r1
    5d2e:	51 05       	cpc	r21, r1
    5d30:	01 f1       	breq	.+64     	; 0x5d72 <malloc+0xb6>
    5d32:	48 1b       	sub	r20, r24
    5d34:	59 0b       	sbc	r21, r25
    5d36:	44 30       	cpi	r20, 0x04	; 4
    5d38:	51 05       	cpc	r21, r1
    5d3a:	80 f4       	brcc	.+32     	; 0x5d5c <malloc+0xa0>
    5d3c:	12 96       	adiw	r26, 0x02	; 2
    5d3e:	8d 91       	ld	r24, X+
    5d40:	9c 91       	ld	r25, X
    5d42:	13 97       	sbiw	r26, 0x03	; 3
    5d44:	20 97       	sbiw	r28, 0x00	; 0
    5d46:	19 f0       	breq	.+6      	; 0x5d4e <malloc+0x92>
    5d48:	9b 83       	std	Y+3, r25	; 0x03
    5d4a:	8a 83       	std	Y+2, r24	; 0x02
    5d4c:	04 c0       	rjmp	.+8      	; 0x5d56 <malloc+0x9a>
    5d4e:	90 93 0f 02 	sts	0x020F, r25
    5d52:	80 93 0e 02 	sts	0x020E, r24
    5d56:	fd 01       	movw	r30, r26
    5d58:	32 96       	adiw	r30, 0x02	; 2
    5d5a:	46 c0       	rjmp	.+140    	; 0x5de8 <malloc+0x12c>
    5d5c:	fd 01       	movw	r30, r26
    5d5e:	e4 0f       	add	r30, r20
    5d60:	f5 1f       	adc	r31, r21
    5d62:	81 93       	st	Z+, r24
    5d64:	91 93       	st	Z+, r25
    5d66:	42 50       	subi	r20, 0x02	; 2
    5d68:	50 40       	sbci	r21, 0x00	; 0
    5d6a:	11 96       	adiw	r26, 0x01	; 1
    5d6c:	5c 93       	st	X, r21
    5d6e:	4e 93       	st	-X, r20
    5d70:	3b c0       	rjmp	.+118    	; 0x5de8 <malloc+0x12c>
    5d72:	20 91 0c 02 	lds	r18, 0x020C
    5d76:	30 91 0d 02 	lds	r19, 0x020D
    5d7a:	21 15       	cp	r18, r1
    5d7c:	31 05       	cpc	r19, r1
    5d7e:	41 f4       	brne	.+16     	; 0x5d90 <malloc+0xd4>
    5d80:	20 91 a1 01 	lds	r18, 0x01A1
    5d84:	30 91 a2 01 	lds	r19, 0x01A2
    5d88:	30 93 0d 02 	sts	0x020D, r19
    5d8c:	20 93 0c 02 	sts	0x020C, r18
    5d90:	20 91 a3 01 	lds	r18, 0x01A3
    5d94:	30 91 a4 01 	lds	r19, 0x01A4
    5d98:	21 15       	cp	r18, r1
    5d9a:	31 05       	cpc	r19, r1
    5d9c:	41 f4       	brne	.+16     	; 0x5dae <malloc+0xf2>
    5d9e:	2d b7       	in	r18, 0x3d	; 61
    5da0:	3e b7       	in	r19, 0x3e	; 62
    5da2:	40 91 9f 01 	lds	r20, 0x019F
    5da6:	50 91 a0 01 	lds	r21, 0x01A0
    5daa:	24 1b       	sub	r18, r20
    5dac:	35 0b       	sbc	r19, r21
    5dae:	e0 91 0c 02 	lds	r30, 0x020C
    5db2:	f0 91 0d 02 	lds	r31, 0x020D
    5db6:	e2 17       	cp	r30, r18
    5db8:	f3 07       	cpc	r31, r19
    5dba:	a0 f4       	brcc	.+40     	; 0x5de4 <malloc+0x128>
    5dbc:	2e 1b       	sub	r18, r30
    5dbe:	3f 0b       	sbc	r19, r31
    5dc0:	28 17       	cp	r18, r24
    5dc2:	39 07       	cpc	r19, r25
    5dc4:	78 f0       	brcs	.+30     	; 0x5de4 <malloc+0x128>
    5dc6:	ac 01       	movw	r20, r24
    5dc8:	4e 5f       	subi	r20, 0xFE	; 254
    5dca:	5f 4f       	sbci	r21, 0xFF	; 255
    5dcc:	24 17       	cp	r18, r20
    5dce:	35 07       	cpc	r19, r21
    5dd0:	48 f0       	brcs	.+18     	; 0x5de4 <malloc+0x128>
    5dd2:	4e 0f       	add	r20, r30
    5dd4:	5f 1f       	adc	r21, r31
    5dd6:	50 93 0d 02 	sts	0x020D, r21
    5dda:	40 93 0c 02 	sts	0x020C, r20
    5dde:	81 93       	st	Z+, r24
    5de0:	91 93       	st	Z+, r25
    5de2:	02 c0       	rjmp	.+4      	; 0x5de8 <malloc+0x12c>
    5de4:	e0 e0       	ldi	r30, 0x00	; 0
    5de6:	f0 e0       	ldi	r31, 0x00	; 0
    5de8:	cf 01       	movw	r24, r30
    5dea:	df 91       	pop	r29
    5dec:	cf 91       	pop	r28
    5dee:	08 95       	ret

00005df0 <free>:
    5df0:	cf 93       	push	r28
    5df2:	df 93       	push	r29
    5df4:	00 97       	sbiw	r24, 0x00	; 0
    5df6:	09 f4       	brne	.+2      	; 0x5dfa <free+0xa>
    5df8:	91 c0       	rjmp	.+290    	; 0x5f1c <free+0x12c>
    5dfa:	fc 01       	movw	r30, r24
    5dfc:	32 97       	sbiw	r30, 0x02	; 2
    5dfe:	13 82       	std	Z+3, r1	; 0x03
    5e00:	12 82       	std	Z+2, r1	; 0x02
    5e02:	60 91 0e 02 	lds	r22, 0x020E
    5e06:	70 91 0f 02 	lds	r23, 0x020F
    5e0a:	61 15       	cp	r22, r1
    5e0c:	71 05       	cpc	r23, r1
    5e0e:	81 f4       	brne	.+32     	; 0x5e30 <free+0x40>
    5e10:	20 81       	ld	r18, Z
    5e12:	31 81       	ldd	r19, Z+1	; 0x01
    5e14:	28 0f       	add	r18, r24
    5e16:	39 1f       	adc	r19, r25
    5e18:	80 91 0c 02 	lds	r24, 0x020C
    5e1c:	90 91 0d 02 	lds	r25, 0x020D
    5e20:	82 17       	cp	r24, r18
    5e22:	93 07       	cpc	r25, r19
    5e24:	99 f5       	brne	.+102    	; 0x5e8c <free+0x9c>
    5e26:	f0 93 0d 02 	sts	0x020D, r31
    5e2a:	e0 93 0c 02 	sts	0x020C, r30
    5e2e:	76 c0       	rjmp	.+236    	; 0x5f1c <free+0x12c>
    5e30:	db 01       	movw	r26, r22
    5e32:	80 e0       	ldi	r24, 0x00	; 0
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	02 c0       	rjmp	.+4      	; 0x5e3c <free+0x4c>
    5e38:	cd 01       	movw	r24, r26
    5e3a:	d9 01       	movw	r26, r18
    5e3c:	ae 17       	cp	r26, r30
    5e3e:	bf 07       	cpc	r27, r31
    5e40:	48 f4       	brcc	.+18     	; 0x5e54 <free+0x64>
    5e42:	12 96       	adiw	r26, 0x02	; 2
    5e44:	2d 91       	ld	r18, X+
    5e46:	3c 91       	ld	r19, X
    5e48:	13 97       	sbiw	r26, 0x03	; 3
    5e4a:	21 15       	cp	r18, r1
    5e4c:	31 05       	cpc	r19, r1
    5e4e:	a1 f7       	brne	.-24     	; 0x5e38 <free+0x48>
    5e50:	cd 01       	movw	r24, r26
    5e52:	21 c0       	rjmp	.+66     	; 0x5e96 <free+0xa6>
    5e54:	b3 83       	std	Z+3, r27	; 0x03
    5e56:	a2 83       	std	Z+2, r26	; 0x02
    5e58:	ef 01       	movw	r28, r30
    5e5a:	49 91       	ld	r20, Y+
    5e5c:	59 91       	ld	r21, Y+
    5e5e:	9e 01       	movw	r18, r28
    5e60:	24 0f       	add	r18, r20
    5e62:	35 1f       	adc	r19, r21
    5e64:	a2 17       	cp	r26, r18
    5e66:	b3 07       	cpc	r27, r19
    5e68:	79 f4       	brne	.+30     	; 0x5e88 <free+0x98>
    5e6a:	2d 91       	ld	r18, X+
    5e6c:	3c 91       	ld	r19, X
    5e6e:	11 97       	sbiw	r26, 0x01	; 1
    5e70:	24 0f       	add	r18, r20
    5e72:	35 1f       	adc	r19, r21
    5e74:	2e 5f       	subi	r18, 0xFE	; 254
    5e76:	3f 4f       	sbci	r19, 0xFF	; 255
    5e78:	31 83       	std	Z+1, r19	; 0x01
    5e7a:	20 83       	st	Z, r18
    5e7c:	12 96       	adiw	r26, 0x02	; 2
    5e7e:	2d 91       	ld	r18, X+
    5e80:	3c 91       	ld	r19, X
    5e82:	13 97       	sbiw	r26, 0x03	; 3
    5e84:	33 83       	std	Z+3, r19	; 0x03
    5e86:	22 83       	std	Z+2, r18	; 0x02
    5e88:	00 97       	sbiw	r24, 0x00	; 0
    5e8a:	29 f4       	brne	.+10     	; 0x5e96 <free+0xa6>
    5e8c:	f0 93 0f 02 	sts	0x020F, r31
    5e90:	e0 93 0e 02 	sts	0x020E, r30
    5e94:	43 c0       	rjmp	.+134    	; 0x5f1c <free+0x12c>
    5e96:	dc 01       	movw	r26, r24
    5e98:	13 96       	adiw	r26, 0x03	; 3
    5e9a:	fc 93       	st	X, r31
    5e9c:	ee 93       	st	-X, r30
    5e9e:	12 97       	sbiw	r26, 0x02	; 2
    5ea0:	4d 91       	ld	r20, X+
    5ea2:	5d 91       	ld	r21, X+
    5ea4:	a4 0f       	add	r26, r20
    5ea6:	b5 1f       	adc	r27, r21
    5ea8:	ea 17       	cp	r30, r26
    5eaa:	fb 07       	cpc	r31, r27
    5eac:	69 f4       	brne	.+26     	; 0x5ec8 <free+0xd8>
    5eae:	20 81       	ld	r18, Z
    5eb0:	31 81       	ldd	r19, Z+1	; 0x01
    5eb2:	24 0f       	add	r18, r20
    5eb4:	35 1f       	adc	r19, r21
    5eb6:	2e 5f       	subi	r18, 0xFE	; 254
    5eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eba:	ec 01       	movw	r28, r24
    5ebc:	39 83       	std	Y+1, r19	; 0x01
    5ebe:	28 83       	st	Y, r18
    5ec0:	22 81       	ldd	r18, Z+2	; 0x02
    5ec2:	33 81       	ldd	r19, Z+3	; 0x03
    5ec4:	3b 83       	std	Y+3, r19	; 0x03
    5ec6:	2a 83       	std	Y+2, r18	; 0x02
    5ec8:	e0 e0       	ldi	r30, 0x00	; 0
    5eca:	f0 e0       	ldi	r31, 0x00	; 0
    5ecc:	02 c0       	rjmp	.+4      	; 0x5ed2 <free+0xe2>
    5ece:	fb 01       	movw	r30, r22
    5ed0:	bc 01       	movw	r22, r24
    5ed2:	db 01       	movw	r26, r22
    5ed4:	12 96       	adiw	r26, 0x02	; 2
    5ed6:	8d 91       	ld	r24, X+
    5ed8:	9c 91       	ld	r25, X
    5eda:	13 97       	sbiw	r26, 0x03	; 3
    5edc:	00 97       	sbiw	r24, 0x00	; 0
    5ede:	b9 f7       	brne	.-18     	; 0x5ece <free+0xde>
    5ee0:	9b 01       	movw	r18, r22
    5ee2:	2e 5f       	subi	r18, 0xFE	; 254
    5ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ee6:	8d 91       	ld	r24, X+
    5ee8:	9c 91       	ld	r25, X
    5eea:	11 97       	sbiw	r26, 0x01	; 1
    5eec:	82 0f       	add	r24, r18
    5eee:	93 1f       	adc	r25, r19
    5ef0:	40 91 0c 02 	lds	r20, 0x020C
    5ef4:	50 91 0d 02 	lds	r21, 0x020D
    5ef8:	48 17       	cp	r20, r24
    5efa:	59 07       	cpc	r21, r25
    5efc:	79 f4       	brne	.+30     	; 0x5f1c <free+0x12c>
    5efe:	30 97       	sbiw	r30, 0x00	; 0
    5f00:	29 f4       	brne	.+10     	; 0x5f0c <free+0x11c>
    5f02:	10 92 0f 02 	sts	0x020F, r1
    5f06:	10 92 0e 02 	sts	0x020E, r1
    5f0a:	02 c0       	rjmp	.+4      	; 0x5f10 <free+0x120>
    5f0c:	13 82       	std	Z+3, r1	; 0x03
    5f0e:	12 82       	std	Z+2, r1	; 0x02
    5f10:	22 50       	subi	r18, 0x02	; 2
    5f12:	30 40       	sbci	r19, 0x00	; 0
    5f14:	30 93 0d 02 	sts	0x020D, r19
    5f18:	20 93 0c 02 	sts	0x020C, r18
    5f1c:	df 91       	pop	r29
    5f1e:	cf 91       	pop	r28
    5f20:	08 95       	ret

00005f22 <sprintf>:
    5f22:	ae e0       	ldi	r26, 0x0E	; 14
    5f24:	b0 e0       	ldi	r27, 0x00	; 0
    5f26:	e7 e9       	ldi	r30, 0x97	; 151
    5f28:	ff e2       	ldi	r31, 0x2F	; 47
    5f2a:	0c 94 49 32 	jmp	0x6492	; 0x6492 <__prologue_saves__+0x1c>
    5f2e:	0d 89       	ldd	r16, Y+21	; 0x15
    5f30:	1e 89       	ldd	r17, Y+22	; 0x16
    5f32:	86 e0       	ldi	r24, 0x06	; 6
    5f34:	8c 83       	std	Y+4, r24	; 0x04
    5f36:	1a 83       	std	Y+2, r17	; 0x02
    5f38:	09 83       	std	Y+1, r16	; 0x01
    5f3a:	8f ef       	ldi	r24, 0xFF	; 255
    5f3c:	9f e7       	ldi	r25, 0x7F	; 127
    5f3e:	9e 83       	std	Y+6, r25	; 0x06
    5f40:	8d 83       	std	Y+5, r24	; 0x05
    5f42:	9e 01       	movw	r18, r28
    5f44:	27 5e       	subi	r18, 0xE7	; 231
    5f46:	3f 4f       	sbci	r19, 0xFF	; 255
    5f48:	ce 01       	movw	r24, r28
    5f4a:	01 96       	adiw	r24, 0x01	; 1
    5f4c:	6f 89       	ldd	r22, Y+23	; 0x17
    5f4e:	78 8d       	ldd	r23, Y+24	; 0x18
    5f50:	a9 01       	movw	r20, r18
    5f52:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <vfprintf>
    5f56:	ef 81       	ldd	r30, Y+7	; 0x07
    5f58:	f8 85       	ldd	r31, Y+8	; 0x08
    5f5a:	e0 0f       	add	r30, r16
    5f5c:	f1 1f       	adc	r31, r17
    5f5e:	10 82       	st	Z, r1
    5f60:	2e 96       	adiw	r28, 0x0e	; 14
    5f62:	e4 e0       	ldi	r30, 0x04	; 4
    5f64:	0c 94 65 32 	jmp	0x64ca	; 0x64ca <__epilogue_restores__+0x1c>

00005f68 <vfprintf>:
    5f68:	ac e0       	ldi	r26, 0x0C	; 12
    5f6a:	b0 e0       	ldi	r27, 0x00	; 0
    5f6c:	ea eb       	ldi	r30, 0xBA	; 186
    5f6e:	ff e2       	ldi	r31, 0x2F	; 47
    5f70:	0c 94 3b 32 	jmp	0x6476	; 0x6476 <__prologue_saves__>
    5f74:	6c 01       	movw	r12, r24
    5f76:	1b 01       	movw	r2, r22
    5f78:	8a 01       	movw	r16, r20
    5f7a:	fc 01       	movw	r30, r24
    5f7c:	17 82       	std	Z+7, r1	; 0x07
    5f7e:	16 82       	std	Z+6, r1	; 0x06
    5f80:	83 81       	ldd	r24, Z+3	; 0x03
    5f82:	81 ff       	sbrs	r24, 1
    5f84:	d1 c1       	rjmp	.+930    	; 0x6328 <vfprintf+0x3c0>
    5f86:	2e 01       	movw	r4, r28
    5f88:	08 94       	sec
    5f8a:	41 1c       	adc	r4, r1
    5f8c:	51 1c       	adc	r5, r1
    5f8e:	f6 01       	movw	r30, r12
    5f90:	93 81       	ldd	r25, Z+3	; 0x03
    5f92:	f1 01       	movw	r30, r2
    5f94:	93 fd       	sbrc	r25, 3
    5f96:	85 91       	lpm	r24, Z+
    5f98:	93 ff       	sbrs	r25, 3
    5f9a:	81 91       	ld	r24, Z+
    5f9c:	1f 01       	movw	r2, r30
    5f9e:	88 23       	and	r24, r24
    5fa0:	09 f4       	brne	.+2      	; 0x5fa4 <vfprintf+0x3c>
    5fa2:	be c1       	rjmp	.+892    	; 0x6320 <vfprintf+0x3b8>
    5fa4:	85 32       	cpi	r24, 0x25	; 37
    5fa6:	39 f4       	brne	.+14     	; 0x5fb6 <vfprintf+0x4e>
    5fa8:	93 fd       	sbrc	r25, 3
    5faa:	85 91       	lpm	r24, Z+
    5fac:	93 ff       	sbrs	r25, 3
    5fae:	81 91       	ld	r24, Z+
    5fb0:	1f 01       	movw	r2, r30
    5fb2:	85 32       	cpi	r24, 0x25	; 37
    5fb4:	29 f4       	brne	.+10     	; 0x5fc0 <vfprintf+0x58>
    5fb6:	90 e0       	ldi	r25, 0x00	; 0
    5fb8:	b6 01       	movw	r22, r12
    5fba:	0e 94 b1 31 	call	0x6362	; 0x6362 <fputc>
    5fbe:	e7 cf       	rjmp	.-50     	; 0x5f8e <vfprintf+0x26>
    5fc0:	ee 24       	eor	r14, r14
    5fc2:	ff 24       	eor	r15, r15
    5fc4:	20 e0       	ldi	r18, 0x00	; 0
    5fc6:	20 32       	cpi	r18, 0x20	; 32
    5fc8:	b0 f4       	brcc	.+44     	; 0x5ff6 <vfprintf+0x8e>
    5fca:	8b 32       	cpi	r24, 0x2B	; 43
    5fcc:	69 f0       	breq	.+26     	; 0x5fe8 <vfprintf+0x80>
    5fce:	8c 32       	cpi	r24, 0x2C	; 44
    5fd0:	28 f4       	brcc	.+10     	; 0x5fdc <vfprintf+0x74>
    5fd2:	80 32       	cpi	r24, 0x20	; 32
    5fd4:	51 f0       	breq	.+20     	; 0x5fea <vfprintf+0x82>
    5fd6:	83 32       	cpi	r24, 0x23	; 35
    5fd8:	71 f4       	brne	.+28     	; 0x5ff6 <vfprintf+0x8e>
    5fda:	0b c0       	rjmp	.+22     	; 0x5ff2 <vfprintf+0x8a>
    5fdc:	8d 32       	cpi	r24, 0x2D	; 45
    5fde:	39 f0       	breq	.+14     	; 0x5fee <vfprintf+0x86>
    5fe0:	80 33       	cpi	r24, 0x30	; 48
    5fe2:	49 f4       	brne	.+18     	; 0x5ff6 <vfprintf+0x8e>
    5fe4:	21 60       	ori	r18, 0x01	; 1
    5fe6:	2c c0       	rjmp	.+88     	; 0x6040 <vfprintf+0xd8>
    5fe8:	22 60       	ori	r18, 0x02	; 2
    5fea:	24 60       	ori	r18, 0x04	; 4
    5fec:	29 c0       	rjmp	.+82     	; 0x6040 <vfprintf+0xd8>
    5fee:	28 60       	ori	r18, 0x08	; 8
    5ff0:	27 c0       	rjmp	.+78     	; 0x6040 <vfprintf+0xd8>
    5ff2:	20 61       	ori	r18, 0x10	; 16
    5ff4:	25 c0       	rjmp	.+74     	; 0x6040 <vfprintf+0xd8>
    5ff6:	27 fd       	sbrc	r18, 7
    5ff8:	2c c0       	rjmp	.+88     	; 0x6052 <vfprintf+0xea>
    5ffa:	38 2f       	mov	r19, r24
    5ffc:	30 53       	subi	r19, 0x30	; 48
    5ffe:	3a 30       	cpi	r19, 0x0A	; 10
    6000:	98 f4       	brcc	.+38     	; 0x6028 <vfprintf+0xc0>
    6002:	26 ff       	sbrs	r18, 6
    6004:	08 c0       	rjmp	.+16     	; 0x6016 <vfprintf+0xae>
    6006:	8e 2d       	mov	r24, r14
    6008:	88 0f       	add	r24, r24
    600a:	e8 2e       	mov	r14, r24
    600c:	ee 0c       	add	r14, r14
    600e:	ee 0c       	add	r14, r14
    6010:	e8 0e       	add	r14, r24
    6012:	e3 0e       	add	r14, r19
    6014:	15 c0       	rjmp	.+42     	; 0x6040 <vfprintf+0xd8>
    6016:	8f 2d       	mov	r24, r15
    6018:	88 0f       	add	r24, r24
    601a:	f8 2e       	mov	r15, r24
    601c:	ff 0c       	add	r15, r15
    601e:	ff 0c       	add	r15, r15
    6020:	f8 0e       	add	r15, r24
    6022:	f3 0e       	add	r15, r19
    6024:	20 62       	ori	r18, 0x20	; 32
    6026:	0c c0       	rjmp	.+24     	; 0x6040 <vfprintf+0xd8>
    6028:	8e 32       	cpi	r24, 0x2E	; 46
    602a:	21 f4       	brne	.+8      	; 0x6034 <vfprintf+0xcc>
    602c:	26 fd       	sbrc	r18, 6
    602e:	78 c1       	rjmp	.+752    	; 0x6320 <vfprintf+0x3b8>
    6030:	20 64       	ori	r18, 0x40	; 64
    6032:	06 c0       	rjmp	.+12     	; 0x6040 <vfprintf+0xd8>
    6034:	8c 36       	cpi	r24, 0x6C	; 108
    6036:	11 f4       	brne	.+4      	; 0x603c <vfprintf+0xd4>
    6038:	20 68       	ori	r18, 0x80	; 128
    603a:	02 c0       	rjmp	.+4      	; 0x6040 <vfprintf+0xd8>
    603c:	88 36       	cpi	r24, 0x68	; 104
    603e:	49 f4       	brne	.+18     	; 0x6052 <vfprintf+0xea>
    6040:	f1 01       	movw	r30, r2
    6042:	93 fd       	sbrc	r25, 3
    6044:	85 91       	lpm	r24, Z+
    6046:	93 ff       	sbrs	r25, 3
    6048:	81 91       	ld	r24, Z+
    604a:	1f 01       	movw	r2, r30
    604c:	88 23       	and	r24, r24
    604e:	09 f0       	breq	.+2      	; 0x6052 <vfprintf+0xea>
    6050:	ba cf       	rjmp	.-140    	; 0x5fc6 <vfprintf+0x5e>
    6052:	98 2f       	mov	r25, r24
    6054:	95 54       	subi	r25, 0x45	; 69
    6056:	93 30       	cpi	r25, 0x03	; 3
    6058:	18 f0       	brcs	.+6      	; 0x6060 <vfprintf+0xf8>
    605a:	90 52       	subi	r25, 0x20	; 32
    605c:	93 30       	cpi	r25, 0x03	; 3
    605e:	28 f4       	brcc	.+10     	; 0x606a <vfprintf+0x102>
    6060:	0c 5f       	subi	r16, 0xFC	; 252
    6062:	1f 4f       	sbci	r17, 0xFF	; 255
    6064:	ff e3       	ldi	r31, 0x3F	; 63
    6066:	f9 83       	std	Y+1, r31	; 0x01
    6068:	0d c0       	rjmp	.+26     	; 0x6084 <vfprintf+0x11c>
    606a:	83 36       	cpi	r24, 0x63	; 99
    606c:	31 f0       	breq	.+12     	; 0x607a <vfprintf+0x112>
    606e:	83 37       	cpi	r24, 0x73	; 115
    6070:	71 f0       	breq	.+28     	; 0x608e <vfprintf+0x126>
    6072:	83 35       	cpi	r24, 0x53	; 83
    6074:	09 f0       	breq	.+2      	; 0x6078 <vfprintf+0x110>
    6076:	60 c0       	rjmp	.+192    	; 0x6138 <vfprintf+0x1d0>
    6078:	22 c0       	rjmp	.+68     	; 0x60be <vfprintf+0x156>
    607a:	f8 01       	movw	r30, r16
    607c:	80 81       	ld	r24, Z
    607e:	89 83       	std	Y+1, r24	; 0x01
    6080:	0e 5f       	subi	r16, 0xFE	; 254
    6082:	1f 4f       	sbci	r17, 0xFF	; 255
    6084:	42 01       	movw	r8, r4
    6086:	71 e0       	ldi	r23, 0x01	; 1
    6088:	a7 2e       	mov	r10, r23
    608a:	b1 2c       	mov	r11, r1
    608c:	16 c0       	rjmp	.+44     	; 0x60ba <vfprintf+0x152>
    608e:	62 e0       	ldi	r22, 0x02	; 2
    6090:	66 2e       	mov	r6, r22
    6092:	71 2c       	mov	r7, r1
    6094:	60 0e       	add	r6, r16
    6096:	71 1e       	adc	r7, r17
    6098:	f8 01       	movw	r30, r16
    609a:	80 80       	ld	r8, Z
    609c:	91 80       	ldd	r9, Z+1	; 0x01
    609e:	26 ff       	sbrs	r18, 6
    60a0:	03 c0       	rjmp	.+6      	; 0x60a8 <vfprintf+0x140>
    60a2:	6e 2d       	mov	r22, r14
    60a4:	70 e0       	ldi	r23, 0x00	; 0
    60a6:	02 c0       	rjmp	.+4      	; 0x60ac <vfprintf+0x144>
    60a8:	6f ef       	ldi	r22, 0xFF	; 255
    60aa:	7f ef       	ldi	r23, 0xFF	; 255
    60ac:	c4 01       	movw	r24, r8
    60ae:	2c 87       	std	Y+12, r18	; 0x0c
    60b0:	0e 94 a6 31 	call	0x634c	; 0x634c <strnlen>
    60b4:	5c 01       	movw	r10, r24
    60b6:	83 01       	movw	r16, r6
    60b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    60ba:	2f 77       	andi	r18, 0x7F	; 127
    60bc:	17 c0       	rjmp	.+46     	; 0x60ec <vfprintf+0x184>
    60be:	52 e0       	ldi	r21, 0x02	; 2
    60c0:	65 2e       	mov	r6, r21
    60c2:	71 2c       	mov	r7, r1
    60c4:	60 0e       	add	r6, r16
    60c6:	71 1e       	adc	r7, r17
    60c8:	f8 01       	movw	r30, r16
    60ca:	80 80       	ld	r8, Z
    60cc:	91 80       	ldd	r9, Z+1	; 0x01
    60ce:	26 ff       	sbrs	r18, 6
    60d0:	03 c0       	rjmp	.+6      	; 0x60d8 <vfprintf+0x170>
    60d2:	6e 2d       	mov	r22, r14
    60d4:	70 e0       	ldi	r23, 0x00	; 0
    60d6:	02 c0       	rjmp	.+4      	; 0x60dc <vfprintf+0x174>
    60d8:	6f ef       	ldi	r22, 0xFF	; 255
    60da:	7f ef       	ldi	r23, 0xFF	; 255
    60dc:	c4 01       	movw	r24, r8
    60de:	2c 87       	std	Y+12, r18	; 0x0c
    60e0:	0e 94 9b 31 	call	0x6336	; 0x6336 <strnlen_P>
    60e4:	5c 01       	movw	r10, r24
    60e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    60e8:	20 68       	ori	r18, 0x80	; 128
    60ea:	83 01       	movw	r16, r6
    60ec:	23 fd       	sbrc	r18, 3
    60ee:	20 c0       	rjmp	.+64     	; 0x6130 <vfprintf+0x1c8>
    60f0:	08 c0       	rjmp	.+16     	; 0x6102 <vfprintf+0x19a>
    60f2:	80 e2       	ldi	r24, 0x20	; 32
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	b6 01       	movw	r22, r12
    60f8:	2c 87       	std	Y+12, r18	; 0x0c
    60fa:	0e 94 b1 31 	call	0x6362	; 0x6362 <fputc>
    60fe:	fa 94       	dec	r15
    6100:	2c 85       	ldd	r18, Y+12	; 0x0c
    6102:	8f 2d       	mov	r24, r15
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	a8 16       	cp	r10, r24
    6108:	b9 06       	cpc	r11, r25
    610a:	98 f3       	brcs	.-26     	; 0x60f2 <vfprintf+0x18a>
    610c:	11 c0       	rjmp	.+34     	; 0x6130 <vfprintf+0x1c8>
    610e:	f4 01       	movw	r30, r8
    6110:	27 fd       	sbrc	r18, 7
    6112:	85 91       	lpm	r24, Z+
    6114:	27 ff       	sbrs	r18, 7
    6116:	81 91       	ld	r24, Z+
    6118:	4f 01       	movw	r8, r30
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	b6 01       	movw	r22, r12
    611e:	2c 87       	std	Y+12, r18	; 0x0c
    6120:	0e 94 b1 31 	call	0x6362	; 0x6362 <fputc>
    6124:	2c 85       	ldd	r18, Y+12	; 0x0c
    6126:	f1 10       	cpse	r15, r1
    6128:	fa 94       	dec	r15
    612a:	08 94       	sec
    612c:	a1 08       	sbc	r10, r1
    612e:	b1 08       	sbc	r11, r1
    6130:	a1 14       	cp	r10, r1
    6132:	b1 04       	cpc	r11, r1
    6134:	61 f7       	brne	.-40     	; 0x610e <vfprintf+0x1a6>
    6136:	f1 c0       	rjmp	.+482    	; 0x631a <vfprintf+0x3b2>
    6138:	84 36       	cpi	r24, 0x64	; 100
    613a:	11 f0       	breq	.+4      	; 0x6140 <vfprintf+0x1d8>
    613c:	89 36       	cpi	r24, 0x69	; 105
    613e:	49 f5       	brne	.+82     	; 0x6192 <vfprintf+0x22a>
    6140:	27 ff       	sbrs	r18, 7
    6142:	08 c0       	rjmp	.+16     	; 0x6154 <vfprintf+0x1ec>
    6144:	f8 01       	movw	r30, r16
    6146:	60 81       	ld	r22, Z
    6148:	71 81       	ldd	r23, Z+1	; 0x01
    614a:	82 81       	ldd	r24, Z+2	; 0x02
    614c:	93 81       	ldd	r25, Z+3	; 0x03
    614e:	0c 5f       	subi	r16, 0xFC	; 252
    6150:	1f 4f       	sbci	r17, 0xFF	; 255
    6152:	09 c0       	rjmp	.+18     	; 0x6166 <vfprintf+0x1fe>
    6154:	f8 01       	movw	r30, r16
    6156:	60 81       	ld	r22, Z
    6158:	71 81       	ldd	r23, Z+1	; 0x01
    615a:	88 27       	eor	r24, r24
    615c:	77 fd       	sbrc	r23, 7
    615e:	80 95       	com	r24
    6160:	98 2f       	mov	r25, r24
    6162:	0e 5f       	subi	r16, 0xFE	; 254
    6164:	1f 4f       	sbci	r17, 0xFF	; 255
    6166:	4f e6       	ldi	r20, 0x6F	; 111
    6168:	b4 2e       	mov	r11, r20
    616a:	b2 22       	and	r11, r18
    616c:	97 ff       	sbrs	r25, 7
    616e:	09 c0       	rjmp	.+18     	; 0x6182 <vfprintf+0x21a>
    6170:	90 95       	com	r25
    6172:	80 95       	com	r24
    6174:	70 95       	com	r23
    6176:	61 95       	neg	r22
    6178:	7f 4f       	sbci	r23, 0xFF	; 255
    617a:	8f 4f       	sbci	r24, 0xFF	; 255
    617c:	9f 4f       	sbci	r25, 0xFF	; 255
    617e:	f0 e8       	ldi	r31, 0x80	; 128
    6180:	bf 2a       	or	r11, r31
    6182:	a2 01       	movw	r20, r4
    6184:	2a e0       	ldi	r18, 0x0A	; 10
    6186:	30 e0       	ldi	r19, 0x00	; 0
    6188:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__ultoa_invert>
    618c:	78 2e       	mov	r7, r24
    618e:	74 18       	sub	r7, r4
    6190:	45 c0       	rjmp	.+138    	; 0x621c <vfprintf+0x2b4>
    6192:	85 37       	cpi	r24, 0x75	; 117
    6194:	31 f4       	brne	.+12     	; 0x61a2 <vfprintf+0x23a>
    6196:	3f ee       	ldi	r19, 0xEF	; 239
    6198:	b3 2e       	mov	r11, r19
    619a:	b2 22       	and	r11, r18
    619c:	2a e0       	ldi	r18, 0x0A	; 10
    619e:	30 e0       	ldi	r19, 0x00	; 0
    61a0:	25 c0       	rjmp	.+74     	; 0x61ec <vfprintf+0x284>
    61a2:	99 ef       	ldi	r25, 0xF9	; 249
    61a4:	b9 2e       	mov	r11, r25
    61a6:	b2 22       	and	r11, r18
    61a8:	8f 36       	cpi	r24, 0x6F	; 111
    61aa:	c1 f0       	breq	.+48     	; 0x61dc <vfprintf+0x274>
    61ac:	80 37       	cpi	r24, 0x70	; 112
    61ae:	20 f4       	brcc	.+8      	; 0x61b8 <vfprintf+0x250>
    61b0:	88 35       	cpi	r24, 0x58	; 88
    61b2:	09 f0       	breq	.+2      	; 0x61b6 <vfprintf+0x24e>
    61b4:	b5 c0       	rjmp	.+362    	; 0x6320 <vfprintf+0x3b8>
    61b6:	0d c0       	rjmp	.+26     	; 0x61d2 <vfprintf+0x26a>
    61b8:	80 37       	cpi	r24, 0x70	; 112
    61ba:	21 f0       	breq	.+8      	; 0x61c4 <vfprintf+0x25c>
    61bc:	88 37       	cpi	r24, 0x78	; 120
    61be:	09 f0       	breq	.+2      	; 0x61c2 <vfprintf+0x25a>
    61c0:	af c0       	rjmp	.+350    	; 0x6320 <vfprintf+0x3b8>
    61c2:	02 c0       	rjmp	.+4      	; 0x61c8 <vfprintf+0x260>
    61c4:	20 e1       	ldi	r18, 0x10	; 16
    61c6:	b2 2a       	or	r11, r18
    61c8:	b4 fe       	sbrs	r11, 4
    61ca:	0b c0       	rjmp	.+22     	; 0x61e2 <vfprintf+0x27a>
    61cc:	84 e0       	ldi	r24, 0x04	; 4
    61ce:	b8 2a       	or	r11, r24
    61d0:	08 c0       	rjmp	.+16     	; 0x61e2 <vfprintf+0x27a>
    61d2:	b4 fe       	sbrs	r11, 4
    61d4:	09 c0       	rjmp	.+18     	; 0x61e8 <vfprintf+0x280>
    61d6:	e6 e0       	ldi	r30, 0x06	; 6
    61d8:	be 2a       	or	r11, r30
    61da:	06 c0       	rjmp	.+12     	; 0x61e8 <vfprintf+0x280>
    61dc:	28 e0       	ldi	r18, 0x08	; 8
    61de:	30 e0       	ldi	r19, 0x00	; 0
    61e0:	05 c0       	rjmp	.+10     	; 0x61ec <vfprintf+0x284>
    61e2:	20 e1       	ldi	r18, 0x10	; 16
    61e4:	30 e0       	ldi	r19, 0x00	; 0
    61e6:	02 c0       	rjmp	.+4      	; 0x61ec <vfprintf+0x284>
    61e8:	20 e1       	ldi	r18, 0x10	; 16
    61ea:	32 e0       	ldi	r19, 0x02	; 2
    61ec:	b7 fe       	sbrs	r11, 7
    61ee:	08 c0       	rjmp	.+16     	; 0x6200 <vfprintf+0x298>
    61f0:	f8 01       	movw	r30, r16
    61f2:	60 81       	ld	r22, Z
    61f4:	71 81       	ldd	r23, Z+1	; 0x01
    61f6:	82 81       	ldd	r24, Z+2	; 0x02
    61f8:	93 81       	ldd	r25, Z+3	; 0x03
    61fa:	0c 5f       	subi	r16, 0xFC	; 252
    61fc:	1f 4f       	sbci	r17, 0xFF	; 255
    61fe:	07 c0       	rjmp	.+14     	; 0x620e <vfprintf+0x2a6>
    6200:	f8 01       	movw	r30, r16
    6202:	60 81       	ld	r22, Z
    6204:	71 81       	ldd	r23, Z+1	; 0x01
    6206:	80 e0       	ldi	r24, 0x00	; 0
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	0e 5f       	subi	r16, 0xFE	; 254
    620c:	1f 4f       	sbci	r17, 0xFF	; 255
    620e:	a2 01       	movw	r20, r4
    6210:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__ultoa_invert>
    6214:	78 2e       	mov	r7, r24
    6216:	74 18       	sub	r7, r4
    6218:	ff e7       	ldi	r31, 0x7F	; 127
    621a:	bf 22       	and	r11, r31
    621c:	b6 fe       	sbrs	r11, 6
    621e:	0b c0       	rjmp	.+22     	; 0x6236 <vfprintf+0x2ce>
    6220:	2e ef       	ldi	r18, 0xFE	; 254
    6222:	b2 22       	and	r11, r18
    6224:	7e 14       	cp	r7, r14
    6226:	38 f4       	brcc	.+14     	; 0x6236 <vfprintf+0x2ce>
    6228:	b4 fe       	sbrs	r11, 4
    622a:	07 c0       	rjmp	.+14     	; 0x623a <vfprintf+0x2d2>
    622c:	b2 fc       	sbrc	r11, 2
    622e:	05 c0       	rjmp	.+10     	; 0x623a <vfprintf+0x2d2>
    6230:	8f ee       	ldi	r24, 0xEF	; 239
    6232:	b8 22       	and	r11, r24
    6234:	02 c0       	rjmp	.+4      	; 0x623a <vfprintf+0x2d2>
    6236:	a7 2c       	mov	r10, r7
    6238:	01 c0       	rjmp	.+2      	; 0x623c <vfprintf+0x2d4>
    623a:	ae 2c       	mov	r10, r14
    623c:	8b 2d       	mov	r24, r11
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	b4 fe       	sbrs	r11, 4
    6242:	0d c0       	rjmp	.+26     	; 0x625e <vfprintf+0x2f6>
    6244:	fe 01       	movw	r30, r28
    6246:	e7 0d       	add	r30, r7
    6248:	f1 1d       	adc	r31, r1
    624a:	20 81       	ld	r18, Z
    624c:	20 33       	cpi	r18, 0x30	; 48
    624e:	19 f4       	brne	.+6      	; 0x6256 <vfprintf+0x2ee>
    6250:	e9 ee       	ldi	r30, 0xE9	; 233
    6252:	be 22       	and	r11, r30
    6254:	09 c0       	rjmp	.+18     	; 0x6268 <vfprintf+0x300>
    6256:	a3 94       	inc	r10
    6258:	b2 fe       	sbrs	r11, 2
    625a:	06 c0       	rjmp	.+12     	; 0x6268 <vfprintf+0x300>
    625c:	04 c0       	rjmp	.+8      	; 0x6266 <vfprintf+0x2fe>
    625e:	86 78       	andi	r24, 0x86	; 134
    6260:	90 70       	andi	r25, 0x00	; 0
    6262:	00 97       	sbiw	r24, 0x00	; 0
    6264:	09 f0       	breq	.+2      	; 0x6268 <vfprintf+0x300>
    6266:	a3 94       	inc	r10
    6268:	8b 2c       	mov	r8, r11
    626a:	99 24       	eor	r9, r9
    626c:	b3 fc       	sbrc	r11, 3
    626e:	14 c0       	rjmp	.+40     	; 0x6298 <vfprintf+0x330>
    6270:	b0 fe       	sbrs	r11, 0
    6272:	0f c0       	rjmp	.+30     	; 0x6292 <vfprintf+0x32a>
    6274:	af 14       	cp	r10, r15
    6276:	28 f4       	brcc	.+10     	; 0x6282 <vfprintf+0x31a>
    6278:	e7 2c       	mov	r14, r7
    627a:	ef 0c       	add	r14, r15
    627c:	ea 18       	sub	r14, r10
    627e:	af 2c       	mov	r10, r15
    6280:	08 c0       	rjmp	.+16     	; 0x6292 <vfprintf+0x32a>
    6282:	e7 2c       	mov	r14, r7
    6284:	06 c0       	rjmp	.+12     	; 0x6292 <vfprintf+0x32a>
    6286:	80 e2       	ldi	r24, 0x20	; 32
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	b6 01       	movw	r22, r12
    628c:	0e 94 b1 31 	call	0x6362	; 0x6362 <fputc>
    6290:	a3 94       	inc	r10
    6292:	af 14       	cp	r10, r15
    6294:	c0 f3       	brcs	.-16     	; 0x6286 <vfprintf+0x31e>
    6296:	04 c0       	rjmp	.+8      	; 0x62a0 <vfprintf+0x338>
    6298:	af 14       	cp	r10, r15
    629a:	10 f4       	brcc	.+4      	; 0x62a0 <vfprintf+0x338>
    629c:	fa 18       	sub	r15, r10
    629e:	01 c0       	rjmp	.+2      	; 0x62a2 <vfprintf+0x33a>
    62a0:	ff 24       	eor	r15, r15
    62a2:	84 fe       	sbrs	r8, 4
    62a4:	0f c0       	rjmp	.+30     	; 0x62c4 <vfprintf+0x35c>
    62a6:	80 e3       	ldi	r24, 0x30	; 48
    62a8:	90 e0       	ldi	r25, 0x00	; 0
    62aa:	b6 01       	movw	r22, r12
    62ac:	0e 94 b1 31 	call	0x6362	; 0x6362 <fputc>
    62b0:	82 fe       	sbrs	r8, 2
    62b2:	1f c0       	rjmp	.+62     	; 0x62f2 <vfprintf+0x38a>
    62b4:	81 fe       	sbrs	r8, 1
    62b6:	03 c0       	rjmp	.+6      	; 0x62be <vfprintf+0x356>
    62b8:	88 e5       	ldi	r24, 0x58	; 88
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	10 c0       	rjmp	.+32     	; 0x62de <vfprintf+0x376>
    62be:	88 e7       	ldi	r24, 0x78	; 120
    62c0:	90 e0       	ldi	r25, 0x00	; 0
    62c2:	0d c0       	rjmp	.+26     	; 0x62de <vfprintf+0x376>
    62c4:	c4 01       	movw	r24, r8
    62c6:	86 78       	andi	r24, 0x86	; 134
    62c8:	90 70       	andi	r25, 0x00	; 0
    62ca:	00 97       	sbiw	r24, 0x00	; 0
    62cc:	91 f0       	breq	.+36     	; 0x62f2 <vfprintf+0x38a>
    62ce:	81 fc       	sbrc	r8, 1
    62d0:	02 c0       	rjmp	.+4      	; 0x62d6 <vfprintf+0x36e>
    62d2:	80 e2       	ldi	r24, 0x20	; 32
    62d4:	01 c0       	rjmp	.+2      	; 0x62d8 <vfprintf+0x370>
    62d6:	8b e2       	ldi	r24, 0x2B	; 43
    62d8:	b7 fc       	sbrc	r11, 7
    62da:	8d e2       	ldi	r24, 0x2D	; 45
    62dc:	90 e0       	ldi	r25, 0x00	; 0
    62de:	b6 01       	movw	r22, r12
    62e0:	0e 94 b1 31 	call	0x6362	; 0x6362 <fputc>
    62e4:	06 c0       	rjmp	.+12     	; 0x62f2 <vfprintf+0x38a>
    62e6:	80 e3       	ldi	r24, 0x30	; 48
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	b6 01       	movw	r22, r12
    62ec:	0e 94 b1 31 	call	0x6362	; 0x6362 <fputc>
    62f0:	ea 94       	dec	r14
    62f2:	7e 14       	cp	r7, r14
    62f4:	c0 f3       	brcs	.-16     	; 0x62e6 <vfprintf+0x37e>
    62f6:	7a 94       	dec	r7
    62f8:	f2 01       	movw	r30, r4
    62fa:	e7 0d       	add	r30, r7
    62fc:	f1 1d       	adc	r31, r1
    62fe:	80 81       	ld	r24, Z
    6300:	90 e0       	ldi	r25, 0x00	; 0
    6302:	b6 01       	movw	r22, r12
    6304:	0e 94 b1 31 	call	0x6362	; 0x6362 <fputc>
    6308:	77 20       	and	r7, r7
    630a:	a9 f7       	brne	.-22     	; 0x62f6 <vfprintf+0x38e>
    630c:	06 c0       	rjmp	.+12     	; 0x631a <vfprintf+0x3b2>
    630e:	80 e2       	ldi	r24, 0x20	; 32
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	b6 01       	movw	r22, r12
    6314:	0e 94 b1 31 	call	0x6362	; 0x6362 <fputc>
    6318:	fa 94       	dec	r15
    631a:	ff 20       	and	r15, r15
    631c:	c1 f7       	brne	.-16     	; 0x630e <vfprintf+0x3a6>
    631e:	37 ce       	rjmp	.-914    	; 0x5f8e <vfprintf+0x26>
    6320:	f6 01       	movw	r30, r12
    6322:	26 81       	ldd	r18, Z+6	; 0x06
    6324:	37 81       	ldd	r19, Z+7	; 0x07
    6326:	02 c0       	rjmp	.+4      	; 0x632c <vfprintf+0x3c4>
    6328:	2f ef       	ldi	r18, 0xFF	; 255
    632a:	3f ef       	ldi	r19, 0xFF	; 255
    632c:	c9 01       	movw	r24, r18
    632e:	2c 96       	adiw	r28, 0x0c	; 12
    6330:	e2 e1       	ldi	r30, 0x12	; 18
    6332:	0c 94 57 32 	jmp	0x64ae	; 0x64ae <__epilogue_restores__>

00006336 <strnlen_P>:
    6336:	fc 01       	movw	r30, r24
    6338:	05 90       	lpm	r0, Z+
    633a:	61 50       	subi	r22, 0x01	; 1
    633c:	70 40       	sbci	r23, 0x00	; 0
    633e:	01 10       	cpse	r0, r1
    6340:	d8 f7       	brcc	.-10     	; 0x6338 <strnlen_P+0x2>
    6342:	80 95       	com	r24
    6344:	90 95       	com	r25
    6346:	8e 0f       	add	r24, r30
    6348:	9f 1f       	adc	r25, r31
    634a:	08 95       	ret

0000634c <strnlen>:
    634c:	fc 01       	movw	r30, r24
    634e:	61 50       	subi	r22, 0x01	; 1
    6350:	70 40       	sbci	r23, 0x00	; 0
    6352:	01 90       	ld	r0, Z+
    6354:	01 10       	cpse	r0, r1
    6356:	d8 f7       	brcc	.-10     	; 0x634e <strnlen+0x2>
    6358:	80 95       	com	r24
    635a:	90 95       	com	r25
    635c:	8e 0f       	add	r24, r30
    635e:	9f 1f       	adc	r25, r31
    6360:	08 95       	ret

00006362 <fputc>:
    6362:	0f 93       	push	r16
    6364:	1f 93       	push	r17
    6366:	cf 93       	push	r28
    6368:	df 93       	push	r29
    636a:	8c 01       	movw	r16, r24
    636c:	eb 01       	movw	r28, r22
    636e:	8b 81       	ldd	r24, Y+3	; 0x03
    6370:	81 ff       	sbrs	r24, 1
    6372:	1b c0       	rjmp	.+54     	; 0x63aa <fputc+0x48>
    6374:	82 ff       	sbrs	r24, 2
    6376:	0d c0       	rjmp	.+26     	; 0x6392 <fputc+0x30>
    6378:	2e 81       	ldd	r18, Y+6	; 0x06
    637a:	3f 81       	ldd	r19, Y+7	; 0x07
    637c:	8c 81       	ldd	r24, Y+4	; 0x04
    637e:	9d 81       	ldd	r25, Y+5	; 0x05
    6380:	28 17       	cp	r18, r24
    6382:	39 07       	cpc	r19, r25
    6384:	64 f4       	brge	.+24     	; 0x639e <fputc+0x3c>
    6386:	e8 81       	ld	r30, Y
    6388:	f9 81       	ldd	r31, Y+1	; 0x01
    638a:	01 93       	st	Z+, r16
    638c:	f9 83       	std	Y+1, r31	; 0x01
    638e:	e8 83       	st	Y, r30
    6390:	06 c0       	rjmp	.+12     	; 0x639e <fputc+0x3c>
    6392:	e8 85       	ldd	r30, Y+8	; 0x08
    6394:	f9 85       	ldd	r31, Y+9	; 0x09
    6396:	80 2f       	mov	r24, r16
    6398:	09 95       	icall
    639a:	00 97       	sbiw	r24, 0x00	; 0
    639c:	31 f4       	brne	.+12     	; 0x63aa <fputc+0x48>
    639e:	8e 81       	ldd	r24, Y+6	; 0x06
    63a0:	9f 81       	ldd	r25, Y+7	; 0x07
    63a2:	01 96       	adiw	r24, 0x01	; 1
    63a4:	9f 83       	std	Y+7, r25	; 0x07
    63a6:	8e 83       	std	Y+6, r24	; 0x06
    63a8:	02 c0       	rjmp	.+4      	; 0x63ae <fputc+0x4c>
    63aa:	0f ef       	ldi	r16, 0xFF	; 255
    63ac:	1f ef       	ldi	r17, 0xFF	; 255
    63ae:	c8 01       	movw	r24, r16
    63b0:	df 91       	pop	r29
    63b2:	cf 91       	pop	r28
    63b4:	1f 91       	pop	r17
    63b6:	0f 91       	pop	r16
    63b8:	08 95       	ret

000063ba <__ultoa_invert>:
    63ba:	fa 01       	movw	r30, r20
    63bc:	aa 27       	eor	r26, r26
    63be:	28 30       	cpi	r18, 0x08	; 8
    63c0:	51 f1       	breq	.+84     	; 0x6416 <__ultoa_invert+0x5c>
    63c2:	20 31       	cpi	r18, 0x10	; 16
    63c4:	81 f1       	breq	.+96     	; 0x6426 <__ultoa_invert+0x6c>
    63c6:	e8 94       	clt
    63c8:	6f 93       	push	r22
    63ca:	6e 7f       	andi	r22, 0xFE	; 254
    63cc:	6e 5f       	subi	r22, 0xFE	; 254
    63ce:	7f 4f       	sbci	r23, 0xFF	; 255
    63d0:	8f 4f       	sbci	r24, 0xFF	; 255
    63d2:	9f 4f       	sbci	r25, 0xFF	; 255
    63d4:	af 4f       	sbci	r26, 0xFF	; 255
    63d6:	b1 e0       	ldi	r27, 0x01	; 1
    63d8:	3e d0       	rcall	.+124    	; 0x6456 <__ultoa_invert+0x9c>
    63da:	b4 e0       	ldi	r27, 0x04	; 4
    63dc:	3c d0       	rcall	.+120    	; 0x6456 <__ultoa_invert+0x9c>
    63de:	67 0f       	add	r22, r23
    63e0:	78 1f       	adc	r23, r24
    63e2:	89 1f       	adc	r24, r25
    63e4:	9a 1f       	adc	r25, r26
    63e6:	a1 1d       	adc	r26, r1
    63e8:	68 0f       	add	r22, r24
    63ea:	79 1f       	adc	r23, r25
    63ec:	8a 1f       	adc	r24, r26
    63ee:	91 1d       	adc	r25, r1
    63f0:	a1 1d       	adc	r26, r1
    63f2:	6a 0f       	add	r22, r26
    63f4:	71 1d       	adc	r23, r1
    63f6:	81 1d       	adc	r24, r1
    63f8:	91 1d       	adc	r25, r1
    63fa:	a1 1d       	adc	r26, r1
    63fc:	20 d0       	rcall	.+64     	; 0x643e <__ultoa_invert+0x84>
    63fe:	09 f4       	brne	.+2      	; 0x6402 <__ultoa_invert+0x48>
    6400:	68 94       	set
    6402:	3f 91       	pop	r19
    6404:	2a e0       	ldi	r18, 0x0A	; 10
    6406:	26 9f       	mul	r18, r22
    6408:	11 24       	eor	r1, r1
    640a:	30 19       	sub	r19, r0
    640c:	30 5d       	subi	r19, 0xD0	; 208
    640e:	31 93       	st	Z+, r19
    6410:	de f6       	brtc	.-74     	; 0x63c8 <__ultoa_invert+0xe>
    6412:	cf 01       	movw	r24, r30
    6414:	08 95       	ret
    6416:	46 2f       	mov	r20, r22
    6418:	47 70       	andi	r20, 0x07	; 7
    641a:	40 5d       	subi	r20, 0xD0	; 208
    641c:	41 93       	st	Z+, r20
    641e:	b3 e0       	ldi	r27, 0x03	; 3
    6420:	0f d0       	rcall	.+30     	; 0x6440 <__ultoa_invert+0x86>
    6422:	c9 f7       	brne	.-14     	; 0x6416 <__ultoa_invert+0x5c>
    6424:	f6 cf       	rjmp	.-20     	; 0x6412 <__ultoa_invert+0x58>
    6426:	46 2f       	mov	r20, r22
    6428:	4f 70       	andi	r20, 0x0F	; 15
    642a:	40 5d       	subi	r20, 0xD0	; 208
    642c:	4a 33       	cpi	r20, 0x3A	; 58
    642e:	18 f0       	brcs	.+6      	; 0x6436 <__ultoa_invert+0x7c>
    6430:	49 5d       	subi	r20, 0xD9	; 217
    6432:	31 fd       	sbrc	r19, 1
    6434:	40 52       	subi	r20, 0x20	; 32
    6436:	41 93       	st	Z+, r20
    6438:	02 d0       	rcall	.+4      	; 0x643e <__ultoa_invert+0x84>
    643a:	a9 f7       	brne	.-22     	; 0x6426 <__ultoa_invert+0x6c>
    643c:	ea cf       	rjmp	.-44     	; 0x6412 <__ultoa_invert+0x58>
    643e:	b4 e0       	ldi	r27, 0x04	; 4
    6440:	a6 95       	lsr	r26
    6442:	97 95       	ror	r25
    6444:	87 95       	ror	r24
    6446:	77 95       	ror	r23
    6448:	67 95       	ror	r22
    644a:	ba 95       	dec	r27
    644c:	c9 f7       	brne	.-14     	; 0x6440 <__ultoa_invert+0x86>
    644e:	00 97       	sbiw	r24, 0x00	; 0
    6450:	61 05       	cpc	r22, r1
    6452:	71 05       	cpc	r23, r1
    6454:	08 95       	ret
    6456:	9b 01       	movw	r18, r22
    6458:	ac 01       	movw	r20, r24
    645a:	0a 2e       	mov	r0, r26
    645c:	06 94       	lsr	r0
    645e:	57 95       	ror	r21
    6460:	47 95       	ror	r20
    6462:	37 95       	ror	r19
    6464:	27 95       	ror	r18
    6466:	ba 95       	dec	r27
    6468:	c9 f7       	brne	.-14     	; 0x645c <__ultoa_invert+0xa2>
    646a:	62 0f       	add	r22, r18
    646c:	73 1f       	adc	r23, r19
    646e:	84 1f       	adc	r24, r20
    6470:	95 1f       	adc	r25, r21
    6472:	a0 1d       	adc	r26, r0
    6474:	08 95       	ret

00006476 <__prologue_saves__>:
    6476:	2f 92       	push	r2
    6478:	3f 92       	push	r3
    647a:	4f 92       	push	r4
    647c:	5f 92       	push	r5
    647e:	6f 92       	push	r6
    6480:	7f 92       	push	r7
    6482:	8f 92       	push	r8
    6484:	9f 92       	push	r9
    6486:	af 92       	push	r10
    6488:	bf 92       	push	r11
    648a:	cf 92       	push	r12
    648c:	df 92       	push	r13
    648e:	ef 92       	push	r14
    6490:	ff 92       	push	r15
    6492:	0f 93       	push	r16
    6494:	1f 93       	push	r17
    6496:	cf 93       	push	r28
    6498:	df 93       	push	r29
    649a:	cd b7       	in	r28, 0x3d	; 61
    649c:	de b7       	in	r29, 0x3e	; 62
    649e:	ca 1b       	sub	r28, r26
    64a0:	db 0b       	sbc	r29, r27
    64a2:	0f b6       	in	r0, 0x3f	; 63
    64a4:	f8 94       	cli
    64a6:	de bf       	out	0x3e, r29	; 62
    64a8:	0f be       	out	0x3f, r0	; 63
    64aa:	cd bf       	out	0x3d, r28	; 61
    64ac:	09 94       	ijmp

000064ae <__epilogue_restores__>:
    64ae:	2a 88       	ldd	r2, Y+18	; 0x12
    64b0:	39 88       	ldd	r3, Y+17	; 0x11
    64b2:	48 88       	ldd	r4, Y+16	; 0x10
    64b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    64b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    64b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    64ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    64bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    64be:	aa 84       	ldd	r10, Y+10	; 0x0a
    64c0:	b9 84       	ldd	r11, Y+9	; 0x09
    64c2:	c8 84       	ldd	r12, Y+8	; 0x08
    64c4:	df 80       	ldd	r13, Y+7	; 0x07
    64c6:	ee 80       	ldd	r14, Y+6	; 0x06
    64c8:	fd 80       	ldd	r15, Y+5	; 0x05
    64ca:	0c 81       	ldd	r16, Y+4	; 0x04
    64cc:	1b 81       	ldd	r17, Y+3	; 0x03
    64ce:	aa 81       	ldd	r26, Y+2	; 0x02
    64d0:	b9 81       	ldd	r27, Y+1	; 0x01
    64d2:	ce 0f       	add	r28, r30
    64d4:	d1 1d       	adc	r29, r1
    64d6:	0f b6       	in	r0, 0x3f	; 63
    64d8:	f8 94       	cli
    64da:	de bf       	out	0x3e, r29	; 62
    64dc:	0f be       	out	0x3f, r0	; 63
    64de:	cd bf       	out	0x3d, r28	; 61
    64e0:	ed 01       	movw	r28, r26
    64e2:	08 95       	ret

000064e4 <__do_global_dtors>:
    64e4:	10 e0       	ldi	r17, 0x00	; 0
    64e6:	c0 ec       	ldi	r28, 0xC0	; 192
    64e8:	d0 e0       	ldi	r29, 0x00	; 0
    64ea:	04 c0       	rjmp	.+8      	; 0x64f4 <__do_global_dtors+0x10>
    64ec:	fe 01       	movw	r30, r28
    64ee:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__tablejump__>
    64f2:	22 96       	adiw	r28, 0x02	; 2
    64f4:	c2 3c       	cpi	r28, 0xC2	; 194
    64f6:	d1 07       	cpc	r29, r17
    64f8:	c9 f7       	brne	.-14     	; 0x64ec <__do_global_dtors+0x8>
    64fa:	f8 94       	cli

000064fc <__stop_program>:
    64fc:	ff cf       	rjmp	.-2      	; 0x64fc <__stop_program>
